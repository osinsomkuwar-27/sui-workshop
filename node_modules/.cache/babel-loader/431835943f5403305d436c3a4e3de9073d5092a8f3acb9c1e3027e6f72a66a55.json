{"ast":null,"code":"import { bcs } from \"@mysten/bcs\";\nimport { Address } from \"./bcs.js\";\nfunction pureBcsSchemaFromTypeName(name) {\n  switch (name) {\n    case \"u8\":\n      return bcs.u8();\n    case \"u16\":\n      return bcs.u16();\n    case \"u32\":\n      return bcs.u32();\n    case \"u64\":\n      return bcs.u64();\n    case \"u128\":\n      return bcs.u128();\n    case \"u256\":\n      return bcs.u256();\n    case \"bool\":\n      return bcs.bool();\n    case \"string\":\n      return bcs.string();\n    case \"id\":\n    case \"address\":\n      return Address;\n  }\n  const generic = name.match(/^(vector|option)<(.+)>$/);\n  if (generic) {\n    const [kind, inner] = generic.slice(1);\n    if (kind === \"vector\") {\n      return bcs.vector(pureBcsSchemaFromTypeName(inner));\n    } else {\n      return bcs.option(pureBcsSchemaFromTypeName(inner));\n    }\n  }\n  throw new Error(`Invalid Pure type name: ${name}`);\n}\nexport { pureBcsSchemaFromTypeName };","map":{"version":3,"names":["bcs","Address","pureBcsSchemaFromTypeName","name","u8","u16","u32","u64","u128","u256","bool","string","generic","match","kind","inner","slice","vector","option","Error"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\bcs\\pure.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/bcs';\nimport type { BcsType } from '@mysten/bcs';\n\nimport { Address } from './bcs.js';\n\nexport type BasePureType =\n\t| 'u8'\n\t| 'u16'\n\t| 'u32'\n\t| 'u64'\n\t| 'u128'\n\t| 'u256'\n\t| 'bool'\n\t| 'id'\n\t| 'string'\n\t| 'address';\n\ninterface PureShapeByType {\n\tu8: number;\n\tu16: number;\n\tu32: number;\n\tu64: bigint | string | number;\n\tu128: bigint | string | number;\n\tu256: bigint | string | number;\n\tbool: boolean;\n\tstring: string;\n\tid: string | Uint8Array;\n\taddress: string | Uint8Array;\n}\n\nexport type PureTypeName = BasePureType | `vector<${string}>` | `option<${string}>`;\nexport type ValidPureTypeName<T extends string> = T extends BasePureType\n\t? PureTypeName\n\t: T extends `vector<${infer U}>`\n\t\t? ValidPureTypeName<U>\n\t\t: T extends `option<${infer U}>`\n\t\t\t? ValidPureTypeName<U>\n\t\t\t: PureTypeValidationError<T>;\n\nexport type ShapeFromPureTypeName<T extends PureTypeName> = T extends BasePureType\n\t? PureShapeByType[T]\n\t: T extends `vector<${infer U extends PureTypeName}>`\n\t\t? ShapeFromPureTypeName<U>[]\n\t\t: T extends `option<${infer U extends PureTypeName}>`\n\t\t\t? ShapeFromPureTypeName<U> | null\n\t\t\t: never;\n\ntype PureTypeValidationError<T extends string> = T & {\n\terror: `Invalid Pure type name: ${T}`;\n};\n\nexport function pureBcsSchemaFromTypeName<T extends PureTypeName>(\n\tname: T extends PureTypeName ? ValidPureTypeName<T> : T,\n): BcsType<ShapeFromPureTypeName<T>> {\n\tswitch (name) {\n\t\tcase 'u8':\n\t\t\treturn bcs.u8() as never;\n\t\tcase 'u16':\n\t\t\treturn bcs.u16() as never;\n\t\tcase 'u32':\n\t\t\treturn bcs.u32() as never;\n\t\tcase 'u64':\n\t\t\treturn bcs.u64() as never;\n\t\tcase 'u128':\n\t\t\treturn bcs.u128() as never;\n\t\tcase 'u256':\n\t\t\treturn bcs.u256() as never;\n\t\tcase 'bool':\n\t\t\treturn bcs.bool() as never;\n\t\tcase 'string':\n\t\t\treturn bcs.string() as never;\n\t\tcase 'id':\n\t\tcase 'address':\n\t\t\treturn Address as never;\n\t}\n\n\tconst generic = name.match(/^(vector|option)<(.+)>$/);\n\tif (generic) {\n\t\tconst [kind, inner] = generic.slice(1);\n\t\tif (kind === 'vector') {\n\t\t\treturn bcs.vector(pureBcsSchemaFromTypeName(inner as PureTypeName)) as never;\n\t\t} else {\n\t\t\treturn bcs.option(pureBcsSchemaFromTypeName(inner as PureTypeName)) as never;\n\t\t}\n\t}\n\n\tthrow new Error(`Invalid Pure type name: ${name}`);\n}\n"],"mappings":"AAGA,SAASA,GAAA,QAAW;AAGpB,SAASC,OAAA,QAAe;AAgDjB,SAASC,0BACfC,IAAA,EACoC;EACpC,QAAQA,IAAA;IACP,KAAK;MACJ,OAAOH,GAAA,CAAII,EAAA,CAAG;IACf,KAAK;MACJ,OAAOJ,GAAA,CAAIK,GAAA,CAAI;IAChB,KAAK;MACJ,OAAOL,GAAA,CAAIM,GAAA,CAAI;IAChB,KAAK;MACJ,OAAON,GAAA,CAAIO,GAAA,CAAI;IAChB,KAAK;MACJ,OAAOP,GAAA,CAAIQ,IAAA,CAAK;IACjB,KAAK;MACJ,OAAOR,GAAA,CAAIS,IAAA,CAAK;IACjB,KAAK;MACJ,OAAOT,GAAA,CAAIU,IAAA,CAAK;IACjB,KAAK;MACJ,OAAOV,GAAA,CAAIW,MAAA,CAAO;IACnB,KAAK;IACL,KAAK;MACJ,OAAOV,OAAA;EACT;EAEA,MAAMW,OAAA,GAAUT,IAAA,CAAKU,KAAA,CAAM,yBAAyB;EACpD,IAAID,OAAA,EAAS;IACZ,MAAM,CAACE,IAAA,EAAMC,KAAK,IAAIH,OAAA,CAAQI,KAAA,CAAM,CAAC;IACrC,IAAIF,IAAA,KAAS,UAAU;MACtB,OAAOd,GAAA,CAAIiB,MAAA,CAAOf,yBAAA,CAA0Ba,KAAqB,CAAC;IACnE,OAAO;MACN,OAAOf,GAAA,CAAIkB,MAAA,CAAOhB,yBAAA,CAA0Ba,KAAqB,CAAC;IACnE;EACD;EAEA,MAAM,IAAII,KAAA,CAAM,2BAA2BhB,IAAI,EAAE;AAClD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
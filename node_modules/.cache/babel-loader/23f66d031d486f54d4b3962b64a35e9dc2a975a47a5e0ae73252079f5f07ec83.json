{"ast":null,"code":"import { array, boolean, integer, literal, nullable, nullish, number, object, optional, pipe, record, string, tuple, union, unknown } from \"valibot\";\nimport { BCSBytes, JsonU64, ObjectID, ObjectRef, SuiAddress } from \"./internal.js\";\nfunction enumUnion(options) {\n  return union(Object.entries(options).map(([key, value]) => object({\n    [key]: value\n  })));\n}\nconst Argument = enumUnion({\n  GasCoin: literal(true),\n  Input: pipe(number(), integer()),\n  Result: pipe(number(), integer()),\n  NestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())])\n});\nconst GasData = object({\n  budget: nullable(JsonU64),\n  price: nullable(JsonU64),\n  owner: nullable(SuiAddress),\n  payment: nullable(array(ObjectRef))\n});\nconst ProgrammableMoveCall = object({\n  package: ObjectID,\n  module: string(),\n  function: string(),\n  // snake case in rust\n  typeArguments: array(string()),\n  arguments: array(Argument)\n});\nconst $Intent = object({\n  name: string(),\n  inputs: record(string(), union([Argument, array(Argument)])),\n  data: record(string(), unknown())\n});\nconst Command = enumUnion({\n  MoveCall: ProgrammableMoveCall,\n  TransferObjects: object({\n    objects: array(Argument),\n    address: Argument\n  }),\n  SplitCoins: object({\n    coin: Argument,\n    amounts: array(Argument)\n  }),\n  MergeCoins: object({\n    destination: Argument,\n    sources: array(Argument)\n  }),\n  Publish: object({\n    modules: array(BCSBytes),\n    dependencies: array(ObjectID)\n  }),\n  MakeMoveVec: object({\n    type: nullable(string()),\n    elements: array(Argument)\n  }),\n  Upgrade: object({\n    modules: array(BCSBytes),\n    dependencies: array(ObjectID),\n    package: ObjectID,\n    ticket: Argument\n  }),\n  $Intent\n});\nconst ObjectArg = enumUnion({\n  ImmOrOwnedObject: ObjectRef,\n  SharedObject: object({\n    objectId: ObjectID,\n    // snake case in rust\n    initialSharedVersion: JsonU64,\n    mutable: boolean()\n  }),\n  Receiving: ObjectRef\n});\nconst CallArg = enumUnion({\n  Object: ObjectArg,\n  Pure: object({\n    bytes: BCSBytes\n  }),\n  UnresolvedPure: object({\n    value: unknown()\n  }),\n  UnresolvedObject: object({\n    objectId: ObjectID,\n    version: optional(nullable(JsonU64)),\n    digest: optional(nullable(string())),\n    initialSharedVersion: optional(nullable(JsonU64))\n  })\n});\nconst TransactionExpiration = enumUnion({\n  None: literal(true),\n  Epoch: JsonU64\n});\nconst SerializedTransactionDataV2 = object({\n  version: literal(2),\n  sender: nullish(SuiAddress),\n  expiration: nullish(TransactionExpiration),\n  gasData: GasData,\n  inputs: array(CallArg),\n  commands: array(Command)\n});\nexport { SerializedTransactionDataV2 };","map":{"version":3,"names":["array","boolean","integer","literal","nullable","nullish","number","object","optional","pipe","record","string","tuple","union","unknown","BCSBytes","JsonU64","ObjectID","ObjectRef","SuiAddress","enumUnion","options","Object","entries","map","key","value","Argument","GasCoin","Input","Result","NestedResult","GasData","budget","price","owner","payment","ProgrammableMoveCall","package","module","function","typeArguments","arguments","$Intent","name","inputs","data","Command","MoveCall","TransferObjects","objects","address","SplitCoins","coin","amounts","MergeCoins","destination","sources","Publish","modules","dependencies","MakeMoveVec","type","elements","Upgrade","ticket","ObjectArg","ImmOrOwnedObject","SharedObject","objectId","initialSharedVersion","mutable","Receiving","CallArg","Pure","bytes","UnresolvedPure","UnresolvedObject","version","digest","TransactionExpiration","None","Epoch","SerializedTransactionDataV2","sender","expiration","gasData","commands"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\transactions\\data\\v2.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumInputShape } from '@mysten/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n\tarray,\n\tboolean,\n\tinteger,\n\tliteral,\n\tnullable,\n\tnullish,\n\tnumber,\n\tobject,\n\toptional,\n\tpipe,\n\trecord,\n\tstring,\n\ttuple,\n\tunion,\n\tunknown,\n} from 'valibot';\n\nimport { BCSBytes, JsonU64, ObjectID, ObjectRef, SuiAddress } from './internal.js';\n\ntype Merge<T> = T extends object ? { [K in keyof T]: T[K] } : never;\n\nfunction enumUnion<T extends Record<string, GenericSchema<any>>>(options: T) {\n\treturn union(\n\t\tObject.entries(options).map(([key, value]) => object({ [key]: value })),\n\t) as GenericSchema<\n\t\tEnumInputShape<\n\t\t\tMerge<{\n\t\t\t\t[K in keyof T]: InferInput<T[K]>;\n\t\t\t}>\n\t\t>\n\t>;\n}\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L690-L702\nconst Argument = enumUnion({\n\tGasCoin: literal(true),\n\tInput: pipe(number(), integer()),\n\tResult: pipe(number(), integer()),\n\tNestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())]),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L1387-L1392\nconst GasData = object({\n\tbudget: nullable(JsonU64),\n\tprice: nullable(JsonU64),\n\towner: nullable(SuiAddress),\n\tpayment: nullable(array(ObjectRef)),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L707-L718\nconst ProgrammableMoveCall = object({\n\tpackage: ObjectID,\n\tmodule: string(),\n\tfunction: string(),\n\t// snake case in rust\n\ttypeArguments: array(string()),\n\targuments: array(Argument),\n});\n\nconst $Intent = object({\n\tname: string(),\n\tinputs: record(string(), union([Argument, array(Argument)])),\n\tdata: record(string(), unknown()),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L657-L685\nconst Command = enumUnion({\n\tMoveCall: ProgrammableMoveCall,\n\tTransferObjects: object({\n\t\tobjects: array(Argument),\n\t\taddress: Argument,\n\t}),\n\tSplitCoins: object({\n\t\tcoin: Argument,\n\t\tamounts: array(Argument),\n\t}),\n\tMergeCoins: object({\n\t\tdestination: Argument,\n\t\tsources: array(Argument),\n\t}),\n\tPublish: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t}),\n\tMakeMoveVec: object({\n\t\ttype: nullable(string()),\n\t\telements: array(Argument),\n\t}),\n\tUpgrade: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t\tpackage: ObjectID,\n\t\tticket: Argument,\n\t}),\n\t$Intent,\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L102-L114\nconst ObjectArg = enumUnion({\n\tImmOrOwnedObject: ObjectRef,\n\tSharedObject: object({\n\t\tobjectId: ObjectID,\n\t\t// snake case in rust\n\t\tinitialSharedVersion: JsonU64,\n\t\tmutable: boolean(),\n\t}),\n\tReceiving: ObjectRef,\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L75-L80\nconst CallArg = enumUnion({\n\tObject: ObjectArg,\n\tPure: object({\n\t\tbytes: BCSBytes,\n\t}),\n\tUnresolvedPure: object({\n\t\tvalue: unknown(),\n\t}),\n\tUnresolvedObject: object({\n\t\tobjectId: ObjectID,\n\t\tversion: optional(nullable(JsonU64)),\n\t\tdigest: optional(nullable(string())),\n\t\tinitialSharedVersion: optional(nullable(JsonU64)),\n\t}),\n});\n\nconst TransactionExpiration = enumUnion({\n\tNone: literal(true),\n\tEpoch: JsonU64,\n});\n\nexport const SerializedTransactionDataV2 = object({\n\tversion: literal(2),\n\tsender: nullish(SuiAddress),\n\texpiration: nullish(TransactionExpiration),\n\tgasData: GasData,\n\tinputs: array(CallArg),\n\tcommands: array(Command),\n});\n\nexport type SerializedTransactionDataV2 = InferOutput<typeof SerializedTransactionDataV2>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { bcs } from \"@mysten/sui/bcs\";\nimport { SuiGraphQLClient } from \"@mysten/sui/graphql\";\nimport { graphql } from \"@mysten/sui/graphql/schemas/latest\";\nimport { fromBase64, normalizeSuiAddress } from \"@mysten/sui/utils\";\nimport { ZkSendLink } from \"./claim.js\";\nimport { getContractIds } from \"./zk-bag.js\";\nconst ListCreatedLinksQuery = graphql(`\n\tquery listCreatedLinks($address: SuiAddress!, $function: String!, $cursor: String) {\n\t\ttransactionBlocks(\n\t\t\tlast: 10\n\t\t\tbefore: $cursor\n\t\t\tfilter: { sentAddress: $address, function: $function }\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\tstartCursor\n\t\t\t\thasPreviousPage\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\teffects {\n\t\t\t\t\ttimestamp\n\t\t\t\t}\n\t\t\t\tdigest\n\t\t\t\tbcs\n\t\t\t}\n\t\t}\n\t}\n`);\nasync function listCreatedLinks({\n  address,\n  cursor,\n  network,\n  contract = getContractIds(network),\n  fetch: fetchFn,\n  ...linkOptions\n}) {\n  const gqlClient = new SuiGraphQLClient({\n    url: network === \"testnet\" ? \"https://sui-testnet.mystenlabs.com/graphql\" : \"https://sui-mainnet.mystenlabs.com/graphql\",\n    fetch: fetchFn\n  });\n  const packageId = normalizeSuiAddress(contract.packageId);\n  const page = await gqlClient.query({\n    query: ListCreatedLinksQuery,\n    variables: {\n      address,\n      cursor,\n      function: `${packageId}::zk_bag::new`\n    }\n  });\n  const transactionBlocks = page.data?.transactionBlocks;\n  if (!transactionBlocks || page.errors?.length) {\n    throw new Error(\"Failed to load created links\");\n  }\n  const links = (await Promise.all(transactionBlocks.nodes.map(async node => {\n    if (!node.bcs) {\n      return null;\n    }\n    const kind = bcs.TransactionData.parse(fromBase64(node.bcs)).V1.kind;\n    if (!kind?.ProgrammableTransaction) {\n      return null;\n    }\n    const {\n      inputs,\n      commands\n    } = kind.ProgrammableTransaction;\n    const fn = commands.find(command => command.MoveCall?.package === packageId && command.MoveCall.module === \"zk_bag\" && command.MoveCall.function === \"new\");\n    if (!fn?.MoveCall) {\n      return null;\n    }\n    const addressArg = fn.MoveCall.arguments[1];\n    if (addressArg.$kind !== \"Input\") {\n      throw new Error(\"Invalid address argument\");\n    }\n    const input = inputs[addressArg.Input];\n    if (!input.Pure) {\n      throw new Error(\"Expected Address input to be a Pure value\");\n    }\n    const address2 = bcs.Address.fromBase64(input.Pure.bytes);\n    const link = new ZkSendLink({\n      network,\n      address: address2,\n      contract,\n      isContractLink: true,\n      ...linkOptions\n    });\n    await link.loadAssets();\n    return {\n      link,\n      claimed: !!link.claimed,\n      assets: link.assets,\n      digest: node.digest,\n      createdAt: node.effects?.timestamp\n    };\n  }))).reverse();\n  return {\n    cursor: transactionBlocks.pageInfo.startCursor,\n    hasNextPage: transactionBlocks.pageInfo.hasPreviousPage,\n    links: links.filter(link => link !== null)\n  };\n}\nexport { listCreatedLinks };","map":{"version":3,"names":["bcs","SuiGraphQLClient","graphql","fromBase64","normalizeSuiAddress","ZkSendLink","getContractIds","ListCreatedLinksQuery","listCreatedLinks","address","cursor","network","contract","fetch","fetchFn","linkOptions","gqlClient","url","packageId","page","query","variables","function","transactionBlocks","data","errors","length","Error","links","Promise","all","nodes","map","node","kind","TransactionData","parse","V1","ProgrammableTransaction","inputs","commands","fn","find","command","MoveCall","package","module","addressArg","arguments","$kind","input","Input","Pure","address2","Address","bytes","link","isContractLink","loadAssets","claimed","assets","digest","createdAt","effects","timestamp","reverse","pageInfo","startCursor","hasNextPage","hasPreviousPage","filter"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\zksend\\src\\links\\list-created-links.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { SuiClient } from '@mysten/sui/client';\nimport { SuiGraphQLClient } from '@mysten/sui/graphql';\nimport { graphql } from '@mysten/sui/graphql/schemas/latest';\nimport { fromBase64, normalizeSuiAddress } from '@mysten/sui/utils';\n\nimport { ZkSendLink } from './claim.js';\nimport type { ZkBagContractOptions } from './zk-bag.js';\nimport { getContractIds } from './zk-bag.js';\n\nconst ListCreatedLinksQuery = graphql(`\n\tquery listCreatedLinks($address: SuiAddress!, $function: String!, $cursor: String) {\n\t\ttransactionBlocks(\n\t\t\tlast: 10\n\t\t\tbefore: $cursor\n\t\t\tfilter: { sentAddress: $address, function: $function }\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\tstartCursor\n\t\t\t\thasPreviousPage\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\teffects {\n\t\t\t\t\ttimestamp\n\t\t\t\t}\n\t\t\t\tdigest\n\t\t\t\tbcs\n\t\t\t}\n\t\t}\n\t}\n`);\n\nexport async function listCreatedLinks({\n\taddress,\n\tcursor,\n\tnetwork,\n\tcontract = getContractIds(network),\n\tfetch: fetchFn,\n\t...linkOptions\n}: {\n\taddress: string;\n\tcontract?: ZkBagContractOptions;\n\tcursor?: string;\n\tnetwork?: 'mainnet' | 'testnet';\n\n\t// Link options:\n\thost?: string;\n\tpath?: string;\n\tclaimApi?: string;\n\tclient?: SuiClient;\n\tfetch?: typeof fetch;\n}) {\n\tconst gqlClient = new SuiGraphQLClient({\n\t\turl:\n\t\t\tnetwork === 'testnet'\n\t\t\t\t? 'https://sui-testnet.mystenlabs.com/graphql'\n\t\t\t\t: 'https://sui-mainnet.mystenlabs.com/graphql',\n\t\tfetch: fetchFn,\n\t});\n\n\tconst packageId = normalizeSuiAddress(contract.packageId);\n\n\tconst page = await gqlClient.query({\n\t\tquery: ListCreatedLinksQuery,\n\t\tvariables: {\n\t\t\taddress,\n\t\t\tcursor,\n\t\t\tfunction: `${packageId}::zk_bag::new`,\n\t\t},\n\t});\n\n\tconst transactionBlocks = page.data?.transactionBlocks;\n\n\tif (!transactionBlocks || page.errors?.length) {\n\t\tthrow new Error('Failed to load created links');\n\t}\n\n\tconst links = (\n\t\tawait Promise.all(\n\t\t\ttransactionBlocks.nodes.map(async (node) => {\n\t\t\t\tif (!node.bcs) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst kind = bcs.TransactionData.parse(fromBase64(node.bcs)).V1.kind;\n\n\t\t\t\tif (!kind?.ProgrammableTransaction) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst { inputs, commands } = kind.ProgrammableTransaction;\n\n\t\t\t\tconst fn = commands.find(\n\t\t\t\t\t(command) =>\n\t\t\t\t\t\tcommand.MoveCall?.package === packageId &&\n\t\t\t\t\t\tcommand.MoveCall.module === 'zk_bag' &&\n\t\t\t\t\t\tcommand.MoveCall.function === 'new',\n\t\t\t\t);\n\n\t\t\t\tif (!fn?.MoveCall) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst addressArg = fn.MoveCall.arguments[1];\n\n\t\t\t\tif (addressArg.$kind !== 'Input') {\n\t\t\t\t\tthrow new Error('Invalid address argument');\n\t\t\t\t}\n\n\t\t\t\tconst input = inputs[addressArg.Input];\n\n\t\t\t\tif (!input.Pure) {\n\t\t\t\t\tthrow new Error('Expected Address input to be a Pure value');\n\t\t\t\t}\n\n\t\t\t\tconst address = bcs.Address.fromBase64(input.Pure.bytes);\n\n\t\t\t\tconst link = new ZkSendLink({\n\t\t\t\t\tnetwork,\n\t\t\t\t\taddress,\n\t\t\t\t\tcontract,\n\t\t\t\t\tisContractLink: true,\n\t\t\t\t\t...linkOptions,\n\t\t\t\t});\n\n\t\t\t\tawait link.loadAssets();\n\n\t\t\t\treturn {\n\t\t\t\t\tlink,\n\t\t\t\t\tclaimed: !!link.claimed,\n\t\t\t\t\tassets: link.assets!,\n\t\t\t\t\tdigest: node.digest,\n\t\t\t\t\tcreatedAt: node.effects?.timestamp!,\n\t\t\t\t};\n\t\t\t}),\n\t\t)\n\t).reverse();\n\n\treturn {\n\t\tcursor: transactionBlocks.pageInfo.startCursor,\n\t\thasNextPage: transactionBlocks.pageInfo.hasPreviousPage,\n\t\tlinks: links.filter((link): link is NonNullable<typeof link> => link !== null),\n\t};\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { isSerializedBcs } from \"@mysten/bcs\";\nimport { bcs } from \"../bcs/index.js\";\nimport { pureBcsSchemaFromTypeName } from \"../bcs/pure.js\";\nfunction createPure(makePure) {\n  function pure(typeOrSerializedValue, value) {\n    if (typeof typeOrSerializedValue === \"string\") {\n      return makePure(pureBcsSchemaFromTypeName(typeOrSerializedValue).serialize(value));\n    }\n    if (typeOrSerializedValue instanceof Uint8Array || isSerializedBcs(typeOrSerializedValue)) {\n      return makePure(typeOrSerializedValue);\n    }\n    throw new Error(\"tx.pure must be called either a bcs type name, or a serialized bcs value\");\n  }\n  pure.u8 = value => makePure(bcs.U8.serialize(value));\n  pure.u16 = value => makePure(bcs.U16.serialize(value));\n  pure.u32 = value => makePure(bcs.U32.serialize(value));\n  pure.u64 = value => makePure(bcs.U64.serialize(value));\n  pure.u128 = value => makePure(bcs.U128.serialize(value));\n  pure.u256 = value => makePure(bcs.U256.serialize(value));\n  pure.bool = value => makePure(bcs.Bool.serialize(value));\n  pure.string = value => makePure(bcs.String.serialize(value));\n  pure.address = value => makePure(bcs.Address.serialize(value));\n  pure.id = pure.address;\n  pure.vector = (type, value) => {\n    return makePure(bcs.vector(pureBcsSchemaFromTypeName(type)).serialize(value));\n  };\n  pure.option = (type, value) => {\n    return makePure(bcs.option(pureBcsSchemaFromTypeName(type)).serialize(value));\n  };\n  return pure;\n}\nexport { createPure };","map":{"version":3,"names":["isSerializedBcs","bcs","pureBcsSchemaFromTypeName","createPure","makePure","pure","typeOrSerializedValue","value","serialize","Uint8Array","Error","u8","U8","u16","U16","u32","U32","u64","U64","u128","U128","u256","U256","bool","Bool","string","String","address","Address","id","vector","type","option"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\transactions\\pure.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isSerializedBcs } from '@mysten/bcs';\nimport type { SerializedBcs } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport { pureBcsSchemaFromTypeName } from '../bcs/pure.js';\nimport type { PureTypeName, ShapeFromPureTypeName, ValidPureTypeName } from '../bcs/pure.js';\n\nexport function createPure<T>(makePure: (value: SerializedBcs<any, any> | Uint8Array) => T) {\n\tfunction pure<T extends PureTypeName>(\n\t\ttype: T extends PureTypeName ? ValidPureTypeName<T> : T,\n\t\tvalue: ShapeFromPureTypeName<T>,\n\t): T;\n\n\tfunction pure(\n\t\t/**\n\t\t * The pure value, serialized to BCS. If this is a Uint8Array, then the value\n\t\t * is assumed to be raw bytes, and will be used directly.\n\t\t */\n\t\tvalue: SerializedBcs<any, any> | Uint8Array,\n\t): T;\n\n\tfunction pure(\n\t\ttypeOrSerializedValue?: PureTypeName | SerializedBcs<any, any> | Uint8Array,\n\t\tvalue?: unknown,\n\t): T {\n\t\tif (typeof typeOrSerializedValue === 'string') {\n\t\t\treturn makePure(pureBcsSchemaFromTypeName(typeOrSerializedValue).serialize(value as never));\n\t\t}\n\n\t\tif (typeOrSerializedValue instanceof Uint8Array || isSerializedBcs(typeOrSerializedValue)) {\n\t\t\treturn makePure(typeOrSerializedValue);\n\t\t}\n\n\t\tthrow new Error('tx.pure must be called either a bcs type name, or a serialized bcs value');\n\t}\n\n\tpure.u8 = (value: number) => makePure(bcs.U8.serialize(value));\n\tpure.u16 = (value: number) => makePure(bcs.U16.serialize(value));\n\tpure.u32 = (value: number) => makePure(bcs.U32.serialize(value));\n\tpure.u64 = (value: bigint | number | string) => makePure(bcs.U64.serialize(value));\n\tpure.u128 = (value: bigint | number | string) => makePure(bcs.U128.serialize(value));\n\tpure.u256 = (value: bigint | number | string) => makePure(bcs.U256.serialize(value));\n\tpure.bool = (value: boolean) => makePure(bcs.Bool.serialize(value));\n\tpure.string = (value: string) => makePure(bcs.String.serialize(value));\n\tpure.address = (value: string) => makePure(bcs.Address.serialize(value));\n\tpure.id = pure.address;\n\tpure.vector = <Type extends PureTypeName>(\n\t\ttype: T extends PureTypeName ? ValidPureTypeName<Type> : Type,\n\t\tvalue: Iterable<ShapeFromPureTypeName<Type>> & { length: number },\n\t) => {\n\t\treturn makePure(\n\t\t\tbcs.vector(pureBcsSchemaFromTypeName(type as PureTypeName)).serialize(value as never),\n\t\t);\n\t};\n\tpure.option = <Type extends PureTypeName>(\n\t\ttype: T extends PureTypeName ? ValidPureTypeName<Type> : Type,\n\t\tvalue: ShapeFromPureTypeName<Type> | null | undefined,\n\t) => {\n\t\treturn makePure(bcs.option(pureBcsSchemaFromTypeName(type)).serialize(value as never));\n\t};\n\n\treturn pure;\n}\n"],"mappings":"AAGA,SAASA,eAAA,QAAuB;AAGhC,SAASC,GAAA,QAAW;AACpB,SAASC,yBAAA,QAAiC;AAGnC,SAASC,WAAcC,QAAA,EAA8D;EAc3F,SAASC,KACRC,qBAAA,EACAC,KAAA,EACI;IACJ,IAAI,OAAOD,qBAAA,KAA0B,UAAU;MAC9C,OAAOF,QAAA,CAASF,yBAAA,CAA0BI,qBAAqB,EAAEE,SAAA,CAAUD,KAAc,CAAC;IAC3F;IAEA,IAAID,qBAAA,YAAiCG,UAAA,IAAcT,eAAA,CAAgBM,qBAAqB,GAAG;MAC1F,OAAOF,QAAA,CAASE,qBAAqB;IACtC;IAEA,MAAM,IAAII,KAAA,CAAM,0EAA0E;EAC3F;EAEAL,IAAA,CAAKM,EAAA,GAAMJ,KAAA,IAAkBH,QAAA,CAASH,GAAA,CAAIW,EAAA,CAAGJ,SAAA,CAAUD,KAAK,CAAC;EAC7DF,IAAA,CAAKQ,GAAA,GAAON,KAAA,IAAkBH,QAAA,CAASH,GAAA,CAAIa,GAAA,CAAIN,SAAA,CAAUD,KAAK,CAAC;EAC/DF,IAAA,CAAKU,GAAA,GAAOR,KAAA,IAAkBH,QAAA,CAASH,GAAA,CAAIe,GAAA,CAAIR,SAAA,CAAUD,KAAK,CAAC;EAC/DF,IAAA,CAAKY,GAAA,GAAOV,KAAA,IAAoCH,QAAA,CAASH,GAAA,CAAIiB,GAAA,CAAIV,SAAA,CAAUD,KAAK,CAAC;EACjFF,IAAA,CAAKc,IAAA,GAAQZ,KAAA,IAAoCH,QAAA,CAASH,GAAA,CAAImB,IAAA,CAAKZ,SAAA,CAAUD,KAAK,CAAC;EACnFF,IAAA,CAAKgB,IAAA,GAAQd,KAAA,IAAoCH,QAAA,CAASH,GAAA,CAAIqB,IAAA,CAAKd,SAAA,CAAUD,KAAK,CAAC;EACnFF,IAAA,CAAKkB,IAAA,GAAQhB,KAAA,IAAmBH,QAAA,CAASH,GAAA,CAAIuB,IAAA,CAAKhB,SAAA,CAAUD,KAAK,CAAC;EAClEF,IAAA,CAAKoB,MAAA,GAAUlB,KAAA,IAAkBH,QAAA,CAASH,GAAA,CAAIyB,MAAA,CAAOlB,SAAA,CAAUD,KAAK,CAAC;EACrEF,IAAA,CAAKsB,OAAA,GAAWpB,KAAA,IAAkBH,QAAA,CAASH,GAAA,CAAI2B,OAAA,CAAQpB,SAAA,CAAUD,KAAK,CAAC;EACvEF,IAAA,CAAKwB,EAAA,GAAKxB,IAAA,CAAKsB,OAAA;EACftB,IAAA,CAAKyB,MAAA,GAAS,CACbC,IAAA,EACAxB,KAAA,KACI;IACJ,OAAOH,QAAA,CACNH,GAAA,CAAI6B,MAAA,CAAO5B,yBAAA,CAA0B6B,IAAoB,CAAC,EAAEvB,SAAA,CAAUD,KAAc,CACrF;EACD;EACAF,IAAA,CAAK2B,MAAA,GAAS,CACbD,IAAA,EACAxB,KAAA,KACI;IACJ,OAAOH,QAAA,CAASH,GAAA,CAAI+B,MAAA,CAAO9B,yBAAA,CAA0B6B,IAAI,CAAC,EAAEvB,SAAA,CAAUD,KAAc,CAAC;EACtF;EAEA,OAAOF,IAAA;AACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
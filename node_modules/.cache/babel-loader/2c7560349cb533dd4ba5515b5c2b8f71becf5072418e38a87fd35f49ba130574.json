{"ast":null,"code":"var __typeError = msg => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _package, _module;\nconst TESTNET_CONTRACT_IDS = {\n  packageId: \"0x036fee67274d0d85c3532f58296abe0dee86b93864f1b2b9074be6adb388f138\",\n  bagStoreId: \"0x5c63e71734c82c48a3cb9124c54001d1a09736cfb1668b3b30cd92a96dd4d0ce\",\n  bagStoreTableId: \"0x4e1bc4085d64005e03eb4eab2510d527aeba9548cda431cb8f149ff37451f870\"\n};\nconst MAINNET_CONTRACT_IDS = {\n  packageId: \"0x5bb7d0bb3240011336ca9015f553b2646302a4f05f821160344e9ec5a988f740\",\n  bagStoreId: \"0x65b215a3f2a951c94313a89c43f0adbd2fd9ea78a0badf81e27d1c9868a8b6fe\",\n  bagStoreTableId: \"0x616db54ca564660cd58e36a4548be68b289371ef2611485c62c374a60960084e\"\n};\nfunction getContractIds(network) {\n  if (!network) {\n    return MAINNET_CONTRACT_IDS;\n  }\n  return network === \"mainnet\" ? MAINNET_CONTRACT_IDS : TESTNET_CONTRACT_IDS;\n}\nclass ZkBag {\n  constructor(packageAddress, ids) {\n    __privateAdd(this, _package);\n    __privateAdd(this, _module, \"zk_bag\");\n    __privateSet(this, _package, packageAddress);\n    this.ids = ids;\n  }\n  new({\n    arguments: [store, receiver]\n  }) {\n    return tx => {\n      tx.moveCall({\n        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::new`,\n        arguments: [tx.object(store), typeof receiver === \"string\" ? tx.pure.address(receiver) : receiver]\n      });\n    };\n  }\n  add({\n    arguments: [store, receiver, item],\n    typeArguments\n  }) {\n    return tx => tx.moveCall({\n      target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::add`,\n      arguments: [tx.object(store), typeof receiver === \"string\" ? tx.pure.address(receiver) : receiver, tx.object(item)],\n      typeArguments\n    });\n  }\n  init_claim({\n    arguments: [store]\n  }) {\n    return tx => {\n      const [bag, claimProof] = tx.moveCall({\n        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::init_claim`,\n        arguments: [tx.object(store)]\n      });\n      return [bag, claimProof];\n    };\n  }\n  reclaim({\n    arguments: [store, receiver]\n  }) {\n    return tx => {\n      const [bag, claimProof] = tx.moveCall({\n        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::reclaim`,\n        arguments: [tx.object(store), typeof receiver === \"string\" ? tx.pure.address(receiver) : receiver]\n      });\n      return [bag, claimProof];\n    };\n  }\n  claim({\n    arguments: [bag, claim, id],\n    typeArguments\n  }) {\n    return tx => tx.moveCall({\n      target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::claim`,\n      arguments: [tx.object(bag), tx.object(claim), typeof id === \"string\" ? tx.object(id) : id],\n      typeArguments\n    });\n  }\n  finalize({\n    arguments: [bag, claim]\n  }) {\n    return tx => {\n      tx.moveCall({\n        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::finalize`,\n        arguments: [tx.object(bag), tx.object(claim)]\n      });\n    };\n  }\n  update_receiver({\n    arguments: [bag, from, to]\n  }) {\n    return tx => {\n      tx.moveCall({\n        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::update_receiver`,\n        arguments: [tx.object(bag), typeof from === \"string\" ? tx.pure.address(from) : from, typeof to === \"string\" ? tx.pure.address(to) : to]\n      });\n    };\n  }\n}\n_package = new WeakMap();\n_module = new WeakMap();\nexport { MAINNET_CONTRACT_IDS, TESTNET_CONTRACT_IDS, ZkBag, getContractIds };","map":{"version":3,"names":["_package","_module","TESTNET_CONTRACT_IDS","packageId","bagStoreId","bagStoreTableId","MAINNET_CONTRACT_IDS","getContractIds","network","ZkBag","constructor","packageAddress","ids","__privateAdd","__privateSet","new","arguments","store","receiver","tx","moveCall","target","__privateGet","object","pure","address","add","item","typeArguments","init_claim","bag","claimProof","reclaim","claim","id","finalize","update_receiver","from","to","WeakMap"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\zksend\\src\\links\\zk-bag.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Argument, Transaction, TransactionObjectArgument } from '@mysten/sui/transactions';\n\nexport interface ZkBagContractOptions {\n\tpackageId: string;\n\tbagStoreId: string;\n\tbagStoreTableId: string;\n}\n\nexport const TESTNET_CONTRACT_IDS: ZkBagContractOptions = {\n\tpackageId: '0x036fee67274d0d85c3532f58296abe0dee86b93864f1b2b9074be6adb388f138',\n\tbagStoreId: '0x5c63e71734c82c48a3cb9124c54001d1a09736cfb1668b3b30cd92a96dd4d0ce',\n\tbagStoreTableId: '0x4e1bc4085d64005e03eb4eab2510d527aeba9548cda431cb8f149ff37451f870',\n};\n\nexport const MAINNET_CONTRACT_IDS: ZkBagContractOptions = {\n\tpackageId: '0x5bb7d0bb3240011336ca9015f553b2646302a4f05f821160344e9ec5a988f740',\n\tbagStoreId: '0x65b215a3f2a951c94313a89c43f0adbd2fd9ea78a0badf81e27d1c9868a8b6fe',\n\tbagStoreTableId: '0x616db54ca564660cd58e36a4548be68b289371ef2611485c62c374a60960084e',\n};\n\nexport function getContractIds(network?: 'mainnet' | 'testnet') {\n\tif (!network) {\n\t\treturn MAINNET_CONTRACT_IDS;\n\t}\n\n\treturn network === 'mainnet' ? MAINNET_CONTRACT_IDS : TESTNET_CONTRACT_IDS;\n}\n\nexport class ZkBag<IDs> {\n\t#package: string;\n\t#module = 'zk_bag' as const;\n\tids: IDs;\n\n\tconstructor(packageAddress: string, ids: IDs) {\n\t\tthis.#package = packageAddress;\n\t\tthis.ids = ids;\n\t}\n\n\tnew({\n\t\targuments: [store, receiver],\n\t}: {\n\t\targuments: [store: TransactionObjectArgument | string, receiver: Argument | string];\n\t}) {\n\t\treturn (tx: Transaction) => {\n\t\t\ttx.moveCall({\n\t\t\t\ttarget: `${this.#package}::${this.#module}::new`,\n\t\t\t\targuments: [\n\t\t\t\t\ttx.object(store),\n\t\t\t\t\ttypeof receiver === 'string' ? tx.pure.address(receiver) : receiver,\n\t\t\t\t],\n\t\t\t});\n\t\t};\n\t}\n\n\tadd({\n\t\targuments: [store, receiver, item],\n\t\ttypeArguments,\n\t}: {\n\t\targuments: [\n\t\t\tstore: TransactionObjectArgument | string,\n\t\t\treceiver: Argument | string,\n\t\t\titem: TransactionObjectArgument | string,\n\t\t];\n\t\ttypeArguments: [string];\n\t}): (tx: Transaction) => Extract<Argument, { $kind: 'Result' }> {\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\ttarget: `${this.#package}::${this.#module}::add`,\n\t\t\t\targuments: [\n\t\t\t\t\ttx.object(store),\n\t\t\t\t\ttypeof receiver === 'string' ? tx.pure.address(receiver) : receiver,\n\t\t\t\t\ttx.object(item),\n\t\t\t\t],\n\t\t\t\ttypeArguments: typeArguments,\n\t\t\t});\n\t}\n\n\tinit_claim({ arguments: [store] }: { arguments: [store: TransactionObjectArgument | string] }) {\n\t\treturn (tx: Transaction) => {\n\t\t\tconst [bag, claimProof] = tx.moveCall({\n\t\t\t\ttarget: `${this.#package}::${this.#module}::init_claim`,\n\t\t\t\targuments: [tx.object(store)],\n\t\t\t});\n\n\t\t\treturn [bag, claimProof] as const;\n\t\t};\n\t}\n\n\treclaim({\n\t\targuments: [store, receiver],\n\t}: {\n\t\targuments: [store: TransactionObjectArgument | string, receiver: Argument | string];\n\t}) {\n\t\treturn (tx: Transaction) => {\n\t\t\tconst [bag, claimProof] = tx.moveCall({\n\t\t\t\ttarget: `${this.#package}::${this.#module}::reclaim`,\n\t\t\t\targuments: [\n\t\t\t\t\ttx.object(store),\n\t\t\t\t\ttypeof receiver === 'string' ? tx.pure.address(receiver) : receiver,\n\t\t\t\t],\n\t\t\t});\n\n\t\t\treturn [bag, claimProof] as const;\n\t\t};\n\t}\n\n\tclaim({\n\t\targuments: [bag, claim, id],\n\t\ttypeArguments,\n\t}: {\n\t\targuments: [\n\t\t\tbag: TransactionObjectArgument | string,\n\t\t\tclaim: Extract<Argument, { $kind: 'NestedResult' }>,\n\t\t\tid: TransactionObjectArgument | string,\n\t\t];\n\t\ttypeArguments: [string];\n\t}): (tx: Transaction) => Extract<Argument, { $kind: 'Result' }> {\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\ttarget: `${this.#package}::${this.#module}::claim`,\n\t\t\t\targuments: [tx.object(bag), tx.object(claim), typeof id === 'string' ? tx.object(id) : id],\n\t\t\t\ttypeArguments,\n\t\t\t});\n\t}\n\n\tfinalize({\n\t\targuments: [bag, claim],\n\t}: {\n\t\targuments: [\n\t\t\tbag: TransactionObjectArgument | string,\n\t\t\tclaim: Extract<Argument, { $kind: 'NestedResult' }>,\n\t\t];\n\t}) {\n\t\treturn (tx: Transaction) => {\n\t\t\ttx.moveCall({\n\t\t\t\ttarget: `${this.#package}::${this.#module}::finalize`,\n\t\t\t\targuments: [tx.object(bag), tx.object(claim)],\n\t\t\t});\n\t\t};\n\t}\n\n\tupdate_receiver({\n\t\targuments: [bag, from, to],\n\t}: {\n\t\targuments: [\n\t\t\tbag: TransactionObjectArgument | string,\n\t\t\tfrom: Argument | string,\n\t\t\tto: Argument | string,\n\t\t];\n\t}) {\n\t\treturn (tx: Transaction) => {\n\t\t\ttx.moveCall({\n\t\t\t\ttarget: `${this.#package}::${this.#module}::update_receiver`,\n\t\t\t\targuments: [\n\t\t\t\t\ttx.object(bag),\n\t\t\t\t\ttypeof from === 'string' ? tx.pure.address(from) : from,\n\t\t\t\t\ttypeof to === 'string' ? tx.pure.address(to) : to,\n\t\t\t\t],\n\t\t\t});\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
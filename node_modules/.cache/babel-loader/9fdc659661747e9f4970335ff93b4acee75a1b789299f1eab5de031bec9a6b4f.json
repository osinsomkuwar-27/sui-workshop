{"ast":null,"code":"import { fromBase64, toBase64 } from \"@mysten/bcs\";\nimport { array, bigint, boolean, check, integer, is, lazy, literal, nullable, nullish, number, object, optional, parse, pipe, string, union, unknown } from \"valibot\";\nimport { TypeTagSerializer } from \"../../bcs/index.js\";\nimport { JsonU64, ObjectID, safeEnum, TransactionData } from \"./internal.js\";\nconst ObjectRef = object({\n  digest: string(),\n  objectId: string(),\n  version: union([pipe(number(), integer()), string(), bigint()])\n});\nconst ObjectArg = safeEnum({\n  ImmOrOwned: ObjectRef,\n  Shared: object({\n    objectId: ObjectID,\n    initialSharedVersion: JsonU64,\n    mutable: boolean()\n  }),\n  Receiving: ObjectRef\n});\nconst NormalizedCallArg = safeEnum({\n  Object: ObjectArg,\n  Pure: array(pipe(number(), integer()))\n});\nconst TransactionInput = union([object({\n  kind: literal(\"Input\"),\n  index: pipe(number(), integer()),\n  value: unknown(),\n  type: optional(literal(\"object\"))\n}), object({\n  kind: literal(\"Input\"),\n  index: pipe(number(), integer()),\n  value: unknown(),\n  type: literal(\"pure\")\n})]);\nconst TransactionExpiration = union([object({\n  Epoch: pipe(number(), integer())\n}), object({\n  None: nullable(literal(true))\n})]);\nconst StringEncodedBigint = pipe(union([number(), string(), bigint()]), check(val => {\n  if (![\"string\", \"number\", \"bigint\"].includes(typeof val)) return false;\n  try {\n    BigInt(val);\n    return true;\n  } catch {\n    return false;\n  }\n}));\nconst TypeTag = union([object({\n  bool: nullable(literal(true))\n}), object({\n  u8: nullable(literal(true))\n}), object({\n  u64: nullable(literal(true))\n}), object({\n  u128: nullable(literal(true))\n}), object({\n  address: nullable(literal(true))\n}), object({\n  signer: nullable(literal(true))\n}), object({\n  vector: lazy(() => TypeTag)\n}), object({\n  struct: lazy(() => StructTag)\n}), object({\n  u16: nullable(literal(true))\n}), object({\n  u32: nullable(literal(true))\n}), object({\n  u256: nullable(literal(true))\n})]);\nconst StructTag = object({\n  address: string(),\n  module: string(),\n  name: string(),\n  typeParams: array(TypeTag)\n});\nconst GasConfig = object({\n  budget: optional(StringEncodedBigint),\n  price: optional(StringEncodedBigint),\n  payment: optional(array(ObjectRef)),\n  owner: optional(string())\n});\nconst TransactionArgumentTypes = [TransactionInput, object({\n  kind: literal(\"GasCoin\")\n}), object({\n  kind: literal(\"Result\"),\n  index: pipe(number(), integer())\n}), object({\n  kind: literal(\"NestedResult\"),\n  index: pipe(number(), integer()),\n  resultIndex: pipe(number(), integer())\n})];\nconst TransactionArgument = union([...TransactionArgumentTypes]);\nconst MoveCallTransaction = object({\n  kind: literal(\"MoveCall\"),\n  target: pipe(string(), check(target => target.split(\"::\").length === 3)),\n  typeArguments: array(string()),\n  arguments: array(TransactionArgument)\n});\nconst TransferObjectsTransaction = object({\n  kind: literal(\"TransferObjects\"),\n  objects: array(TransactionArgument),\n  address: TransactionArgument\n});\nconst SplitCoinsTransaction = object({\n  kind: literal(\"SplitCoins\"),\n  coin: TransactionArgument,\n  amounts: array(TransactionArgument)\n});\nconst MergeCoinsTransaction = object({\n  kind: literal(\"MergeCoins\"),\n  destination: TransactionArgument,\n  sources: array(TransactionArgument)\n});\nconst MakeMoveVecTransaction = object({\n  kind: literal(\"MakeMoveVec\"),\n  type: union([object({\n    Some: TypeTag\n  }), object({\n    None: nullable(literal(true))\n  })]),\n  objects: array(TransactionArgument)\n});\nconst PublishTransaction = object({\n  kind: literal(\"Publish\"),\n  modules: array(array(pipe(number(), integer()))),\n  dependencies: array(string())\n});\nconst UpgradeTransaction = object({\n  kind: literal(\"Upgrade\"),\n  modules: array(array(pipe(number(), integer()))),\n  dependencies: array(string()),\n  packageId: string(),\n  ticket: TransactionArgument\n});\nconst TransactionTypes = [MoveCallTransaction, TransferObjectsTransaction, SplitCoinsTransaction, MergeCoinsTransaction, PublishTransaction, UpgradeTransaction, MakeMoveVecTransaction];\nconst TransactionType = union([...TransactionTypes]);\nconst SerializedTransactionDataV1 = object({\n  version: literal(1),\n  sender: optional(string()),\n  expiration: nullish(TransactionExpiration),\n  gasConfig: GasConfig,\n  inputs: array(TransactionInput),\n  transactions: array(TransactionType)\n});\nfunction serializeV1TransactionData(transactionData) {\n  const inputs = transactionData.inputs.map((input, index) => {\n    if (input.Object) {\n      return {\n        kind: \"Input\",\n        index,\n        value: {\n          Object: input.Object.ImmOrOwnedObject ? {\n            ImmOrOwned: input.Object.ImmOrOwnedObject\n          } : input.Object.Receiving ? {\n            Receiving: {\n              digest: input.Object.Receiving.digest,\n              version: input.Object.Receiving.version,\n              objectId: input.Object.Receiving.objectId\n            }\n          } : {\n            Shared: {\n              mutable: input.Object.SharedObject.mutable,\n              initialSharedVersion: input.Object.SharedObject.initialSharedVersion,\n              objectId: input.Object.SharedObject.objectId\n            }\n          }\n        },\n        type: \"object\"\n      };\n    }\n    if (input.Pure) {\n      return {\n        kind: \"Input\",\n        index,\n        value: {\n          Pure: Array.from(fromBase64(input.Pure.bytes))\n        },\n        type: \"pure\"\n      };\n    }\n    if (input.UnresolvedPure) {\n      return {\n        kind: \"Input\",\n        type: \"pure\",\n        index,\n        value: input.UnresolvedPure.value\n      };\n    }\n    if (input.UnresolvedObject) {\n      return {\n        kind: \"Input\",\n        type: \"object\",\n        index,\n        value: input.UnresolvedObject.objectId\n      };\n    }\n    throw new Error(\"Invalid input\");\n  });\n  return {\n    version: 1,\n    sender: transactionData.sender ?? void 0,\n    expiration: transactionData.expiration?.$kind === \"Epoch\" ? {\n      Epoch: Number(transactionData.expiration.Epoch)\n    } : transactionData.expiration ? {\n      None: true\n    } : null,\n    gasConfig: {\n      owner: transactionData.gasData.owner ?? void 0,\n      budget: transactionData.gasData.budget ?? void 0,\n      price: transactionData.gasData.price ?? void 0,\n      payment: transactionData.gasData.payment ?? void 0\n    },\n    inputs,\n    transactions: transactionData.commands.map(command => {\n      if (command.MakeMoveVec) {\n        return {\n          kind: \"MakeMoveVec\",\n          type: command.MakeMoveVec.type === null ? {\n            None: true\n          } : {\n            Some: TypeTagSerializer.parseFromStr(command.MakeMoveVec.type)\n          },\n          objects: command.MakeMoveVec.elements.map(arg => convertTransactionArgument(arg, inputs))\n        };\n      }\n      if (command.MergeCoins) {\n        return {\n          kind: \"MergeCoins\",\n          destination: convertTransactionArgument(command.MergeCoins.destination, inputs),\n          sources: command.MergeCoins.sources.map(arg => convertTransactionArgument(arg, inputs))\n        };\n      }\n      if (command.MoveCall) {\n        return {\n          kind: \"MoveCall\",\n          target: `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`,\n          typeArguments: command.MoveCall.typeArguments,\n          arguments: command.MoveCall.arguments.map(arg => convertTransactionArgument(arg, inputs))\n        };\n      }\n      if (command.Publish) {\n        return {\n          kind: \"Publish\",\n          modules: command.Publish.modules.map(mod => Array.from(fromBase64(mod))),\n          dependencies: command.Publish.dependencies\n        };\n      }\n      if (command.SplitCoins) {\n        return {\n          kind: \"SplitCoins\",\n          coin: convertTransactionArgument(command.SplitCoins.coin, inputs),\n          amounts: command.SplitCoins.amounts.map(arg => convertTransactionArgument(arg, inputs))\n        };\n      }\n      if (command.TransferObjects) {\n        return {\n          kind: \"TransferObjects\",\n          objects: command.TransferObjects.objects.map(arg => convertTransactionArgument(arg, inputs)),\n          address: convertTransactionArgument(command.TransferObjects.address, inputs)\n        };\n      }\n      if (command.Upgrade) {\n        return {\n          kind: \"Upgrade\",\n          modules: command.Upgrade.modules.map(mod => Array.from(fromBase64(mod))),\n          dependencies: command.Upgrade.dependencies,\n          packageId: command.Upgrade.package,\n          ticket: convertTransactionArgument(command.Upgrade.ticket, inputs)\n        };\n      }\n      throw new Error(`Unknown transaction ${Object.keys(command)}`);\n    })\n  };\n}\nfunction convertTransactionArgument(arg, inputs) {\n  if (arg.$kind === \"GasCoin\") {\n    return {\n      kind: \"GasCoin\"\n    };\n  }\n  if (arg.$kind === \"Result\") {\n    return {\n      kind: \"Result\",\n      index: arg.Result\n    };\n  }\n  if (arg.$kind === \"NestedResult\") {\n    return {\n      kind: \"NestedResult\",\n      index: arg.NestedResult[0],\n      resultIndex: arg.NestedResult[1]\n    };\n  }\n  if (arg.$kind === \"Input\") {\n    return inputs[arg.Input];\n  }\n  throw new Error(`Invalid argument ${Object.keys(arg)}`);\n}\nfunction transactionDataFromV1(data) {\n  return parse(TransactionData, {\n    version: 2,\n    sender: data.sender ?? null,\n    expiration: data.expiration ? \"Epoch\" in data.expiration ? {\n      Epoch: data.expiration.Epoch\n    } : {\n      None: true\n    } : null,\n    gasData: {\n      owner: data.gasConfig.owner ?? null,\n      budget: data.gasConfig.budget?.toString() ?? null,\n      price: data.gasConfig.price?.toString() ?? null,\n      payment: data.gasConfig.payment?.map(ref => ({\n        digest: ref.digest,\n        objectId: ref.objectId,\n        version: ref.version.toString()\n      })) ?? null\n    },\n    inputs: data.inputs.map(input => {\n      if (input.kind === \"Input\") {\n        if (is(NormalizedCallArg, input.value)) {\n          const value = parse(NormalizedCallArg, input.value);\n          if (value.Object) {\n            if (value.Object.ImmOrOwned) {\n              return {\n                Object: {\n                  ImmOrOwnedObject: {\n                    objectId: value.Object.ImmOrOwned.objectId,\n                    version: String(value.Object.ImmOrOwned.version),\n                    digest: value.Object.ImmOrOwned.digest\n                  }\n                }\n              };\n            }\n            if (value.Object.Shared) {\n              return {\n                Object: {\n                  SharedObject: {\n                    mutable: value.Object.Shared.mutable ?? null,\n                    initialSharedVersion: value.Object.Shared.initialSharedVersion,\n                    objectId: value.Object.Shared.objectId\n                  }\n                }\n              };\n            }\n            if (value.Object.Receiving) {\n              return {\n                Object: {\n                  Receiving: {\n                    digest: value.Object.Receiving.digest,\n                    version: String(value.Object.Receiving.version),\n                    objectId: value.Object.Receiving.objectId\n                  }\n                }\n              };\n            }\n            throw new Error(\"Invalid object input\");\n          }\n          return {\n            Pure: {\n              bytes: toBase64(new Uint8Array(value.Pure))\n            }\n          };\n        }\n        if (input.type === \"object\") {\n          return {\n            UnresolvedObject: {\n              objectId: input.value\n            }\n          };\n        }\n        return {\n          UnresolvedPure: {\n            value: input.value\n          }\n        };\n      }\n      throw new Error(\"Invalid input\");\n    }),\n    commands: data.transactions.map(transaction => {\n      switch (transaction.kind) {\n        case \"MakeMoveVec\":\n          return {\n            MakeMoveVec: {\n              type: \"Some\" in transaction.type ? TypeTagSerializer.tagToString(transaction.type.Some) : null,\n              elements: transaction.objects.map(arg => parseV1TransactionArgument(arg))\n            }\n          };\n        case \"MergeCoins\":\n          {\n            return {\n              MergeCoins: {\n                destination: parseV1TransactionArgument(transaction.destination),\n                sources: transaction.sources.map(arg => parseV1TransactionArgument(arg))\n              }\n            };\n          }\n        case \"MoveCall\":\n          {\n            const [pkg, mod, fn] = transaction.target.split(\"::\");\n            return {\n              MoveCall: {\n                package: pkg,\n                module: mod,\n                function: fn,\n                typeArguments: transaction.typeArguments,\n                arguments: transaction.arguments.map(arg => parseV1TransactionArgument(arg))\n              }\n            };\n          }\n        case \"Publish\":\n          {\n            return {\n              Publish: {\n                modules: transaction.modules.map(mod => toBase64(Uint8Array.from(mod))),\n                dependencies: transaction.dependencies\n              }\n            };\n          }\n        case \"SplitCoins\":\n          {\n            return {\n              SplitCoins: {\n                coin: parseV1TransactionArgument(transaction.coin),\n                amounts: transaction.amounts.map(arg => parseV1TransactionArgument(arg))\n              }\n            };\n          }\n        case \"TransferObjects\":\n          {\n            return {\n              TransferObjects: {\n                objects: transaction.objects.map(arg => parseV1TransactionArgument(arg)),\n                address: parseV1TransactionArgument(transaction.address)\n              }\n            };\n          }\n        case \"Upgrade\":\n          {\n            return {\n              Upgrade: {\n                modules: transaction.modules.map(mod => toBase64(Uint8Array.from(mod))),\n                dependencies: transaction.dependencies,\n                package: transaction.packageId,\n                ticket: parseV1TransactionArgument(transaction.ticket)\n              }\n            };\n          }\n      }\n      throw new Error(`Unknown transaction ${Object.keys(transaction)}`);\n    })\n  });\n}\nfunction parseV1TransactionArgument(arg) {\n  switch (arg.kind) {\n    case \"GasCoin\":\n      {\n        return {\n          GasCoin: true\n        };\n      }\n    case \"Result\":\n      return {\n        Result: arg.index\n      };\n    case \"NestedResult\":\n      {\n        return {\n          NestedResult: [arg.index, arg.resultIndex]\n        };\n      }\n    case \"Input\":\n      {\n        return {\n          Input: arg.index\n        };\n      }\n  }\n}\nexport { NormalizedCallArg, ObjectRef, SerializedTransactionDataV1, StructTag, TransactionArgument, TypeTag, serializeV1TransactionData, transactionDataFromV1 };","map":{"version":3,"names":["fromBase64","toBase64","array","bigint","boolean","check","integer","is","lazy","literal","nullable","nullish","number","object","optional","parse","pipe","string","union","unknown","TypeTagSerializer","JsonU64","ObjectID","safeEnum","TransactionData","ObjectRef","digest","objectId","version","ObjectArg","ImmOrOwned","Shared","initialSharedVersion","mutable","Receiving","NormalizedCallArg","Object","Pure","TransactionInput","kind","index","value","type","TransactionExpiration","Epoch","None","StringEncodedBigint","val","includes","BigInt","TypeTag","bool","u8","u64","u128","address","signer","vector","struct","StructTag","u16","u32","u256","module","name","typeParams","GasConfig","budget","price","payment","owner","TransactionArgumentTypes","resultIndex","TransactionArgument","MoveCallTransaction","target","split","length","typeArguments","arguments","TransferObjectsTransaction","objects","SplitCoinsTransaction","coin","amounts","MergeCoinsTransaction","destination","sources","MakeMoveVecTransaction","Some","PublishTransaction","modules","dependencies","UpgradeTransaction","packageId","ticket","TransactionTypes","TransactionType","SerializedTransactionDataV1","sender","expiration","gasConfig","inputs","transactions","serializeV1TransactionData","transactionData","map","input","ImmOrOwnedObject","SharedObject","Array","from","bytes","UnresolvedPure","UnresolvedObject","Error","$kind","Number","gasData","commands","command","MakeMoveVec","parseFromStr","elements","arg","convertTransactionArgument","MergeCoins","MoveCall","package","function","Publish","mod","SplitCoins","TransferObjects","Upgrade","keys","Result","NestedResult","Input","transactionDataFromV1","data","toString","ref","String","Uint8Array","transaction","tagToString","parseV1TransactionArgument","pkg","fn","GasCoin"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\transactions\\data\\v1.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64 } from '@mysten/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n\tarray,\n\tbigint,\n\tboolean,\n\tcheck,\n\tinteger,\n\tis,\n\tlazy,\n\tliteral,\n\tnullable,\n\tnullish,\n\tnumber,\n\tobject,\n\toptional,\n\tparse,\n\tpipe,\n\tstring,\n\tunion,\n\tunknown,\n} from 'valibot';\n\nimport { TypeTagSerializer } from '../../bcs/index.js';\nimport type { StructTag as StructTagType, TypeTag as TypeTagType } from '../../bcs/types.js';\nimport { JsonU64, ObjectID, safeEnum, TransactionData } from './internal.js';\nimport type { Argument } from './internal.js';\n\nexport const ObjectRef = object({\n\tdigest: string(),\n\tobjectId: string(),\n\tversion: union([pipe(number(), integer()), string(), bigint()]),\n});\n\nconst ObjectArg = safeEnum({\n\tImmOrOwned: ObjectRef,\n\tShared: object({\n\t\tobjectId: ObjectID,\n\t\tinitialSharedVersion: JsonU64,\n\t\tmutable: boolean(),\n\t}),\n\tReceiving: ObjectRef,\n});\n\nexport const NormalizedCallArg = safeEnum({\n\tObject: ObjectArg,\n\tPure: array(pipe(number(), integer())),\n});\n\nconst TransactionInput = union([\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: pipe(number(), integer()),\n\t\tvalue: unknown(),\n\t\ttype: optional(literal('object')),\n\t}),\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: pipe(number(), integer()),\n\t\tvalue: unknown(),\n\t\ttype: literal('pure'),\n\t}),\n]);\n\nconst TransactionExpiration = union([\n\tobject({ Epoch: pipe(number(), integer()) }),\n\tobject({ None: nullable(literal(true)) }),\n]);\n\nconst StringEncodedBigint = pipe(\n\tunion([number(), string(), bigint()]),\n\tcheck((val) => {\n\t\tif (!['string', 'number', 'bigint'].includes(typeof val)) return false;\n\n\t\ttry {\n\t\t\tBigInt(val as string);\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}),\n);\n\nexport const TypeTag: GenericSchema<TypeTagType> = union([\n\tobject({ bool: nullable(literal(true)) }),\n\tobject({ u8: nullable(literal(true)) }),\n\tobject({ u64: nullable(literal(true)) }),\n\tobject({ u128: nullable(literal(true)) }),\n\tobject({ address: nullable(literal(true)) }),\n\tobject({ signer: nullable(literal(true)) }),\n\tobject({ vector: lazy(() => TypeTag) }),\n\tobject({ struct: lazy(() => StructTag) }),\n\tobject({ u16: nullable(literal(true)) }),\n\tobject({ u32: nullable(literal(true)) }),\n\tobject({ u256: nullable(literal(true)) }),\n]);\n\n// https://github.com/MystenLabs/sui/blob/cea8742e810142a8145fd83c4c142d61e561004a/external-crates/move/crates/move-core-types/src/language_storage.rs#L140-L147\nexport const StructTag: GenericSchema<StructTagType> = object({\n\taddress: string(),\n\tmodule: string(),\n\tname: string(),\n\ttypeParams: array(TypeTag),\n});\n\nconst GasConfig = object({\n\tbudget: optional(StringEncodedBigint),\n\tprice: optional(StringEncodedBigint),\n\tpayment: optional(array(ObjectRef)),\n\towner: optional(string()),\n});\n\nconst TransactionArgumentTypes = [\n\tTransactionInput,\n\tobject({ kind: literal('GasCoin') }),\n\tobject({ kind: literal('Result'), index: pipe(number(), integer()) }),\n\tobject({\n\t\tkind: literal('NestedResult'),\n\t\tindex: pipe(number(), integer()),\n\t\tresultIndex: pipe(number(), integer()),\n\t}),\n] as const;\n\n// Generic transaction argument\nexport const TransactionArgument = union([...TransactionArgumentTypes]);\n\nconst MoveCallTransaction = object({\n\tkind: literal('MoveCall'),\n\ttarget: pipe(\n\t\tstring(),\n\t\tcheck((target) => target.split('::').length === 3),\n\t) as GenericSchema<`${string}::${string}::${string}`>,\n\ttypeArguments: array(string()),\n\targuments: array(TransactionArgument),\n});\n\nconst TransferObjectsTransaction = object({\n\tkind: literal('TransferObjects'),\n\tobjects: array(TransactionArgument),\n\taddress: TransactionArgument,\n});\n\nconst SplitCoinsTransaction = object({\n\tkind: literal('SplitCoins'),\n\tcoin: TransactionArgument,\n\tamounts: array(TransactionArgument),\n});\n\nconst MergeCoinsTransaction = object({\n\tkind: literal('MergeCoins'),\n\tdestination: TransactionArgument,\n\tsources: array(TransactionArgument),\n});\n\nconst MakeMoveVecTransaction = object({\n\tkind: literal('MakeMoveVec'),\n\ttype: union([object({ Some: TypeTag }), object({ None: nullable(literal(true)) })]),\n\tobjects: array(TransactionArgument),\n});\n\nconst PublishTransaction = object({\n\tkind: literal('Publish'),\n\tmodules: array(array(pipe(number(), integer()))),\n\tdependencies: array(string()),\n});\n\nconst UpgradeTransaction = object({\n\tkind: literal('Upgrade'),\n\tmodules: array(array(pipe(number(), integer()))),\n\tdependencies: array(string()),\n\tpackageId: string(),\n\tticket: TransactionArgument,\n});\n\nconst TransactionTypes = [\n\tMoveCallTransaction,\n\tTransferObjectsTransaction,\n\tSplitCoinsTransaction,\n\tMergeCoinsTransaction,\n\tPublishTransaction,\n\tUpgradeTransaction,\n\tMakeMoveVecTransaction,\n] as const;\n\nconst TransactionType = union([...TransactionTypes]);\n\nexport const SerializedTransactionDataV1 = object({\n\tversion: literal(1),\n\tsender: optional(string()),\n\texpiration: nullish(TransactionExpiration),\n\tgasConfig: GasConfig,\n\tinputs: array(TransactionInput),\n\ttransactions: array(TransactionType),\n});\n\nexport type SerializedTransactionDataV1 = InferOutput<typeof SerializedTransactionDataV1>;\n\nexport function serializeV1TransactionData(\n\ttransactionData: TransactionData,\n): SerializedTransactionDataV1 {\n\tconst inputs: InferOutput<typeof TransactionInput>[] = transactionData.inputs.map(\n\t\t(input, index) => {\n\t\t\tif (input.Object) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tObject: input.Object.ImmOrOwnedObject\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tImmOrOwned: input.Object.ImmOrOwnedObject,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: input.Object.Receiving\n\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\tReceiving: {\n\t\t\t\t\t\t\t\t\t\t\tdigest: input.Object.Receiving.digest,\n\t\t\t\t\t\t\t\t\t\t\tversion: input.Object.Receiving.version,\n\t\t\t\t\t\t\t\t\t\t\tobjectId: input.Object.Receiving.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\tShared: {\n\t\t\t\t\t\t\t\t\t\t\tmutable: input.Object.SharedObject.mutable,\n\t\t\t\t\t\t\t\t\t\t\tinitialSharedVersion: input.Object.SharedObject.initialSharedVersion,\n\t\t\t\t\t\t\t\t\t\t\tobjectId: input.Object.SharedObject.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'object',\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (input.Pure) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tPure: Array.from(fromBase64(input.Pure.bytes)),\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'pure',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (input.UnresolvedPure) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\ttype: 'pure',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: input.UnresolvedPure.value,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (input.UnresolvedObject) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: input.UnresolvedObject.objectId,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new Error('Invalid input');\n\t\t},\n\t);\n\n\treturn {\n\t\tversion: 1,\n\t\tsender: transactionData.sender ?? undefined,\n\t\texpiration:\n\t\t\ttransactionData.expiration?.$kind === 'Epoch'\n\t\t\t\t? { Epoch: Number(transactionData.expiration.Epoch) }\n\t\t\t\t: transactionData.expiration\n\t\t\t\t\t? { None: true }\n\t\t\t\t\t: null,\n\t\tgasConfig: {\n\t\t\towner: transactionData.gasData.owner ?? undefined,\n\t\t\tbudget: transactionData.gasData.budget ?? undefined,\n\t\t\tprice: transactionData.gasData.price ?? undefined,\n\t\t\tpayment: transactionData.gasData.payment ?? undefined,\n\t\t},\n\t\tinputs,\n\t\ttransactions: transactionData.commands.map((command): InferOutput<typeof TransactionType> => {\n\t\t\tif (command.MakeMoveVec) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'MakeMoveVec',\n\t\t\t\t\ttype:\n\t\t\t\t\t\tcommand.MakeMoveVec.type === null\n\t\t\t\t\t\t\t? { None: true }\n\t\t\t\t\t\t\t: { Some: TypeTagSerializer.parseFromStr(command.MakeMoveVec.type) },\n\t\t\t\t\tobjects: command.MakeMoveVec.elements.map((arg) =>\n\t\t\t\t\t\tconvertTransactionArgument(arg, inputs),\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.MergeCoins) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'MergeCoins',\n\t\t\t\t\tdestination: convertTransactionArgument(command.MergeCoins.destination, inputs),\n\t\t\t\t\tsources: command.MergeCoins.sources.map((arg) => convertTransactionArgument(arg, inputs)),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.MoveCall) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'MoveCall',\n\t\t\t\t\ttarget: `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`,\n\t\t\t\t\ttypeArguments: command.MoveCall.typeArguments,\n\t\t\t\t\targuments: command.MoveCall.arguments.map((arg) =>\n\t\t\t\t\t\tconvertTransactionArgument(arg, inputs),\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.Publish) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Publish',\n\t\t\t\t\tmodules: command.Publish.modules.map((mod) => Array.from(fromBase64(mod))),\n\t\t\t\t\tdependencies: command.Publish.dependencies,\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.SplitCoins) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'SplitCoins',\n\t\t\t\t\tcoin: convertTransactionArgument(command.SplitCoins.coin, inputs),\n\t\t\t\t\tamounts: command.SplitCoins.amounts.map((arg) => convertTransactionArgument(arg, inputs)),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.TransferObjects) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'TransferObjects',\n\t\t\t\t\tobjects: command.TransferObjects.objects.map((arg) =>\n\t\t\t\t\t\tconvertTransactionArgument(arg, inputs),\n\t\t\t\t\t),\n\t\t\t\t\taddress: convertTransactionArgument(command.TransferObjects.address, inputs),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (command.Upgrade) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Upgrade',\n\t\t\t\t\tmodules: command.Upgrade.modules.map((mod) => Array.from(fromBase64(mod))),\n\t\t\t\t\tdependencies: command.Upgrade.dependencies,\n\t\t\t\t\tpackageId: command.Upgrade.package,\n\t\t\t\t\tticket: convertTransactionArgument(command.Upgrade.ticket, inputs),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new Error(`Unknown transaction ${Object.keys(command)}`);\n\t\t}),\n\t};\n}\n\nfunction convertTransactionArgument(\n\targ: Argument,\n\tinputs: InferOutput<typeof TransactionInput>[],\n): InferOutput<typeof TransactionArgument> {\n\tif (arg.$kind === 'GasCoin') {\n\t\treturn { kind: 'GasCoin' };\n\t}\n\tif (arg.$kind === 'Result') {\n\t\treturn { kind: 'Result', index: arg.Result };\n\t}\n\tif (arg.$kind === 'NestedResult') {\n\t\treturn { kind: 'NestedResult', index: arg.NestedResult[0], resultIndex: arg.NestedResult[1] };\n\t}\n\tif (arg.$kind === 'Input') {\n\t\treturn inputs[arg.Input];\n\t}\n\n\tthrow new Error(`Invalid argument ${Object.keys(arg)}`);\n}\n\nexport function transactionDataFromV1(data: SerializedTransactionDataV1): TransactionData {\n\treturn parse(TransactionData, {\n\t\tversion: 2,\n\t\tsender: data.sender ?? null,\n\t\texpiration: data.expiration\n\t\t\t? 'Epoch' in data.expiration\n\t\t\t\t? { Epoch: data.expiration.Epoch }\n\t\t\t\t: { None: true }\n\t\t\t: null,\n\t\tgasData: {\n\t\t\towner: data.gasConfig.owner ?? null,\n\t\t\tbudget: data.gasConfig.budget?.toString() ?? null,\n\t\t\tprice: data.gasConfig.price?.toString() ?? null,\n\t\t\tpayment:\n\t\t\t\tdata.gasConfig.payment?.map((ref) => ({\n\t\t\t\t\tdigest: ref.digest,\n\t\t\t\t\tobjectId: ref.objectId,\n\t\t\t\t\tversion: ref.version.toString(),\n\t\t\t\t})) ?? null,\n\t\t},\n\t\tinputs: data.inputs.map((input) => {\n\t\t\tif (input.kind === 'Input') {\n\t\t\t\tif (is(NormalizedCallArg, input.value)) {\n\t\t\t\t\tconst value = parse(NormalizedCallArg, input.value);\n\n\t\t\t\t\tif (value.Object) {\n\t\t\t\t\t\tif (value.Object.ImmOrOwned) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tObject: {\n\t\t\t\t\t\t\t\t\tImmOrOwnedObject: {\n\t\t\t\t\t\t\t\t\t\tobjectId: value.Object.ImmOrOwned.objectId,\n\t\t\t\t\t\t\t\t\t\tversion: String(value.Object.ImmOrOwned.version),\n\t\t\t\t\t\t\t\t\t\tdigest: value.Object.ImmOrOwned.digest,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value.Object.Shared) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tObject: {\n\t\t\t\t\t\t\t\t\tSharedObject: {\n\t\t\t\t\t\t\t\t\t\tmutable: value.Object.Shared.mutable ?? null,\n\t\t\t\t\t\t\t\t\t\tinitialSharedVersion: value.Object.Shared.initialSharedVersion,\n\t\t\t\t\t\t\t\t\t\tobjectId: value.Object.Shared.objectId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value.Object.Receiving) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tObject: {\n\t\t\t\t\t\t\t\t\tReceiving: {\n\t\t\t\t\t\t\t\t\t\tdigest: value.Object.Receiving.digest,\n\t\t\t\t\t\t\t\t\t\tversion: String(value.Object.Receiving.version),\n\t\t\t\t\t\t\t\t\t\tobjectId: value.Object.Receiving.objectId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow new Error('Invalid object input');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tPure: {\n\t\t\t\t\t\t\tbytes: toBase64(new Uint8Array(value.Pure)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (input.type === 'object') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tUnresolvedObject: {\n\t\t\t\t\t\t\tobjectId: input.value as string,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tUnresolvedPure: {\n\t\t\t\t\t\tvalue: input.value,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new Error('Invalid input');\n\t\t}),\n\t\tcommands: data.transactions.map((transaction) => {\n\t\t\tswitch (transaction.kind) {\n\t\t\t\tcase 'MakeMoveVec':\n\t\t\t\t\treturn {\n\t\t\t\t\t\tMakeMoveVec: {\n\t\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\t\t'Some' in transaction.type\n\t\t\t\t\t\t\t\t\t? TypeTagSerializer.tagToString(transaction.type.Some)\n\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\telements: transaction.objects.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase 'MergeCoins': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tMergeCoins: {\n\t\t\t\t\t\t\tdestination: parseV1TransactionArgument(transaction.destination),\n\t\t\t\t\t\t\tsources: transaction.sources.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'MoveCall': {\n\t\t\t\t\tconst [pkg, mod, fn] = transaction.target.split('::');\n\t\t\t\t\treturn {\n\t\t\t\t\t\tMoveCall: {\n\t\t\t\t\t\t\tpackage: pkg,\n\t\t\t\t\t\t\tmodule: mod,\n\t\t\t\t\t\t\tfunction: fn,\n\t\t\t\t\t\t\ttypeArguments: transaction.typeArguments,\n\t\t\t\t\t\t\targuments: transaction.arguments.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'Publish': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tPublish: {\n\t\t\t\t\t\t\tmodules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),\n\t\t\t\t\t\t\tdependencies: transaction.dependencies,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'SplitCoins': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tSplitCoins: {\n\t\t\t\t\t\t\tcoin: parseV1TransactionArgument(transaction.coin),\n\t\t\t\t\t\t\tamounts: transaction.amounts.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'TransferObjects': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tTransferObjects: {\n\t\t\t\t\t\t\tobjects: transaction.objects.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t\taddress: parseV1TransactionArgument(transaction.address),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'Upgrade': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tUpgrade: {\n\t\t\t\t\t\t\tmodules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),\n\t\t\t\t\t\t\tdependencies: transaction.dependencies,\n\t\t\t\t\t\t\tpackage: transaction.packageId,\n\t\t\t\t\t\t\tticket: parseV1TransactionArgument(transaction.ticket),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(`Unknown transaction ${Object.keys(transaction)}`);\n\t\t}),\n\t} satisfies InferInput<typeof TransactionData>);\n}\n\nfunction parseV1TransactionArgument(\n\targ: InferOutput<typeof TransactionArgument>,\n): InferInput<typeof Argument> {\n\tswitch (arg.kind) {\n\t\tcase 'GasCoin': {\n\t\t\treturn { GasCoin: true };\n\t\t}\n\t\tcase 'Result':\n\t\t\treturn { Result: arg.index };\n\t\tcase 'NestedResult': {\n\t\t\treturn { NestedResult: [arg.index, arg.resultIndex] };\n\t\t}\n\t\tcase 'Input': {\n\t\t\treturn { Input: arg.index };\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
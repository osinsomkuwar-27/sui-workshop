{"ast":null,"code":"import { fromBase58, toBase64, toHex } from \"@mysten/bcs\";\nimport { isTransaction } from \"../transactions/index.js\";\nimport { isValidSuiAddress, isValidSuiObjectId, isValidTransactionDigest, normalizeSuiAddress, normalizeSuiObjectId } from \"../utils/sui-types.js\";\nimport { normalizeSuiNSName } from \"../utils/suins.js\";\nimport { SuiHTTPTransport } from \"./http-transport.js\";\nconst SUI_CLIENT_BRAND = Symbol.for(\"@mysten/SuiClient\");\nfunction isSuiClient(client) {\n  return typeof client === \"object\" && client !== null && client[SUI_CLIENT_BRAND] === true;\n}\nclass SuiClient {\n  get [SUI_CLIENT_BRAND]() {\n    return true;\n  }\n  /**\n   * Establish a connection to a Sui RPC endpoint\n   *\n   * @param options configuration options for the API Client\n   */\n  constructor(options) {\n    this.transport = options.transport ?? new SuiHTTPTransport({\n      url: options.url\n    });\n  }\n  async getRpcApiVersion() {\n    const resp = await this.transport.request({\n      method: \"rpc.discover\",\n      params: []\n    });\n    return resp.info.version;\n  }\n  /**\n   * Get all Coin<`coin_type`> objects owned by an address.\n   */\n  async getCoins(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getCoins\",\n      params: [input.owner, input.coinType, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get all Coin objects owned by an address.\n   */\n  async getAllCoins(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getAllCoins\",\n      params: [input.owner, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get the total coin balance for one coin type, owned by the address owner.\n   */\n  async getBalance(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getBalance\",\n      params: [input.owner, input.coinType]\n    });\n  }\n  /**\n   * Get the total coin balance for all coin types, owned by the address owner.\n   */\n  async getAllBalances(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getAllBalances\",\n      params: [input.owner]\n    });\n  }\n  /**\n   * Fetch CoinMetadata for a given coin type\n   */\n  async getCoinMetadata(input) {\n    return await this.transport.request({\n      method: \"suix_getCoinMetadata\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   *  Fetch total supply for a coin\n   */\n  async getTotalSupply(input) {\n    return await this.transport.request({\n      method: \"suix_getTotalSupply\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   * Invoke any RPC method\n   * @param method the method to be invoked\n   * @param args the arguments to be passed to the RPC request\n   */\n  async call(method, params) {\n    return await this.transport.request({\n      method,\n      params\n    });\n  }\n  /**\n   * Get Move function argument types like read, write and full access\n   */\n  async getMoveFunctionArgTypes(input) {\n    return await this.transport.request({\n      method: \"sui_getMoveFunctionArgTypes\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a map from module name to\n   * structured representations of Move modules\n   */\n  async getNormalizedMoveModulesByPackage(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModulesByPackage\",\n      params: [input.package]\n    });\n  }\n  /**\n   * Get a structured representation of Move module\n   */\n  async getNormalizedMoveModule(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModule\",\n      params: [input.package, input.module]\n    });\n  }\n  /**\n   * Get a structured representation of Move function\n   */\n  async getNormalizedMoveFunction(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveFunction\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a structured representation of Move struct\n   */\n  async getNormalizedMoveStruct(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveStruct\",\n      params: [input.package, input.module, input.struct]\n    });\n  }\n  /**\n   * Get all objects owned by an address\n   */\n  async getOwnedObjects(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getOwnedObjects\",\n      params: [input.owner, {\n        filter: input.filter,\n        options: input.options\n      }, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get details about an object\n   */\n  async getObject(input) {\n    if (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"sui_getObject\",\n      params: [input.id, input.options]\n    });\n  }\n  async tryGetPastObject(input) {\n    return await this.transport.request({\n      method: \"sui_tryGetPastObject\",\n      params: [input.id, input.version, input.options]\n    });\n  }\n  /**\n   * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n   */\n  async multiGetObjects(input) {\n    input.ids.forEach(id => {\n      if (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n        throw new Error(`Invalid Sui Object id ${id}`);\n      }\n    });\n    const hasDuplicates = input.ids.length !== new Set(input.ids).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate object ids in batch call ${input.ids}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetObjects\",\n      params: [input.ids, input.options]\n    });\n  }\n  /**\n   * Get transaction blocks for a given query criteria\n   */\n  async queryTransactionBlocks(input) {\n    return await this.transport.request({\n      method: \"suix_queryTransactionBlocks\",\n      params: [{\n        filter: input.filter,\n        options: input.options\n      }, input.cursor, input.limit, (input.order || \"descending\") === \"descending\"]\n    });\n  }\n  async getTransactionBlock(input) {\n    if (!isValidTransactionDigest(input.digest)) {\n      throw new Error(\"Invalid Transaction digest\");\n    }\n    return await this.transport.request({\n      method: \"sui_getTransactionBlock\",\n      params: [input.digest, input.options]\n    });\n  }\n  async multiGetTransactionBlocks(input) {\n    input.digests.forEach(d => {\n      if (!isValidTransactionDigest(d)) {\n        throw new Error(`Invalid Transaction digest ${d}`);\n      }\n    });\n    const hasDuplicates = input.digests.length !== new Set(input.digests).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate digests in batch call ${input.digests}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetTransactionBlocks\",\n      params: [input.digests, input.options]\n    });\n  }\n  async executeTransactionBlock({\n    transactionBlock,\n    signature,\n    options,\n    requestType\n  }) {\n    const result = await this.transport.request({\n      method: \"sui_executeTransactionBlock\",\n      params: [typeof transactionBlock === \"string\" ? transactionBlock : toBase64(transactionBlock), Array.isArray(signature) ? signature : [signature], options]\n    });\n    if (requestType === \"WaitForLocalExecution\") {\n      try {\n        await this.waitForTransaction({\n          digest: result.digest\n        });\n      } catch (_) {}\n    }\n    return result;\n  }\n  async signAndExecuteTransaction({\n    transaction,\n    signer,\n    ...input\n  }) {\n    let transactionBytes;\n    if (transaction instanceof Uint8Array) {\n      transactionBytes = transaction;\n    } else {\n      transaction.setSenderIfNotSet(signer.toSuiAddress());\n      transactionBytes = await transaction.build({\n        client: this\n      });\n    }\n    const {\n      signature,\n      bytes\n    } = await signer.signTransaction(transactionBytes);\n    return this.executeTransactionBlock({\n      transactionBlock: bytes,\n      signature,\n      ...input\n    });\n  }\n  /**\n   * Get total number of transactions\n   */\n  async getTotalTransactionBlocks() {\n    const resp = await this.transport.request({\n      method: \"sui_getTotalTransactionBlocks\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Getting the reference gas price for the network\n   */\n  async getReferenceGasPrice() {\n    const resp = await this.transport.request({\n      method: \"suix_getReferenceGasPrice\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Return the delegated stakes for an address\n   */\n  async getStakes(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getStakes\",\n      params: [input.owner]\n    });\n  }\n  /**\n   * Return the delegated stakes queried by id.\n   */\n  async getStakesByIds(input) {\n    input.stakedSuiIds.forEach(id => {\n      if (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n        throw new Error(`Invalid Sui Stake id ${id}`);\n      }\n    });\n    return await this.transport.request({\n      method: \"suix_getStakesByIds\",\n      params: [input.stakedSuiIds]\n    });\n  }\n  /**\n   * Return the latest system state content.\n   */\n  async getLatestSuiSystemState() {\n    return await this.transport.request({\n      method: \"suix_getLatestSuiSystemState\",\n      params: []\n    });\n  }\n  /**\n   * Get events for a given query criteria\n   */\n  async queryEvents(input) {\n    return await this.transport.request({\n      method: \"suix_queryEvents\",\n      params: [input.query, input.cursor, input.limit, (input.order || \"descending\") === \"descending\"]\n    });\n  }\n  /**\n   * Subscribe to get notifications whenever an event matching the filter occurs\n   *\n   * @deprecated\n   */\n  async subscribeEvent(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeEvent\",\n      unsubscribe: \"suix_unsubscribeEvent\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  /**\n   * @deprecated\n   */\n  async subscribeTransaction(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeTransaction\",\n      unsubscribe: \"suix_unsubscribeTransaction\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  /**\n   * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n   * transaction (or Move call) with any arguments. Detailed results are\n   * provided, including both the transaction effects and any return values.\n   */\n  async devInspectTransactionBlock(input) {\n    let devInspectTxBytes;\n    if (isTransaction(input.transactionBlock)) {\n      input.transactionBlock.setSenderIfNotSet(input.sender);\n      devInspectTxBytes = toBase64(await input.transactionBlock.build({\n        client: this,\n        onlyTransactionKind: true\n      }));\n    } else if (typeof input.transactionBlock === \"string\") {\n      devInspectTxBytes = input.transactionBlock;\n    } else if (input.transactionBlock instanceof Uint8Array) {\n      devInspectTxBytes = toBase64(input.transactionBlock);\n    } else {\n      throw new Error(\"Unknown transaction block format.\");\n    }\n    return await this.transport.request({\n      method: \"sui_devInspectTransactionBlock\",\n      params: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch]\n    });\n  }\n  /**\n   * Dry run a transaction block and return the result.\n   */\n  async dryRunTransactionBlock(input) {\n    return await this.transport.request({\n      method: \"sui_dryRunTransactionBlock\",\n      params: [typeof input.transactionBlock === \"string\" ? input.transactionBlock : toBase64(input.transactionBlock)]\n    });\n  }\n  /**\n   * Return the list of dynamic field objects owned by an object\n   */\n  async getDynamicFields(input) {\n    if (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"suix_getDynamicFields\",\n      params: [input.parentId, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Return the dynamic field object information for a specified object\n   */\n  async getDynamicFieldObject(input) {\n    return await this.transport.request({\n      method: \"suix_getDynamicFieldObject\",\n      params: [input.parentId, input.name]\n    });\n  }\n  /**\n   * Get the sequence number of the latest checkpoint that has been executed\n   */\n  async getLatestCheckpointSequenceNumber() {\n    const resp = await this.transport.request({\n      method: \"sui_getLatestCheckpointSequenceNumber\",\n      params: []\n    });\n    return String(resp);\n  }\n  /**\n   * Returns information about a given checkpoint\n   */\n  async getCheckpoint(input) {\n    return await this.transport.request({\n      method: \"sui_getCheckpoint\",\n      params: [input.id]\n    });\n  }\n  /**\n   * Returns historical checkpoints paginated\n   */\n  async getCheckpoints(input) {\n    return await this.transport.request({\n      method: \"sui_getCheckpoints\",\n      params: [input.cursor, input?.limit, input.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCommitteeInfo(input) {\n    return await this.transport.request({\n      method: \"suix_getCommitteeInfo\",\n      params: [input?.epoch]\n    });\n  }\n  async getNetworkMetrics() {\n    return await this.transport.request({\n      method: \"suix_getNetworkMetrics\",\n      params: []\n    });\n  }\n  async getAddressMetrics() {\n    return await this.transport.request({\n      method: \"suix_getLatestAddressMetrics\",\n      params: []\n    });\n  }\n  async getEpochMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochMetrics\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  async getAllEpochAddressMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getAllEpochAddressMetrics\",\n      params: [input?.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getEpochs(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochs\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  /**\n   * Returns list of top move calls by usage\n   */\n  async getMoveCallMetrics() {\n    return await this.transport.request({\n      method: \"suix_getMoveCallMetrics\",\n      params: []\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCurrentEpoch() {\n    return await this.transport.request({\n      method: \"suix_getCurrentEpoch\",\n      params: []\n    });\n  }\n  /**\n   * Return the Validators APYs\n   */\n  async getValidatorsApy() {\n    return await this.transport.request({\n      method: \"suix_getValidatorsApy\",\n      params: []\n    });\n  }\n  // TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n  async getChainIdentifier() {\n    const checkpoint = await this.getCheckpoint({\n      id: \"0\"\n    });\n    const bytes = fromBase58(checkpoint.digest);\n    return toHex(bytes.slice(0, 4));\n  }\n  async resolveNameServiceAddress(input) {\n    return await this.transport.request({\n      method: \"suix_resolveNameServiceAddress\",\n      params: [input.name]\n    });\n  }\n  async resolveNameServiceNames({\n    format = \"dot\",\n    ...input\n  }) {\n    const {\n      nextCursor,\n      hasNextPage,\n      data\n    } = await this.transport.request({\n      method: \"suix_resolveNameServiceNames\",\n      params: [input.address, input.cursor, input.limit]\n    });\n    return {\n      hasNextPage,\n      nextCursor,\n      data: data.map(name => normalizeSuiNSName(name, format))\n    };\n  }\n  async getProtocolConfig(input) {\n    return await this.transport.request({\n      method: \"sui_getProtocolConfig\",\n      params: [input?.version]\n    });\n  }\n  /**\n   * Wait for a transaction block result to be available over the API.\n   * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n   * be available via the API.\n   * This currently polls the `getTransactionBlock` API to check for the transaction.\n   */\n  async waitForTransaction({\n    signal,\n    timeout = 60 * 1e3,\n    pollInterval = 2 * 1e3,\n    ...input\n  }) {\n    const timeoutSignal = AbortSignal.timeout(timeout);\n    const timeoutPromise = new Promise((_, reject) => {\n      timeoutSignal.addEventListener(\"abort\", () => reject(timeoutSignal.reason));\n    });\n    timeoutPromise.catch(() => {});\n    while (!timeoutSignal.aborted) {\n      signal?.throwIfAborted();\n      try {\n        return await this.getTransactionBlock(input);\n      } catch (e) {\n        await Promise.race([new Promise(resolve => setTimeout(resolve, pollInterval)), timeoutPromise]);\n      }\n    }\n    timeoutSignal.throwIfAborted();\n    throw new Error(\"Unexpected error while waiting for transaction block.\");\n  }\n}\nexport { SuiClient, isSuiClient };","map":{"version":3,"names":["fromBase58","toBase64","toHex","isTransaction","isValidSuiAddress","isValidSuiObjectId","isValidTransactionDigest","normalizeSuiAddress","normalizeSuiObjectId","normalizeSuiNSName","SuiHTTPTransport","SUI_CLIENT_BRAND","Symbol","for","isSuiClient","client","SuiClient","constructor","options","transport","url","getRpcApiVersion","resp","request","method","params","info","version","getCoins","input","owner","Error","coinType","cursor","limit","getAllCoins","getBalance","getAllBalances","getCoinMetadata","getTotalSupply","call","getMoveFunctionArgTypes","package","module","function","getNormalizedMoveModulesByPackage","getNormalizedMoveModule","getNormalizedMoveFunction","getNormalizedMoveStruct","struct","getOwnedObjects","filter","getObject","id","tryGetPastObject","multiGetObjects","ids","forEach","hasDuplicates","length","Set","size","queryTransactionBlocks","order","getTransactionBlock","digest","multiGetTransactionBlocks","digests","d","executeTransactionBlock","transactionBlock","signature","requestType","result","Array","isArray","waitForTransaction","_","signAndExecuteTransaction","transaction","signer","transactionBytes","Uint8Array","setSenderIfNotSet","toSuiAddress","build","bytes","signTransaction","getTotalTransactionBlocks","BigInt","getReferenceGasPrice","getStakes","getStakesByIds","stakedSuiIds","getLatestSuiSystemState","queryEvents","query","subscribeEvent","subscribe","unsubscribe","onMessage","subscribeTransaction","devInspectTransactionBlock","devInspectTxBytes","sender","onlyTransactionKind","gasPrice","toString","epoch","dryRunTransactionBlock","getDynamicFields","parentId","getDynamicFieldObject","name","getLatestCheckpointSequenceNumber","String","getCheckpoint","getCheckpoints","descendingOrder","getCommitteeInfo","getNetworkMetrics","getAddressMetrics","getEpochMetrics","getAllEpochAddressMetrics","getEpochs","getMoveCallMetrics","getCurrentEpoch","getValidatorsApy","getChainIdentifier","checkpoint","slice","resolveNameServiceAddress","resolveNameServiceNames","format","nextCursor","hasNextPage","data","address","map","getProtocolConfig","signal","timeout","pollInterval","timeoutSignal","AbortSignal","timeoutPromise","Promise","reject","addEventListener","reason","catch","aborted","throwIfAborted","e","race","resolve","setTimeout"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\client\\client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { fromBase58, toBase64, toHex } from '@mysten/bcs';\n\nimport type { Signer } from '../cryptography/index.js';\nimport type { Transaction } from '../transactions/index.js';\nimport { isTransaction } from '../transactions/index.js';\nimport {\n\tisValidSuiAddress,\n\tisValidSuiObjectId,\n\tisValidTransactionDigest,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n} from '../utils/sui-types.js';\nimport { normalizeSuiNSName } from '../utils/suins.js';\nimport { SuiHTTPTransport } from './http-transport.js';\nimport type { SuiTransport } from './http-transport.js';\nimport type {\n\tAddressMetrics,\n\tAllEpochsAddressMetrics,\n\tCheckpoint,\n\tCheckpointPage,\n\tCoinBalance,\n\tCoinMetadata,\n\tCoinSupply,\n\tCommitteeInfo,\n\tDelegatedStake,\n\tDevInspectResults,\n\tDevInspectTransactionBlockParams,\n\tDryRunTransactionBlockParams,\n\tDryRunTransactionBlockResponse,\n\tDynamicFieldPage,\n\tEpochInfo,\n\tEpochMetricsPage,\n\tEpochPage,\n\tExecuteTransactionBlockParams,\n\tGetAllBalancesParams,\n\tGetAllCoinsParams,\n\tGetBalanceParams,\n\tGetCheckpointParams,\n\tGetCheckpointsParams,\n\tGetCoinMetadataParams,\n\tGetCoinsParams,\n\tGetCommitteeInfoParams,\n\tGetDynamicFieldObjectParams,\n\tGetDynamicFieldsParams,\n\tGetMoveFunctionArgTypesParams,\n\tGetNormalizedMoveFunctionParams,\n\tGetNormalizedMoveModuleParams,\n\tGetNormalizedMoveModulesByPackageParams,\n\tGetNormalizedMoveStructParams,\n\tGetObjectParams,\n\tGetOwnedObjectsParams,\n\tGetProtocolConfigParams,\n\tGetStakesByIdsParams,\n\tGetStakesParams,\n\tGetTotalSupplyParams,\n\tGetTransactionBlockParams,\n\tMoveCallMetrics,\n\tMultiGetObjectsParams,\n\tMultiGetTransactionBlocksParams,\n\tNetworkMetrics,\n\tObjectRead,\n\tOrder,\n\tPaginatedCoins,\n\tPaginatedEvents,\n\tPaginatedObjectsResponse,\n\tPaginatedTransactionResponse,\n\tProtocolConfig,\n\tQueryEventsParams,\n\tQueryTransactionBlocksParams,\n\tResolvedNameServiceNames,\n\tResolveNameServiceAddressParams,\n\tResolveNameServiceNamesParams,\n\tSubscribeEventParams,\n\tSubscribeTransactionParams,\n\tSuiEvent,\n\tSuiMoveFunctionArgType,\n\tSuiMoveNormalizedFunction,\n\tSuiMoveNormalizedModule,\n\tSuiMoveNormalizedModules,\n\tSuiMoveNormalizedStruct,\n\tSuiObjectResponse,\n\tSuiObjectResponseQuery,\n\tSuiSystemStateSummary,\n\tSuiTransactionBlockResponse,\n\tSuiTransactionBlockResponseQuery,\n\tTransactionEffects,\n\tTryGetPastObjectParams,\n\tUnsubscribe,\n\tValidatorsApy,\n} from './types/index.js';\n\nexport interface PaginationArguments<Cursor> {\n\t/** Optional paging cursor */\n\tcursor?: Cursor;\n\t/** Maximum item returned per page */\n\tlimit?: number | null;\n}\n\nexport interface OrderArguments {\n\torder?: Order | null;\n}\n\n/**\n * Configuration options for the SuiClient\n * You must provide either a `url` or a `transport`\n */\nexport type SuiClientOptions = NetworkOrTransport;\n\ntype NetworkOrTransport =\n\t| {\n\t\t\turl: string;\n\t\t\ttransport?: never;\n\t  }\n\t| {\n\t\t\ttransport: SuiTransport;\n\t\t\turl?: never;\n\t  };\n\nconst SUI_CLIENT_BRAND = Symbol.for('@mysten/SuiClient') as never;\n\nexport function isSuiClient(client: unknown): client is SuiClient {\n\treturn (\n\t\ttypeof client === 'object' && client !== null && (client as any)[SUI_CLIENT_BRAND] === true\n\t);\n}\n\nexport class SuiClient {\n\tprotected transport: SuiTransport;\n\n\tget [SUI_CLIENT_BRAND]() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Establish a connection to a Sui RPC endpoint\n\t *\n\t * @param options configuration options for the API Client\n\t */\n\tconstructor(options: SuiClientOptions) {\n\t\tthis.transport = options.transport ?? new SuiHTTPTransport({ url: options.url });\n\t}\n\n\tasync getRpcApiVersion(): Promise<string | undefined> {\n\t\tconst resp = await this.transport.request<{ info: { version: string } }>({\n\t\t\tmethod: 'rpc.discover',\n\t\t\tparams: [],\n\t\t});\n\n\t\treturn resp.info.version;\n\t}\n\n\t/**\n\t * Get all Coin<`coin_type`> objects owned by an address.\n\t */\n\tasync getCoins(input: GetCoinsParams): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCoins',\n\t\t\tparams: [input.owner, input.coinType, input.cursor, input.limit],\n\t\t});\n\t}\n\n\t/**\n\t * Get all Coin objects owned by an address.\n\t */\n\tasync getAllCoins(input: GetAllCoinsParams): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getAllCoins',\n\t\t\tparams: [input.owner, input.cursor, input.limit],\n\t\t});\n\t}\n\n\t/**\n\t * Get the total coin balance for one coin type, owned by the address owner.\n\t */\n\tasync getBalance(input: GetBalanceParams): Promise<CoinBalance> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getBalance',\n\t\t\tparams: [input.owner, input.coinType],\n\t\t});\n\t}\n\n\t/**\n\t * Get the total coin balance for all coin types, owned by the address owner.\n\t */\n\tasync getAllBalances(input: GetAllBalancesParams): Promise<CoinBalance[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({ method: 'suix_getAllBalances', params: [input.owner] });\n\t}\n\n\t/**\n\t * Fetch CoinMetadata for a given coin type\n\t */\n\tasync getCoinMetadata(input: GetCoinMetadataParams): Promise<CoinMetadata | null> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCoinMetadata',\n\t\t\tparams: [input.coinType],\n\t\t});\n\t}\n\n\t/**\n\t *  Fetch total supply for a coin\n\t */\n\tasync getTotalSupply(input: GetTotalSupplyParams): Promise<CoinSupply> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getTotalSupply',\n\t\t\tparams: [input.coinType],\n\t\t});\n\t}\n\n\t/**\n\t * Invoke any RPC method\n\t * @param method the method to be invoked\n\t * @param args the arguments to be passed to the RPC request\n\t */\n\tasync call<T = unknown>(method: string, params: unknown[]): Promise<T> {\n\t\treturn await this.transport.request({ method, params });\n\t}\n\n\t/**\n\t * Get Move function argument types like read, write and full access\n\t */\n\tasync getMoveFunctionArgTypes(\n\t\tinput: GetMoveFunctionArgTypesParams,\n\t): Promise<SuiMoveFunctionArgType[]> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getMoveFunctionArgTypes',\n\t\t\tparams: [input.package, input.module, input.function],\n\t\t});\n\t}\n\n\t/**\n\t * Get a map from module name to\n\t * structured representations of Move modules\n\t */\n\tasync getNormalizedMoveModulesByPackage(\n\t\tinput: GetNormalizedMoveModulesByPackageParams,\n\t): Promise<SuiMoveNormalizedModules> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveModulesByPackage',\n\t\t\tparams: [input.package],\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move module\n\t */\n\tasync getNormalizedMoveModule(\n\t\tinput: GetNormalizedMoveModuleParams,\n\t): Promise<SuiMoveNormalizedModule> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveModule',\n\t\t\tparams: [input.package, input.module],\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move function\n\t */\n\tasync getNormalizedMoveFunction(\n\t\tinput: GetNormalizedMoveFunctionParams,\n\t): Promise<SuiMoveNormalizedFunction> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveFunction',\n\t\t\tparams: [input.package, input.module, input.function],\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move struct\n\t */\n\tasync getNormalizedMoveStruct(\n\t\tinput: GetNormalizedMoveStructParams,\n\t): Promise<SuiMoveNormalizedStruct> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveStruct',\n\t\t\tparams: [input.package, input.module, input.struct],\n\t\t});\n\t}\n\n\t/**\n\t * Get all objects owned by an address\n\t */\n\tasync getOwnedObjects(input: GetOwnedObjectsParams): Promise<PaginatedObjectsResponse> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getOwnedObjects',\n\t\t\tparams: [\n\t\t\t\tinput.owner,\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiObjectResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Get details about an object\n\t */\n\tasync getObject(input: GetObjectParams): Promise<SuiObjectResponse> {\n\t\tif (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getObject',\n\t\t\tparams: [input.id, input.options],\n\t\t});\n\t}\n\n\tasync tryGetPastObject(input: TryGetPastObjectParams): Promise<ObjectRead> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_tryGetPastObject',\n\t\t\tparams: [input.id, input.version, input.options],\n\t\t});\n\t}\n\n\t/**\n\t * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n\t */\n\tasync multiGetObjects(input: MultiGetObjectsParams): Promise<SuiObjectResponse[]> {\n\t\tinput.ids.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Object id ${id}`);\n\t\t\t}\n\t\t});\n\t\tconst hasDuplicates = input.ids.length !== new Set(input.ids).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate object ids in batch call ${input.ids}`);\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_multiGetObjects',\n\t\t\tparams: [input.ids, input.options],\n\t\t});\n\t}\n\n\t/**\n\t * Get transaction blocks for a given query criteria\n\t */\n\tasync queryTransactionBlocks(\n\t\tinput: QueryTransactionBlocksParams,\n\t): Promise<PaginatedTransactionResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_queryTransactionBlocks',\n\t\t\tparams: [\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiTransactionBlockResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t});\n\t}\n\n\tasync getTransactionBlock(\n\t\tinput: GetTransactionBlockParams,\n\t): Promise<SuiTransactionBlockResponse> {\n\t\tif (!isValidTransactionDigest(input.digest)) {\n\t\t\tthrow new Error('Invalid Transaction digest');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getTransactionBlock',\n\t\t\tparams: [input.digest, input.options],\n\t\t});\n\t}\n\n\tasync multiGetTransactionBlocks(\n\t\tinput: MultiGetTransactionBlocksParams,\n\t): Promise<SuiTransactionBlockResponse[]> {\n\t\tinput.digests.forEach((d) => {\n\t\t\tif (!isValidTransactionDigest(d)) {\n\t\t\t\tthrow new Error(`Invalid Transaction digest ${d}`);\n\t\t\t}\n\t\t});\n\n\t\tconst hasDuplicates = input.digests.length !== new Set(input.digests).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate digests in batch call ${input.digests}`);\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_multiGetTransactionBlocks',\n\t\t\tparams: [input.digests, input.options],\n\t\t});\n\t}\n\n\tasync executeTransactionBlock({\n\t\ttransactionBlock,\n\t\tsignature,\n\t\toptions,\n\t\trequestType,\n\t}: ExecuteTransactionBlockParams): Promise<SuiTransactionBlockResponse> {\n\t\tconst result: SuiTransactionBlockResponse = await this.transport.request({\n\t\t\tmethod: 'sui_executeTransactionBlock',\n\t\t\tparams: [\n\t\t\t\ttypeof transactionBlock === 'string' ? transactionBlock : toBase64(transactionBlock),\n\t\t\t\tArray.isArray(signature) ? signature : [signature],\n\t\t\t\toptions,\n\t\t\t],\n\t\t});\n\n\t\tif (requestType === 'WaitForLocalExecution') {\n\t\t\ttry {\n\t\t\t\tawait this.waitForTransaction({\n\t\t\t\t\tdigest: result.digest,\n\t\t\t\t});\n\t\t\t} catch (_) {\n\t\t\t\t// Ignore error while waiting for transaction\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync signAndExecuteTransaction({\n\t\ttransaction,\n\t\tsigner,\n\t\t...input\n\t}: {\n\t\ttransaction: Uint8Array | Transaction;\n\t\tsigner: Signer;\n\t} & Omit<\n\t\tExecuteTransactionBlockParams,\n\t\t'transactionBlock' | 'signature'\n\t>): Promise<SuiTransactionBlockResponse> {\n\t\tlet transactionBytes;\n\n\t\tif (transaction instanceof Uint8Array) {\n\t\t\ttransactionBytes = transaction;\n\t\t} else {\n\t\t\ttransaction.setSenderIfNotSet(signer.toSuiAddress());\n\t\t\ttransactionBytes = await transaction.build({ client: this });\n\t\t}\n\n\t\tconst { signature, bytes } = await signer.signTransaction(transactionBytes);\n\n\t\treturn this.executeTransactionBlock({\n\t\t\ttransactionBlock: bytes,\n\t\t\tsignature,\n\t\t\t...input,\n\t\t});\n\t}\n\n\t/**\n\t * Get total number of transactions\n\t */\n\n\tasync getTotalTransactionBlocks(): Promise<bigint> {\n\t\tconst resp = await this.transport.request<string>({\n\t\t\tmethod: 'sui_getTotalTransactionBlocks',\n\t\t\tparams: [],\n\t\t});\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Getting the reference gas price for the network\n\t */\n\tasync getReferenceGasPrice(): Promise<bigint> {\n\t\tconst resp = await this.transport.request<string>({\n\t\t\tmethod: 'suix_getReferenceGasPrice',\n\t\t\tparams: [],\n\t\t});\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Return the delegated stakes for an address\n\t */\n\tasync getStakes(input: GetStakesParams): Promise<DelegatedStake[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({ method: 'suix_getStakes', params: [input.owner] });\n\t}\n\n\t/**\n\t * Return the delegated stakes queried by id.\n\t */\n\tasync getStakesByIds(input: GetStakesByIdsParams): Promise<DelegatedStake[]> {\n\t\tinput.stakedSuiIds.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Stake id ${id}`);\n\t\t\t}\n\t\t});\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getStakesByIds',\n\t\t\tparams: [input.stakedSuiIds],\n\t\t});\n\t}\n\n\t/**\n\t * Return the latest system state content.\n\t */\n\tasync getLatestSuiSystemState(): Promise<SuiSystemStateSummary> {\n\t\treturn await this.transport.request({ method: 'suix_getLatestSuiSystemState', params: [] });\n\t}\n\n\t/**\n\t * Get events for a given query criteria\n\t */\n\tasync queryEvents(input: QueryEventsParams): Promise<PaginatedEvents> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_queryEvents',\n\t\t\tparams: [\n\t\t\t\tinput.query,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Subscribe to get notifications whenever an event matching the filter occurs\n\t *\n\t * @deprecated\n\t */\n\tasync subscribeEvent(\n\t\tinput: SubscribeEventParams & {\n\t\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\t\tonMessage: (event: SuiEvent) => void;\n\t\t},\n\t): Promise<Unsubscribe> {\n\t\treturn this.transport.subscribe({\n\t\t\tmethod: 'suix_subscribeEvent',\n\t\t\tunsubscribe: 'suix_unsubscribeEvent',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tasync subscribeTransaction(\n\t\tinput: SubscribeTransactionParams & {\n\t\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\t\tonMessage: (event: TransactionEffects) => void;\n\t\t},\n\t): Promise<Unsubscribe> {\n\t\treturn this.transport.subscribe({\n\t\t\tmethod: 'suix_subscribeTransaction',\n\t\t\tunsubscribe: 'suix_unsubscribeTransaction',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\t/**\n\t * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n\t * transaction (or Move call) with any arguments. Detailed results are\n\t * provided, including both the transaction effects and any return values.\n\t */\n\tasync devInspectTransactionBlock(\n\t\tinput: DevInspectTransactionBlockParams,\n\t): Promise<DevInspectResults> {\n\t\tlet devInspectTxBytes;\n\t\tif (isTransaction(input.transactionBlock)) {\n\t\t\tinput.transactionBlock.setSenderIfNotSet(input.sender);\n\t\t\tdevInspectTxBytes = toBase64(\n\t\t\t\tawait input.transactionBlock.build({\n\t\t\t\t\tclient: this,\n\t\t\t\t\tonlyTransactionKind: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else if (typeof input.transactionBlock === 'string') {\n\t\t\tdevInspectTxBytes = input.transactionBlock;\n\t\t} else if (input.transactionBlock instanceof Uint8Array) {\n\t\t\tdevInspectTxBytes = toBase64(input.transactionBlock);\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction block format.');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_devInspectTransactionBlock',\n\t\t\tparams: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch],\n\t\t});\n\t}\n\n\t/**\n\t * Dry run a transaction block and return the result.\n\t */\n\tasync dryRunTransactionBlock(\n\t\tinput: DryRunTransactionBlockParams,\n\t): Promise<DryRunTransactionBlockResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_dryRunTransactionBlock',\n\t\t\tparams: [\n\t\t\t\ttypeof input.transactionBlock === 'string'\n\t\t\t\t\t? input.transactionBlock\n\t\t\t\t\t: toBase64(input.transactionBlock),\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Return the list of dynamic field objects owned by an object\n\t */\n\tasync getDynamicFields(input: GetDynamicFieldsParams): Promise<DynamicFieldPage> {\n\t\tif (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getDynamicFields',\n\t\t\tparams: [input.parentId, input.cursor, input.limit],\n\t\t});\n\t}\n\n\t/**\n\t * Return the dynamic field object information for a specified object\n\t */\n\tasync getDynamicFieldObject(input: GetDynamicFieldObjectParams): Promise<SuiObjectResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getDynamicFieldObject',\n\t\t\tparams: [input.parentId, input.name],\n\t\t});\n\t}\n\n\t/**\n\t * Get the sequence number of the latest checkpoint that has been executed\n\t */\n\tasync getLatestCheckpointSequenceNumber(): Promise<string> {\n\t\tconst resp = await this.transport.request({\n\t\t\tmethod: 'sui_getLatestCheckpointSequenceNumber',\n\t\t\tparams: [],\n\t\t});\n\t\treturn String(resp);\n\t}\n\n\t/**\n\t * Returns information about a given checkpoint\n\t */\n\tasync getCheckpoint(input: GetCheckpointParams): Promise<Checkpoint> {\n\t\treturn await this.transport.request({ method: 'sui_getCheckpoint', params: [input.id] });\n\t}\n\n\t/**\n\t * Returns historical checkpoints paginated\n\t */\n\tasync getCheckpoints(\n\t\tinput: PaginationArguments<CheckpointPage['nextCursor']> & GetCheckpointsParams,\n\t): Promise<CheckpointPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getCheckpoints',\n\t\t\tparams: [input.cursor, input?.limit, input.descendingOrder],\n\t\t});\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCommitteeInfo(input?: GetCommitteeInfoParams): Promise<CommitteeInfo> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCommitteeInfo',\n\t\t\tparams: [input?.epoch],\n\t\t});\n\t}\n\n\tasync getNetworkMetrics(): Promise<NetworkMetrics> {\n\t\treturn await this.transport.request({ method: 'suix_getNetworkMetrics', params: [] });\n\t}\n\n\tasync getAddressMetrics(): Promise<AddressMetrics> {\n\t\treturn await this.transport.request({ method: 'suix_getLatestAddressMetrics', params: [] });\n\t}\n\n\tasync getEpochMetrics(\n\t\tinput?: { descendingOrder?: boolean } & PaginationArguments<EpochMetricsPage['nextCursor']>,\n\t): Promise<EpochMetricsPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getEpochMetrics',\n\t\t\tparams: [input?.cursor, input?.limit, input?.descendingOrder],\n\t\t});\n\t}\n\n\tasync getAllEpochAddressMetrics(input?: {\n\t\tdescendingOrder?: boolean;\n\t}): Promise<AllEpochsAddressMetrics> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getAllEpochAddressMetrics',\n\t\t\tparams: [input?.descendingOrder],\n\t\t});\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getEpochs(\n\t\tinput?: {\n\t\t\tdescendingOrder?: boolean;\n\t\t} & PaginationArguments<EpochPage['nextCursor']>,\n\t): Promise<EpochPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getEpochs',\n\t\t\tparams: [input?.cursor, input?.limit, input?.descendingOrder],\n\t\t});\n\t}\n\n\t/**\n\t * Returns list of top move calls by usage\n\t */\n\tasync getMoveCallMetrics(): Promise<MoveCallMetrics> {\n\t\treturn await this.transport.request({ method: 'suix_getMoveCallMetrics', params: [] });\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCurrentEpoch(): Promise<EpochInfo> {\n\t\treturn await this.transport.request({ method: 'suix_getCurrentEpoch', params: [] });\n\t}\n\n\t/**\n\t * Return the Validators APYs\n\t */\n\tasync getValidatorsApy(): Promise<ValidatorsApy> {\n\t\treturn await this.transport.request({ method: 'suix_getValidatorsApy', params: [] });\n\t}\n\n\t// TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n\tasync getChainIdentifier(): Promise<string> {\n\t\tconst checkpoint = await this.getCheckpoint({ id: '0' });\n\t\tconst bytes = fromBase58(checkpoint.digest);\n\t\treturn toHex(bytes.slice(0, 4));\n\t}\n\n\tasync resolveNameServiceAddress(input: ResolveNameServiceAddressParams): Promise<string | null> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_resolveNameServiceAddress',\n\t\t\tparams: [input.name],\n\t\t});\n\t}\n\n\tasync resolveNameServiceNames({\n\t\tformat = 'dot',\n\t\t...input\n\t}: ResolveNameServiceNamesParams & {\n\t\tformat?: 'at' | 'dot';\n\t}): Promise<ResolvedNameServiceNames> {\n\t\tconst { nextCursor, hasNextPage, data }: ResolvedNameServiceNames =\n\t\t\tawait this.transport.request({\n\t\t\t\tmethod: 'suix_resolveNameServiceNames',\n\t\t\t\tparams: [input.address, input.cursor, input.limit],\n\t\t\t});\n\n\t\treturn {\n\t\t\thasNextPage,\n\t\t\tnextCursor,\n\t\t\tdata: data.map((name) => normalizeSuiNSName(name, format)),\n\t\t};\n\t}\n\n\tasync getProtocolConfig(input?: GetProtocolConfigParams): Promise<ProtocolConfig> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getProtocolConfig',\n\t\t\tparams: [input?.version],\n\t\t});\n\t}\n\n\t/**\n\t * Wait for a transaction block result to be available over the API.\n\t * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n\t * be available via the API.\n\t * This currently polls the `getTransactionBlock` API to check for the transaction.\n\t */\n\tasync waitForTransaction({\n\t\tsignal,\n\t\ttimeout = 60 * 1000,\n\t\tpollInterval = 2 * 1000,\n\t\t...input\n\t}: {\n\t\t/** An optional abort signal that can be used to cancel */\n\t\tsignal?: AbortSignal;\n\t\t/** The amount of time to wait for a transaction block. Defaults to one minute. */\n\t\ttimeout?: number;\n\t\t/** The amount of time to wait between checks for the transaction block. Defaults to 2 seconds. */\n\t\tpollInterval?: number;\n\t} & Parameters<SuiClient['getTransactionBlock']>[0]): Promise<SuiTransactionBlockResponse> {\n\t\tconst timeoutSignal = AbortSignal.timeout(timeout);\n\t\tconst timeoutPromise = new Promise((_, reject) => {\n\t\t\ttimeoutSignal.addEventListener('abort', () => reject(timeoutSignal.reason));\n\t\t});\n\n\t\ttimeoutPromise.catch(() => {\n\t\t\t// Swallow unhandled rejections that might be thrown after early return\n\t\t});\n\n\t\twhile (!timeoutSignal.aborted) {\n\t\t\tsignal?.throwIfAborted();\n\t\t\ttry {\n\t\t\t\treturn await this.getTransactionBlock(input);\n\t\t\t} catch (e) {\n\t\t\t\t// Wait for either the next poll interval, or the timeout.\n\t\t\t\tawait Promise.race([\n\t\t\t\t\tnew Promise((resolve) => setTimeout(resolve, pollInterval)),\n\t\t\t\t\ttimeoutPromise,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\ttimeoutSignal.throwIfAborted();\n\n\t\t// This should never happen, because the above case should always throw, but just adding it in the event that something goes horribly wrong.\n\t\tthrow new Error('Unexpected error while waiting for transaction block.');\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
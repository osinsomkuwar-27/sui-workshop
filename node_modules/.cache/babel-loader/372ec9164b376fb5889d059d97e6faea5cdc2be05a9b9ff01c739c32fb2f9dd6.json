{"ast":null,"code":"import { bcs } from \"../bcs/index.js\";\nimport { MOVE_STDLIB_ADDRESS, SUI_FRAMEWORK_ADDRESS } from \"../utils/index.js\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nconst OBJECT_MODULE_NAME = \"object\";\nconst ID_STRUCT_NAME = \"ID\";\nconst STD_ASCII_MODULE_NAME = \"ascii\";\nconst STD_ASCII_STRUCT_NAME = \"String\";\nconst STD_UTF8_MODULE_NAME = \"string\";\nconst STD_UTF8_STRUCT_NAME = \"String\";\nconst STD_OPTION_MODULE_NAME = \"option\";\nconst STD_OPTION_STRUCT_NAME = \"Option\";\nfunction isTxContext(param) {\n  const struct = typeof param.body === \"object\" && \"datatype\" in param.body ? param.body.datatype : null;\n  return !!struct && normalizeSuiAddress(struct.package) === normalizeSuiAddress(\"0x2\") && struct.module === \"tx_context\" && struct.type === \"TxContext\";\n}\nfunction getPureBcsSchema(typeSignature) {\n  if (typeof typeSignature === \"string\") {\n    switch (typeSignature) {\n      case \"address\":\n        return bcs.Address;\n      case \"bool\":\n        return bcs.Bool;\n      case \"u8\":\n        return bcs.U8;\n      case \"u16\":\n        return bcs.U16;\n      case \"u32\":\n        return bcs.U32;\n      case \"u64\":\n        return bcs.U64;\n      case \"u128\":\n        return bcs.U128;\n      case \"u256\":\n        return bcs.U256;\n      default:\n        throw new Error(`Unknown type signature ${typeSignature}`);\n    }\n  }\n  if (\"vector\" in typeSignature) {\n    if (typeSignature.vector === \"u8\") {\n      return bcs.vector(bcs.U8).transform({\n        input: val => typeof val === \"string\" ? new TextEncoder().encode(val) : val,\n        output: val => val\n      });\n    }\n    const type = getPureBcsSchema(typeSignature.vector);\n    return type ? bcs.vector(type) : null;\n  }\n  if (\"datatype\" in typeSignature) {\n    const pkg = normalizeSuiAddress(typeSignature.datatype.package);\n    if (pkg === normalizeSuiAddress(MOVE_STDLIB_ADDRESS)) {\n      if (typeSignature.datatype.module === STD_ASCII_MODULE_NAME && typeSignature.datatype.type === STD_ASCII_STRUCT_NAME) {\n        return bcs.String;\n      }\n      if (typeSignature.datatype.module === STD_UTF8_MODULE_NAME && typeSignature.datatype.type === STD_UTF8_STRUCT_NAME) {\n        return bcs.String;\n      }\n      if (typeSignature.datatype.module === STD_OPTION_MODULE_NAME && typeSignature.datatype.type === STD_OPTION_STRUCT_NAME) {\n        const type = getPureBcsSchema(typeSignature.datatype.typeParameters[0]);\n        return type ? bcs.vector(type) : null;\n      }\n    }\n    if (pkg === normalizeSuiAddress(SUI_FRAMEWORK_ADDRESS) && typeSignature.datatype.module === OBJECT_MODULE_NAME && typeSignature.datatype.type === ID_STRUCT_NAME) {\n      return bcs.Address;\n    }\n  }\n  return null;\n}\nfunction normalizedTypeToMoveTypeSignature(type) {\n  if (typeof type === \"object\" && \"Reference\" in type) {\n    return {\n      ref: \"&\",\n      body: normalizedTypeToMoveTypeSignatureBody(type.Reference)\n    };\n  }\n  if (typeof type === \"object\" && \"MutableReference\" in type) {\n    return {\n      ref: \"&mut\",\n      body: normalizedTypeToMoveTypeSignatureBody(type.MutableReference)\n    };\n  }\n  return {\n    ref: null,\n    body: normalizedTypeToMoveTypeSignatureBody(type)\n  };\n}\nfunction normalizedTypeToMoveTypeSignatureBody(type) {\n  if (typeof type === \"string\") {\n    switch (type) {\n      case \"Address\":\n        return \"address\";\n      case \"Bool\":\n        return \"bool\";\n      case \"U8\":\n        return \"u8\";\n      case \"U16\":\n        return \"u16\";\n      case \"U32\":\n        return \"u32\";\n      case \"U64\":\n        return \"u64\";\n      case \"U128\":\n        return \"u128\";\n      case \"U256\":\n        return \"u256\";\n      default:\n        throw new Error(`Unexpected type ${type}`);\n    }\n  }\n  if (\"Vector\" in type) {\n    return {\n      vector: normalizedTypeToMoveTypeSignatureBody(type.Vector)\n    };\n  }\n  if (\"Struct\" in type) {\n    return {\n      datatype: {\n        package: type.Struct.address,\n        module: type.Struct.module,\n        type: type.Struct.name,\n        typeParameters: type.Struct.typeArguments.map(normalizedTypeToMoveTypeSignatureBody)\n      }\n    };\n  }\n  if (\"TypeParameter\" in type) {\n    return {\n      typeParameter: type.TypeParameter\n    };\n  }\n  throw new Error(`Unexpected type ${JSON.stringify(type)}`);\n}\nfunction pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature) {\n  if (typeof typeSignature === \"string\") {\n    switch (typeSignature) {\n      case \"address\":\n        return bcs.Address;\n      case \"bool\":\n        return bcs.Bool;\n      case \"u8\":\n        return bcs.U8;\n      case \"u16\":\n        return bcs.U16;\n      case \"u32\":\n        return bcs.U32;\n      case \"u64\":\n        return bcs.U64;\n      case \"u128\":\n        return bcs.U128;\n      case \"u256\":\n        return bcs.U256;\n      default:\n        throw new Error(`Unknown type signature ${typeSignature}`);\n    }\n  }\n  if (\"vector\" in typeSignature) {\n    return bcs.vector(pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature.vector));\n  }\n  throw new Error(`Expected pure typeSignature, but got ${JSON.stringify(typeSignature)}`);\n}\nexport { getPureBcsSchema, isTxContext, normalizedTypeToMoveTypeSignature, pureBcsSchemaFromOpenMoveTypeSignatureBody };","map":{"version":3,"names":["bcs","MOVE_STDLIB_ADDRESS","SUI_FRAMEWORK_ADDRESS","normalizeSuiAddress","OBJECT_MODULE_NAME","ID_STRUCT_NAME","STD_ASCII_MODULE_NAME","STD_ASCII_STRUCT_NAME","STD_UTF8_MODULE_NAME","STD_UTF8_STRUCT_NAME","STD_OPTION_MODULE_NAME","STD_OPTION_STRUCT_NAME","isTxContext","param","struct","body","datatype","package","module","type","getPureBcsSchema","typeSignature","Address","Bool","U8","U16","U32","U64","U128","U256","Error","vector","transform","input","val","TextEncoder","encode","output","pkg","String","typeParameters","normalizedTypeToMoveTypeSignature","ref","normalizedTypeToMoveTypeSignatureBody","Reference","MutableReference","Vector","Struct","address","name","typeArguments","map","typeParameter","TypeParameter","JSON","stringify","pureBcsSchemaFromOpenMoveTypeSignatureBody"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\transactions\\serializer.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport type { SuiMoveNormalizedType } from '../client/index.js';\nimport { MOVE_STDLIB_ADDRESS, SUI_FRAMEWORK_ADDRESS } from '../utils/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { OpenMoveTypeSignature, OpenMoveTypeSignatureBody } from './data/internal.js';\n\nconst OBJECT_MODULE_NAME = 'object';\nconst ID_STRUCT_NAME = 'ID';\n\nconst STD_ASCII_MODULE_NAME = 'ascii';\nconst STD_ASCII_STRUCT_NAME = 'String';\n\nconst STD_UTF8_MODULE_NAME = 'string';\nconst STD_UTF8_STRUCT_NAME = 'String';\n\nconst STD_OPTION_MODULE_NAME = 'option';\nconst STD_OPTION_STRUCT_NAME = 'Option';\n\nexport function isTxContext(param: OpenMoveTypeSignature): boolean {\n\tconst struct =\n\t\ttypeof param.body === 'object' && 'datatype' in param.body ? param.body.datatype : null;\n\n\treturn (\n\t\t!!struct &&\n\t\tnormalizeSuiAddress(struct.package) === normalizeSuiAddress('0x2') &&\n\t\tstruct.module === 'tx_context' &&\n\t\tstruct.type === 'TxContext'\n\t);\n}\n\nexport function getPureBcsSchema(typeSignature: OpenMoveTypeSignatureBody): BcsType<any> | null {\n\tif (typeof typeSignature === 'string') {\n\t\tswitch (typeSignature) {\n\t\t\tcase 'address':\n\t\t\t\treturn bcs.Address;\n\t\t\tcase 'bool':\n\t\t\t\treturn bcs.Bool;\n\t\t\tcase 'u8':\n\t\t\t\treturn bcs.U8;\n\t\t\tcase 'u16':\n\t\t\t\treturn bcs.U16;\n\t\t\tcase 'u32':\n\t\t\t\treturn bcs.U32;\n\t\t\tcase 'u64':\n\t\t\t\treturn bcs.U64;\n\t\t\tcase 'u128':\n\t\t\t\treturn bcs.U128;\n\t\t\tcase 'u256':\n\t\t\t\treturn bcs.U256;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown type signature ${typeSignature}`);\n\t\t}\n\t}\n\n\tif ('vector' in typeSignature) {\n\t\tif (typeSignature.vector === 'u8') {\n\t\t\treturn bcs.vector(bcs.U8).transform({\n\t\t\t\tinput: (val: string | Uint8Array) =>\n\t\t\t\t\ttypeof val === 'string' ? new TextEncoder().encode(val) : val,\n\t\t\t\toutput: (val) => val,\n\t\t\t});\n\t\t}\n\t\tconst type = getPureBcsSchema(typeSignature.vector);\n\t\treturn type ? bcs.vector(type) : null;\n\t}\n\n\tif ('datatype' in typeSignature) {\n\t\tconst pkg = normalizeSuiAddress(typeSignature.datatype.package);\n\n\t\tif (pkg === normalizeSuiAddress(MOVE_STDLIB_ADDRESS)) {\n\t\t\tif (\n\t\t\t\ttypeSignature.datatype.module === STD_ASCII_MODULE_NAME &&\n\t\t\t\ttypeSignature.datatype.type === STD_ASCII_STRUCT_NAME\n\t\t\t) {\n\t\t\t\treturn bcs.String;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeSignature.datatype.module === STD_UTF8_MODULE_NAME &&\n\t\t\t\ttypeSignature.datatype.type === STD_UTF8_STRUCT_NAME\n\t\t\t) {\n\t\t\t\treturn bcs.String;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeSignature.datatype.module === STD_OPTION_MODULE_NAME &&\n\t\t\t\ttypeSignature.datatype.type === STD_OPTION_STRUCT_NAME\n\t\t\t) {\n\t\t\t\tconst type = getPureBcsSchema(typeSignature.datatype.typeParameters[0]);\n\t\t\t\treturn type ? bcs.vector(type) : null;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tpkg === normalizeSuiAddress(SUI_FRAMEWORK_ADDRESS) &&\n\t\t\ttypeSignature.datatype.module === OBJECT_MODULE_NAME &&\n\t\t\ttypeSignature.datatype.type === ID_STRUCT_NAME\n\t\t) {\n\t\t\treturn bcs.Address;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function normalizedTypeToMoveTypeSignature(\n\ttype: SuiMoveNormalizedType,\n): OpenMoveTypeSignature {\n\tif (typeof type === 'object' && 'Reference' in type) {\n\t\treturn {\n\t\t\tref: '&',\n\t\t\tbody: normalizedTypeToMoveTypeSignatureBody(type.Reference),\n\t\t};\n\t}\n\tif (typeof type === 'object' && 'MutableReference' in type) {\n\t\treturn {\n\t\t\tref: '&mut',\n\t\t\tbody: normalizedTypeToMoveTypeSignatureBody(type.MutableReference),\n\t\t};\n\t}\n\n\treturn {\n\t\tref: null,\n\t\tbody: normalizedTypeToMoveTypeSignatureBody(type),\n\t};\n}\n\nfunction normalizedTypeToMoveTypeSignatureBody(\n\ttype: SuiMoveNormalizedType,\n): OpenMoveTypeSignatureBody {\n\tif (typeof type === 'string') {\n\t\tswitch (type) {\n\t\t\tcase 'Address':\n\t\t\t\treturn 'address';\n\t\t\tcase 'Bool':\n\t\t\t\treturn 'bool';\n\t\t\tcase 'U8':\n\t\t\t\treturn 'u8';\n\t\t\tcase 'U16':\n\t\t\t\treturn 'u16';\n\t\t\tcase 'U32':\n\t\t\t\treturn 'u32';\n\t\t\tcase 'U64':\n\t\t\t\treturn 'u64';\n\t\t\tcase 'U128':\n\t\t\t\treturn 'u128';\n\t\t\tcase 'U256':\n\t\t\t\treturn 'u256';\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected type ${type}`);\n\t\t}\n\t}\n\n\tif ('Vector' in type) {\n\t\treturn { vector: normalizedTypeToMoveTypeSignatureBody(type.Vector) };\n\t}\n\n\tif ('Struct' in type) {\n\t\treturn {\n\t\t\tdatatype: {\n\t\t\t\tpackage: type.Struct.address,\n\t\t\t\tmodule: type.Struct.module,\n\t\t\t\ttype: type.Struct.name,\n\t\t\t\ttypeParameters: type.Struct.typeArguments.map(normalizedTypeToMoveTypeSignatureBody),\n\t\t\t},\n\t\t};\n\t}\n\n\tif ('TypeParameter' in type) {\n\t\treturn { typeParameter: type.TypeParameter };\n\t}\n\n\tthrow new Error(`Unexpected type ${JSON.stringify(type)}`);\n}\n\nexport function pureBcsSchemaFromOpenMoveTypeSignatureBody(\n\ttypeSignature: OpenMoveTypeSignatureBody,\n): BcsType<any> {\n\tif (typeof typeSignature === 'string') {\n\t\tswitch (typeSignature) {\n\t\t\tcase 'address':\n\t\t\t\treturn bcs.Address;\n\t\t\tcase 'bool':\n\t\t\t\treturn bcs.Bool;\n\t\t\tcase 'u8':\n\t\t\t\treturn bcs.U8;\n\t\t\tcase 'u16':\n\t\t\t\treturn bcs.U16;\n\t\t\tcase 'u32':\n\t\t\t\treturn bcs.U32;\n\t\t\tcase 'u64':\n\t\t\t\treturn bcs.U64;\n\t\t\tcase 'u128':\n\t\t\t\treturn bcs.U128;\n\t\t\tcase 'u256':\n\t\t\t\treturn bcs.U256;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown type signature ${typeSignature}`);\n\t\t}\n\t}\n\n\tif ('vector' in typeSignature) {\n\t\treturn bcs.vector(pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature.vector));\n\t}\n\n\tthrow new Error(`Expected pure typeSignature, but got ${JSON.stringify(typeSignature)}`);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
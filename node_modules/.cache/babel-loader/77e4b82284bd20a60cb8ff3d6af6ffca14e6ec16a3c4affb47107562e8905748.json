{"ast":null,"code":"/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, abool, abytes, aInRange, bytesToHex, bytesToNumberLE, concatBytes, ensureBytes, memoized, numberToBytesLE, randomBytes } from \"../utils.js\";\nimport { _createCurveFields, normalizeZ, pippenger, wNAF } from \"./curve.js\";\nimport { Field } from \"./modular.js\";\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _8n = BigInt(8);\nfunction isEdValidXY(Fp, CURVE, x, y) {\n  const x2 = Fp.sqr(x);\n  const y2 = Fp.sqr(y);\n  const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n  const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n  return Fp.eql(left, right);\n}\nexport function edwards(CURVE, curveOpts = {}) {\n  const {\n    Fp,\n    Fn\n  } = _createCurveFields('edwards', CURVE, curveOpts);\n  const {\n    h: cofactor,\n    n: CURVE_ORDER\n  } = CURVE;\n  _validateObject(curveOpts, {}, {\n    uvRatio: 'function'\n  });\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << BigInt(Fn.BYTES * 8) - _1n;\n  const modP = n => Fp.create(n); // Function overrides\n  // sqrt(u/v)\n  const uvRatio = curveOpts.uvRatio || ((u, v) => {\n    try {\n      return {\n        isValid: true,\n        value: Fp.sqrt(Fp.div(u, v))\n      };\n    } catch (e) {\n      return {\n        isValid: false,\n        value: _0n\n      };\n    }\n  });\n  // Validate whether the passed curve params are valid.\n  // equation ax² + y² = 1 + dx²y² should work for generator point.\n  if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n  /**\n   * Asserts coordinate is valid: 0 <= n < MASK.\n   * Coordinates >= Fp.ORDER are allowed for zip215.\n   */\n  function acoord(title, n, banZero = false) {\n    const min = banZero ? _1n : _0n;\n    aInRange('coordinate ' + title, n, min, MASK);\n    return n;\n  }\n  function aextpoint(other) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p, iz) => {\n    const {\n      X,\n      Y,\n      Z\n    } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : Fp.inv(Z); // 8 was chosen arbitrarily\n    const x = modP(X * iz);\n    const y = modP(Y * iz);\n    const zz = Fp.mul(Z, iz);\n    if (is0) return {\n      x: _0n,\n      y: _1n\n    };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return {\n      x,\n      y\n    };\n  });\n  const assertValidMemo = memoized(p => {\n    const {\n      a,\n      d\n    } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const {\n      X,\n      Y,\n      Z,\n      T\n    } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n  // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point {\n    constructor(X, Y, Z, T) {\n      this.X = acoord('x', X);\n      this.Y = acoord('y', Y);\n      this.Z = acoord('z', Z, true);\n      this.T = acoord('t', T);\n      Object.freeze(this);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    // TODO: remove\n    get ex() {\n      return this.X;\n    }\n    get ey() {\n      return this.Y;\n    }\n    get ez() {\n      return this.Z;\n    }\n    get et() {\n      return this.T;\n    }\n    static normalizeZ(points) {\n      return normalizeZ(Point, points);\n    }\n    static msm(points, scalars) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    _setWindowSize(windowSize) {\n      this.precompute(windowSize);\n    }\n    static fromAffine(p) {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const {\n        x,\n        y\n      } = p || {};\n      acoord('x', x);\n      acoord('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    precompute(windowSize = 8, isLazy = true) {\n      wnaf.createCache(this, windowSize);\n      if (!isLazy) this.multiply(_2n); // random number\n      return this;\n    }\n    // Useful in fromAffine() - not for fromBytes(), which always created valid points.\n    assertValidity() {\n      assertValidMemo(this);\n    }\n    // Compare one point to another.\n    equals(other) {\n      aextpoint(other);\n      const {\n        X: X1,\n        Y: Y1,\n        Z: Z1\n      } = this;\n      const {\n        X: X2,\n        Y: Y2,\n        Z: Z2\n      } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    negate() {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.X), this.Y, this.Z, modP(-this.T));\n    }\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double() {\n      const {\n        a\n      } = CURVE;\n      const {\n        X: X1,\n        Y: Y1,\n        Z: Z1\n      } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other) {\n      aextpoint(other);\n      const {\n        a,\n        d\n      } = CURVE;\n      const {\n        X: X1,\n        Y: Y1,\n        Z: Z1,\n        T: T1\n      } = this;\n      const {\n        X: X2,\n        Y: Y2,\n        Z: Z2,\n        T: T2\n      } = other;\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    // Constant-time multiplication.\n    multiply(scalar) {\n      const n = scalar;\n      aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const {\n        p,\n        f\n      } = wnaf.cached(this, n, p => normalizeZ(Point, p));\n      return normalizeZ(Point, [p, f])[0];\n    }\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar, acc = Point.ZERO) {\n      const n = scalar;\n      aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return Point.ZERO;\n      if (this.is0() || n === _1n) return this;\n      return wnaf.unsafe(this, n, p => normalizeZ(Point, p), acc);\n    }\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder() {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree() {\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(invertedZ) {\n      return toAffineMemo(this, invertedZ);\n    }\n    clearCofactor() {\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n    static fromBytes(bytes, zip215 = false) {\n      abytes(bytes);\n      return Point.fromHex(bytes, zip215);\n    }\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex, zip215 = false) {\n      const {\n        d,\n        a\n      } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = bytesToNumberLE(normed);\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      aInRange('pointHex.y', y, _0n, max);\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let {\n        isValid,\n        value: x\n      } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({\n        x,\n        y\n      });\n    }\n    toBytes() {\n      const {\n        x,\n        y\n      } = this.toAffine();\n      const bytes = numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes() {\n      return this.toBytes();\n    }\n    toHex() {\n      return bytesToHex(this.toBytes());\n    }\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  // base / generator point\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n  // zero / infinity / identity point\n  Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n  // fields\n  Point.Fp = Fp;\n  Point.Fn = Fn;\n  const wnaf = new wNAF(Point, Fn.BYTES * 8); // Fn.BITS?\n  return Point;\n}\n/**\n * Base class for prime-order points like Ristretto255 and Decaf448.\n * These points eliminate cofactor issues by representing equivalence classes\n * of Edwards curve points.\n */\nexport class PrimeEdwardsPoint {\n  constructor(ep) {\n    this.ep = ep;\n  }\n  // Static methods that must be implemented by subclasses\n  static fromBytes(_bytes) {\n    throw new Error('fromBytes must be implemented by subclass');\n  }\n  static fromHex(_hex) {\n    throw new Error('fromHex must be implemented by subclass');\n  }\n  get x() {\n    return this.toAffine().x;\n  }\n  get y() {\n    return this.toAffine().y;\n  }\n  // Common implementations\n  clearCofactor() {\n    // no-op for prime-order groups\n    return this;\n  }\n  assertValidity() {\n    this.ep.assertValidity();\n  }\n  toAffine(invertedZ) {\n    return this.ep.toAffine(invertedZ);\n  }\n  /** @deprecated use `toBytes` */\n  toRawBytes() {\n    return this.toBytes();\n  }\n  toHex() {\n    return bytesToHex(this.toBytes());\n  }\n  toString() {\n    return this.toHex();\n  }\n  isTorsionFree() {\n    return true;\n  }\n  isSmallOrder() {\n    return false;\n  }\n  add(other) {\n    this.assertSame(other);\n    return this.init(this.ep.add(other.ep));\n  }\n  subtract(other) {\n    this.assertSame(other);\n    return this.init(this.ep.subtract(other.ep));\n  }\n  multiply(scalar) {\n    return this.init(this.ep.multiply(scalar));\n  }\n  multiplyUnsafe(scalar) {\n    return this.init(this.ep.multiplyUnsafe(scalar));\n  }\n  double() {\n    return this.init(this.ep.double());\n  }\n  negate() {\n    return this.init(this.ep.negate());\n  }\n  precompute(windowSize, isLazy) {\n    return this.init(this.ep.precompute(windowSize, isLazy));\n  }\n}\n/**\n * Initializes EdDSA signatures over given Edwards curve.\n */\nexport function eddsa(Point, cHash, eddsaOpts) {\n  if (typeof cHash !== 'function') throw new Error('\"hash\" function param is required');\n  _validateObject(eddsaOpts, {}, {\n    adjustScalarBytes: 'function',\n    randomBytes: 'function',\n    domain: 'function',\n    prehash: 'function',\n    mapToCurve: 'function'\n  });\n  const {\n    prehash\n  } = eddsaOpts;\n  const {\n    BASE: G,\n    Fp,\n    Fn\n  } = Point;\n  const CURVE_ORDER = Fn.ORDER;\n  const randomBytes_ = eddsaOpts.randomBytes || randomBytes;\n  const adjustScalarBytes = eddsaOpts.adjustScalarBytes || (bytes => bytes); // NOOP\n  const domain = eddsaOpts.domain || ((data, ctx, phflag) => {\n    abool('phflag', phflag);\n    if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n    return data;\n  }); // NOOP\n  function modN(a) {\n    return Fn.create(a);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash) {\n    // Not using Fn.fromBytes: hash can be 2*Fn.BYTES\n    return modN(bytesToNumberLE(hash));\n  }\n  // Get the hashed private scalar per RFC8032 5.1.5\n  function getPrivateScalar(key) {\n    const len = Fp.BYTES;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    return {\n      head,\n      prefix,\n      scalar\n    };\n  }\n  /** Convenience method that creates public key from scalar. RFC8032 5.1.5 */\n  function getExtendedPublicKey(secretKey) {\n    const {\n      head,\n      prefix,\n      scalar\n    } = getPrivateScalar(secretKey);\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toBytes();\n    return {\n      head,\n      prefix,\n      scalar,\n      point,\n      pointBytes\n    };\n  }\n  /** Calculates EdDSA pub key. RFC8032 5.1.5. */\n  function getPublicKey(secretKey) {\n    return getExtendedPublicKey(secretKey).pointBytes;\n  }\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {\n    const msg = concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg, secretKey, options = {}) {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const {\n      prefix,\n      scalar,\n      pointBytes\n    } = getExtendedPublicKey(secretKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const L = Fp.BYTES;\n    const res = concatBytes(R, numberToBytesLE(s, L));\n    return ensureBytes('result', res, L * 2); // 64-byte signature\n  }\n  // verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\n  const verifyOpts = {\n    zip215: true\n  };\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig, msg, publicKey, options = verifyOpts) {\n    const {\n      context,\n      zip215\n    } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    publicKey = ensureBytes('publicKey', publicKey, len);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n    const s = bytesToNumberLE(sig.slice(len, 2 * len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n    const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().is0();\n  }\n  G.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  const size = Fp.BYTES;\n  const lengths = {\n    secret: size,\n    public: size,\n    signature: 2 * size,\n    seed: size\n  };\n  function randomSecretKey(seed = randomBytes_(lengths.seed)) {\n    return seed;\n  }\n  const utils = {\n    getExtendedPublicKey,\n    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */\n    randomSecretKey,\n    isValidSecretKey,\n    isValidPublicKey,\n    randomPrivateKey: randomSecretKey,\n    /**\n     * Converts ed public key to x public key. Uses formula:\n     * - ed25519:\n     *   - `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n     *   - `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n     * - ed448:\n     *   - `(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)`\n     *   - `(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))`\n     *\n     * There is NO `fromMontgomery`:\n     * - There are 2 valid ed25519 points for every x25519, with flipped coordinate\n     * - Sometimes there are 0 valid ed25519 points, because x25519 *additionally*\n     *   accepts inputs on the quadratic twist, which can't be moved to ed25519\n     */\n    toMontgomery(publicKey) {\n      const {\n        y\n      } = Point.fromBytes(publicKey);\n      const is25519 = size === 32;\n      if (!is25519 && size !== 57) throw new Error('only defined for 25519 and 448');\n      const u = is25519 ? Fp.div(_1n + y, _1n - y) : Fp.div(y - _1n, y + _1n);\n      return Fp.toBytes(u);\n    },\n    toMontgomeryPriv(privateKey) {\n      abytes(privateKey, size);\n      const hashed = cHash(privateKey.subarray(0, size));\n      return adjustScalarBytes(hashed).subarray(0, size);\n    },\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE) {\n      return point.precompute(windowSize, false);\n    }\n  };\n  function keygen(seed) {\n    const secretKey = utils.randomSecretKey(seed);\n    return {\n      secretKey,\n      publicKey: getPublicKey(secretKey)\n    };\n  }\n  function isValidSecretKey(key) {\n    try {\n      return !!Fn.fromBytes(key, false);\n    } catch (error) {\n      return false;\n    }\n  }\n  function isValidPublicKey(key, zip215) {\n    try {\n      return !!Point.fromBytes(key, zip215);\n    } catch (error) {\n      return false;\n    }\n  }\n  return Object.freeze({\n    keygen,\n    getPublicKey,\n    sign,\n    verify,\n    utils,\n    Point,\n    info: {\n      type: 'edwards',\n      lengths\n    }\n  });\n}\n// TODO: remove\nfunction _eddsa_legacy_opts_to_new(c) {\n  const CURVE = {\n    a: c.a,\n    d: c.d,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy\n  };\n  const Fp = c.Fp;\n  const Fn = Field(CURVE.n, c.nBitLength, true);\n  const curveOpts = {\n    Fp,\n    Fn,\n    uvRatio: c.uvRatio\n  };\n  const eddsaOpts = {\n    randomBytes: c.randomBytes,\n    adjustScalarBytes: c.adjustScalarBytes,\n    domain: c.domain,\n    prehash: c.prehash,\n    mapToCurve: c.mapToCurve\n  };\n  return {\n    CURVE,\n    curveOpts,\n    hash: c.hash,\n    eddsaOpts\n  };\n}\n// TODO: remove\nfunction _eddsa_new_output_to_legacy(c, eddsa) {\n  const legacy = Object.assign({}, eddsa, {\n    ExtendedPoint: eddsa.Point,\n    CURVE: c\n  });\n  return legacy;\n}\n// TODO: remove. Use eddsa\nexport function twistedEdwards(c) {\n  const {\n    CURVE,\n    curveOpts,\n    hash,\n    eddsaOpts\n  } = _eddsa_legacy_opts_to_new(c);\n  const Point = edwards(CURVE, curveOpts);\n  const EDDSA = eddsa(Point, hash, eddsaOpts);\n  return _eddsa_new_output_to_legacy(c, EDDSA);\n}","map":{"version":3,"names":["_validateObject","abool","abytes","aInRange","bytesToHex","bytesToNumberLE","concatBytes","ensureBytes","memoized","numberToBytesLE","randomBytes","_createCurveFields","normalizeZ","pippenger","wNAF","Field","_0n","BigInt","_1n","_2n","_8n","isEdValidXY","Fp","CURVE","x","y","x2","sqr","y2","left","add","mul","a","right","ONE","d","eql","edwards","curveOpts","Fn","h","cofactor","n","CURVE_ORDER","uvRatio","MASK","BYTES","modP","create","u","v","isValid","value","sqrt","div","e","Gx","Gy","Error","acoord","title","banZero","min","aextpoint","other","Point","toAffineMemo","p","iz","X","Y","Z","is0","inv","zz","assertValidMemo","T","X2","Y2","Z2","Z4","aX2","XY","ZT","constructor","Object","freeze","toAffine","ex","ey","ez","et","points","msm","scalars","_setWindowSize","windowSize","precompute","fromAffine","isLazy","wnaf","createCache","multiply","assertValidity","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","ZERO","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","scalar","f","cached","multiplyUnsafe","acc","unsafe","isSmallOrder","isTorsionFree","invertedZ","clearCofactor","fromBytes","bytes","zip215","fromHex","hex","len","normed","slice","lastByte","max","ORDER","isXOdd","isLastByteOdd","toBytes","length","toRawBytes","toHex","toString","BASE","PrimeEdwardsPoint","ep","_bytes","_hex","assertSame","init","eddsa","cHash","eddsaOpts","adjustScalarBytes","domain","prehash","mapToCurve","randomBytes_","data","ctx","phflag","modN","modN_LE","hash","getPrivateScalar","key","hashed","head","prefix","getExtendedPublicKey","secretKey","point","pointBytes","getPublicKey","hashDomainToScalar","context","Uint8Array","of","msgs","msg","sign","options","r","R","k","s","L","res","verifyOpts","verify","sig","publicKey","undefined","SB","error","RkA","size","lengths","secret","public","signature","seed","randomSecretKey","utils","isValidSecretKey","isValidPublicKey","randomPrivateKey","toMontgomery","is25519","toMontgomeryPriv","privateKey","subarray","keygen","info","type","_eddsa_legacy_opts_to_new","c","nBitLength","_eddsa_new_output_to_legacy","legacy","assign","ExtendedPoint","twistedEdwards","EDDSA"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@noble\\curves\\src\\abstract\\edwards.ts"],"sourcesContent":["/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  abool,\n  abytes,\n  aInRange,\n  bytesToHex,\n  bytesToNumberLE,\n  concatBytes,\n  ensureBytes,\n  memoized,\n  numberToBytesLE,\n  randomBytes,\n  type FHash,\n  type Hex,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type CurveInfo,\n  type CurvePoint,\n  type CurvePointCons,\n} from './curve.ts';\nimport { Field, type IField, type NLength } from './modular.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\nexport type UVRatio = (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n\n// TODO: remove\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  /** @deprecated the property will be removed in next release */\n  hash: FHash; // Hashing\n  randomBytes?: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: UVRatio; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// TODO: remove\nexport type CurveTypeWithLength = Readonly<CurveType & Partial<NLength>>;\n\n/** Instance of Extended Point with coordinates in X, Y, Z, T. */\nexport interface EdwardsPoint extends CurvePoint<bigint, EdwardsPoint> {\n  /** extended X coordinate. Different from affine x. */\n  readonly X: bigint;\n  /** extended Y coordinate. Different from affine y. */\n  readonly Y: bigint;\n  /** extended Z coordinate */\n  readonly Z: bigint;\n  /** extended T coordinate */\n  readonly T: bigint;\n\n  /** @deprecated use `toBytes` */\n  toRawBytes(): Uint8Array;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n  /** @deprecated use .X */\n  readonly ex: bigint;\n  /** @deprecated use .Y */\n  readonly ey: bigint;\n  /** @deprecated use .Z */\n  readonly ez: bigint;\n  /** @deprecated use .T */\n  readonly et: bigint;\n}\n/** Static methods of Extended Point with coordinates in X, Y, Z, T. */\nexport interface EdwardsPointCons extends CurvePointCons<bigint, EdwardsPoint> {\n  new (X: bigint, Y: bigint, Z: bigint, T: bigint): EdwardsPoint;\n  fromBytes(bytes: Uint8Array, zip215?: boolean): EdwardsPoint;\n  fromHex(hex: Hex, zip215?: boolean): EdwardsPoint;\n  /** @deprecated use `import { pippenger } from '@noble/curves/abstract/curve.js';` */\n  msm(points: EdwardsPoint[], scalars: bigint[]): EdwardsPoint;\n}\n/** @deprecated use EdwardsPoint */\nexport type ExtPointType = EdwardsPoint;\n/** @deprecated use EdwardsPointCons */\nexport type ExtPointConstructor = EdwardsPointCons;\n\n/**\n * Twisted Edwards curve options.\n *\n * * a: formula param\n * * d: formula param\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor. h*n is group order; n is subgroup order\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type EdwardsOpts = Readonly<{\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: bigint;\n  d: bigint;\n  Gx: bigint;\n  Gy: bigint;\n}>;\n\n/**\n * Extra curve options for Twisted Edwards.\n *\n * * Fp: redefined Field over curve.p\n * * Fn: redefined Field over curve.n\n * * uvRatio: helper function for decompression, calculating √(u/v)\n */\nexport type EdwardsExtraOpts = Partial<{\n  Fp: IField<bigint>;\n  Fn: IField<bigint>;\n  uvRatio: (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n}>;\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) options.\n *\n * * hash: hash function used to hash secret keys and messages\n * * adjustScalarBytes: clears bits to get valid field element\n * * domain: Used for hashing\n * * mapToCurve: for hash-to-curve standard\n * * prehash: RFC 8032 pre-hashing of messages to sign() / verify()\n * * randomBytes: function generating random bytes, used for randomSecretKey\n */\nexport type EdDSAOpts = Partial<{\n  adjustScalarBytes: (bytes: Uint8Array) => Uint8Array;\n  domain: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  mapToCurve: (scalar: bigint[]) => AffinePoint<bigint>;\n  prehash: FHash;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n}>;\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) interface.\n *\n * Allows to create and verify signatures, create public and secret keys.\n */\nexport interface EdDSA {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: (secretKey: Hex) => Uint8Array;\n  sign: (message: Hex, secretKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  Point: EdwardsPointCons;\n  utils: {\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n    isValidSecretKey: (secretKey: Uint8Array) => boolean;\n    isValidPublicKey: (publicKey: Uint8Array, zip215?: boolean) => boolean;\n\n    /**\n     * Converts ed public key to x public key.\n     * @example\n     * ```js\n     * const someonesPub = ed25519.getPublicKey(ed25519.utils.randomSecretKey());\n     * const aPriv = x25519.utils.randomSecretKey();\n     * x25519.getSharedSecret(aPriv, ed25519.utils.toMontgomery(someonesPub))\n     * ```\n     */\n    toMontgomery: (publicKey: Uint8Array) => Uint8Array;\n    /**\n     * Converts ed secret key to x secret key.\n     * @example\n     * ```js\n     * const someonesPub = x25519.getPublicKey(x25519.utils.randomSecretKey());\n     * const aPriv = ed25519.utils.randomSecretKey();\n     * x25519.getSharedSecret(ed25519.utils.toMontgomeryPriv(aPriv), someonesPub)\n     * ```\n     */\n    toMontgomeryPriv: (privateKey: Uint8Array) => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: EdwardsPoint;\n      pointBytes: Uint8Array;\n    };\n\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `point.precompute()` */\n    precompute: (windowSize?: number, point?: EdwardsPoint) => EdwardsPoint;\n  };\n  info: CurveInfo;\n}\n\n// Legacy params. TODO: remove\nexport type CurveFn = {\n  /** @deprecated the property will be removed in next release */\n  CURVE: CurveType;\n  keygen: EdDSA['keygen'];\n  getPublicKey: EdDSA['getPublicKey'];\n  sign: EdDSA['sign'];\n  verify: EdDSA['verify'];\n  Point: EdwardsPointCons;\n  /** @deprecated use `Point` */\n  ExtendedPoint: EdwardsPointCons;\n  utils: EdDSA['utils'];\n  info: CurveInfo;\n};\n\nfunction isEdValidXY(Fp: IField<bigint>, CURVE: EdwardsOpts, x: bigint, y: bigint): boolean {\n  const x2 = Fp.sqr(x);\n  const y2 = Fp.sqr(y);\n  const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n  const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n  return Fp.eql(left, right);\n}\n\nexport function edwards(CURVE: EdwardsOpts, curveOpts: EdwardsExtraOpts = {}): EdwardsPointCons {\n  const { Fp, Fn } = _createCurveFields('edwards', CURVE, curveOpts);\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(curveOpts, {}, { uvRatio: 'function' });\n\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << (BigInt(Fn.BYTES * 8) - _1n);\n  const modP = (n: bigint) => Fp.create(n); // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    curveOpts.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(Fp.div(u, v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n\n  // Validate whether the passed curve params are valid.\n  // equation ax² + y² = 1 + dx²y² should work for generator point.\n  if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy))\n    throw new Error('bad curve params: generator point');\n\n  /**\n   * Asserts coordinate is valid: 0 <= n < MASK.\n   * Coordinates >= Fp.ORDER are allowed for zip215.\n   */\n  function acoord(title: string, n: bigint, banZero = false) {\n    const min = banZero ? _1n : _0n;\n    aInRange('coordinate ' + title, n, min, MASK);\n    return n;\n  }\n\n  function aextpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p: Point, iz?: bigint): AffinePoint<bigint> => {\n    const { X, Y, Z } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : (Fp.inv(Z) as bigint); // 8 was chosen arbitrarily\n    const x = modP(X * iz);\n    const y = modP(Y * iz);\n    const zz = Fp.mul(Z, iz);\n    if (is0) return { x: _0n, y: _1n };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return { x, y };\n  });\n  const assertValidMemo = memoized((p: Point) => {\n    const { a, d } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const { X, Y, Z, T } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n\n  // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements EdwardsPoint {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    // fields\n    static readonly Fp = Fp;\n    static readonly Fn = Fn;\n\n    readonly X: bigint;\n    readonly Y: bigint;\n    readonly Z: bigint;\n    readonly T: bigint;\n\n    constructor(X: bigint, Y: bigint, Z: bigint, T: bigint) {\n      this.X = acoord('x', X);\n      this.Y = acoord('y', Y);\n      this.Z = acoord('z', Z, true);\n      this.T = acoord('t', T);\n      Object.freeze(this);\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    // TODO: remove\n    get ex(): bigint {\n      return this.X;\n    }\n    get ey(): bigint {\n      return this.Y;\n    }\n    get ez(): bigint {\n      return this.Z;\n    }\n    get et(): bigint {\n      return this.T;\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, points);\n    }\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      acoord('x', x);\n      acoord('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n\n    precompute(windowSize: number = 8, isLazy = true) {\n      wnaf.createCache(this, windowSize);\n      if (!isLazy) this.multiply(_2n); // random number\n      return this;\n    }\n\n    // Useful in fromAffine() - not for fromBytes(), which always created valid points.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      aextpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.X), this.Y, this.Z, modP(-this.T));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      aextpoint(other);\n      const { a, d } = CURVE;\n      const { X: X1, Y: Y1, Z: Z1, T: T1 } = this;\n      const { X: X2, Y: Y2, Z: Z2, T: T2 } = other;\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const n = scalar;\n      aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const { p, f } = wnaf.cached(this, n, (p) => normalizeZ(Point, p));\n      return normalizeZ(Point, [p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar: bigint, acc = Point.ZERO): Point {\n      const n = scalar;\n      aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return Point.ZERO;\n      if (this.is0() || n === _1n) return this;\n      return wnaf.unsafe(this, n, (p) => normalizeZ(Point, p), acc);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(invertedZ?: bigint): AffinePoint<bigint> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    clearCofactor(): Point {\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    static fromBytes(bytes: Uint8Array, zip215 = false): Point {\n      abytes(bytes);\n      return Point.fromHex(bytes, zip215);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = bytesToNumberLE(normed);\n\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      aInRange('pointHex.y', y, _0n, max);\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    toBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes(): Uint8Array {\n      return this.toBytes();\n    }\n    toHex(): string {\n      return bytesToHex(this.toBytes());\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  const wnaf = new wNAF(Point, Fn.BYTES * 8); // Fn.BITS?\n  return Point;\n}\n\n/**\n * Base class for prime-order points like Ristretto255 and Decaf448.\n * These points eliminate cofactor issues by representing equivalence classes\n * of Edwards curve points.\n */\nexport abstract class PrimeEdwardsPoint<T extends PrimeEdwardsPoint<T>>\n  implements CurvePoint<bigint, T>\n{\n  static BASE: PrimeEdwardsPoint<any>;\n  static ZERO: PrimeEdwardsPoint<any>;\n  static Fp: IField<bigint>;\n  static Fn: IField<bigint>;\n\n  protected readonly ep: EdwardsPoint;\n\n  constructor(ep: EdwardsPoint) {\n    this.ep = ep;\n  }\n\n  // Abstract methods that must be implemented by subclasses\n  abstract toBytes(): Uint8Array;\n  abstract equals(other: T): boolean;\n\n  // Static methods that must be implemented by subclasses\n  static fromBytes(_bytes: Uint8Array): any {\n    throw new Error('fromBytes must be implemented by subclass');\n  }\n\n  static fromHex(_hex: Hex): any {\n    throw new Error('fromHex must be implemented by subclass');\n  }\n\n  get x(): bigint {\n    return this.toAffine().x;\n  }\n  get y(): bigint {\n    return this.toAffine().y;\n  }\n\n  // Common implementations\n  clearCofactor(): T {\n    // no-op for prime-order groups\n    return this as any;\n  }\n\n  assertValidity(): void {\n    this.ep.assertValidity();\n  }\n\n  toAffine(invertedZ?: bigint): AffinePoint<bigint> {\n    return this.ep.toAffine(invertedZ);\n  }\n\n  /** @deprecated use `toBytes` */\n  toRawBytes(): Uint8Array {\n    return this.toBytes();\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  isTorsionFree(): boolean {\n    return true;\n  }\n\n  isSmallOrder(): boolean {\n    return false;\n  }\n\n  add(other: T): T {\n    this.assertSame(other);\n    return this.init(this.ep.add(other.ep));\n  }\n\n  subtract(other: T): T {\n    this.assertSame(other);\n    return this.init(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): T {\n    return this.init(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): T {\n    return this.init(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): T {\n    return this.init(this.ep.double());\n  }\n\n  negate(): T {\n    return this.init(this.ep.negate());\n  }\n\n  precompute(windowSize?: number, isLazy?: boolean): T {\n    return this.init(this.ep.precompute(windowSize, isLazy));\n  }\n\n  // Helper methods\n  abstract is0(): boolean;\n  protected abstract assertSame(other: T): void;\n  protected abstract init(ep: EdwardsPoint): T;\n}\n\n/**\n * Initializes EdDSA signatures over given Edwards curve.\n */\nexport function eddsa(Point: EdwardsPointCons, cHash: FHash, eddsaOpts: EdDSAOpts): EdDSA {\n  if (typeof cHash !== 'function') throw new Error('\"hash\" function param is required');\n  _validateObject(\n    eddsaOpts,\n    {},\n    {\n      adjustScalarBytes: 'function',\n      randomBytes: 'function',\n      domain: 'function',\n      prehash: 'function',\n      mapToCurve: 'function',\n    }\n  );\n\n  const { prehash } = eddsaOpts;\n  const { BASE: G, Fp, Fn } = Point;\n  const CURVE_ORDER = Fn.ORDER;\n\n  const randomBytes_ = eddsaOpts.randomBytes || randomBytes;\n  const adjustScalarBytes = eddsaOpts.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    eddsaOpts.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      abool('phflag', phflag);\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n\n  function modN(a: bigint) {\n    return Fn.create(a);\n  }\n\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    // Not using Fn.fromBytes: hash can be 2*Fn.BYTES\n    return modN(bytesToNumberLE(hash));\n  }\n\n  // Get the hashed private scalar per RFC8032 5.1.5\n  function getPrivateScalar(key: Hex) {\n    const len = Fp.BYTES;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    return { head, prefix, scalar };\n  }\n\n  /** Convenience method that creates public key from scalar. RFC8032 5.1.5 */\n  function getExtendedPublicKey(secretKey: Hex) {\n    const { head, prefix, scalar } = getPrivateScalar(secretKey);\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toBytes();\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  /** Calculates EdDSA pub key. RFC8032 5.1.5. */\n  function getPublicKey(secretKey: Hex): Uint8Array {\n    return getExtendedPublicKey(secretKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = Uint8Array.of(), ...msgs: Uint8Array[]) {\n    const msg = concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, secretKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(secretKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const L = Fp.BYTES;\n    const res = concatBytes(R, numberToBytesLE(s, L));\n    return ensureBytes('result', res, L * 2); // 64-byte signature\n  }\n\n  // verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\n  const verifyOpts: { context?: Hex; zip215?: boolean } = { zip215: true };\n\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    publicKey = ensureBytes('publicKey', publicKey, len);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = bytesToNumberLE(sig.slice(len, 2 * len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().is0();\n  }\n\n  G.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const size = Fp.BYTES;\n  const lengths = {\n    secret: size,\n    public: size,\n    signature: 2 * size,\n    seed: size,\n  };\n  function randomSecretKey(seed = randomBytes_!(lengths.seed)): Uint8Array {\n    return seed;\n  }\n\n  const utils = {\n    getExtendedPublicKey,\n    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */\n    randomSecretKey,\n\n    isValidSecretKey,\n    isValidPublicKey,\n\n    randomPrivateKey: randomSecretKey,\n\n    /**\n     * Converts ed public key to x public key. Uses formula:\n     * - ed25519:\n     *   - `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n     *   - `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n     * - ed448:\n     *   - `(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)`\n     *   - `(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))`\n     *\n     * There is NO `fromMontgomery`:\n     * - There are 2 valid ed25519 points for every x25519, with flipped coordinate\n     * - Sometimes there are 0 valid ed25519 points, because x25519 *additionally*\n     *   accepts inputs on the quadratic twist, which can't be moved to ed25519\n     */\n    toMontgomery(publicKey: Uint8Array): Uint8Array {\n      const { y } = Point.fromBytes(publicKey);\n      const is25519 = size === 32;\n      if (!is25519 && size !== 57) throw new Error('only defined for 25519 and 448');\n      const u = is25519 ? Fp.div(_1n + y, _1n - y) : Fp.div(y - _1n, y + _1n);\n      return Fp.toBytes(u);\n    },\n\n    toMontgomeryPriv(privateKey: Uint8Array): Uint8Array {\n      abytes(privateKey, size);\n      const hashed = cHash(privateKey.subarray(0, size));\n      return adjustScalarBytes(hashed).subarray(0, size);\n    },\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point: EdwardsPoint = Point.BASE): EdwardsPoint {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  function keygen(seed?: Uint8Array) {\n    const secretKey = utils.randomSecretKey(seed);\n    return { secretKey, publicKey: getPublicKey(secretKey) };\n  }\n\n  function isValidSecretKey(key: Uint8Array): boolean {\n    try {\n      return !!Fn.fromBytes(key, false);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  function isValidPublicKey(key: Uint8Array, zip215?: boolean): boolean {\n    try {\n      return !!Point.fromBytes(key, zip215);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  return Object.freeze({\n    keygen,\n    getPublicKey,\n    sign,\n    verify,\n    utils,\n    Point,\n    info: { type: 'edwards' as const, lengths },\n  });\n}\n\n// TODO: remove\nexport type EdComposed = {\n  CURVE: EdwardsOpts;\n  curveOpts: EdwardsExtraOpts;\n  hash: FHash;\n  eddsaOpts: EdDSAOpts;\n};\n// TODO: remove\nfunction _eddsa_legacy_opts_to_new(c: CurveTypeWithLength): EdComposed {\n  const CURVE: EdwardsOpts = {\n    a: c.a,\n    d: c.d,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  const Fn = Field(CURVE.n, c.nBitLength, true);\n  const curveOpts: EdwardsExtraOpts = { Fp, Fn, uvRatio: c.uvRatio };\n  const eddsaOpts: EdDSAOpts = {\n    randomBytes: c.randomBytes,\n    adjustScalarBytes: c.adjustScalarBytes,\n    domain: c.domain,\n    prehash: c.prehash,\n    mapToCurve: c.mapToCurve,\n  };\n  return { CURVE, curveOpts, hash: c.hash, eddsaOpts };\n}\n// TODO: remove\nfunction _eddsa_new_output_to_legacy(c: CurveTypeWithLength, eddsa: EdDSA): CurveFn {\n  const legacy = Object.assign({}, eddsa, { ExtendedPoint: eddsa.Point, CURVE: c });\n  return legacy;\n}\n// TODO: remove. Use eddsa\nexport function twistedEdwards(c: CurveTypeWithLength): CurveFn {\n  const { CURVE, curveOpts, hash, eddsaOpts } = _eddsa_legacy_opts_to_new(c);\n  const Point = edwards(CURVE, curveOpts);\n  const EDDSA = eddsa(Point, hash, eddsaOpts);\n  return _eddsa_new_output_to_legacy(c, EDDSA);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
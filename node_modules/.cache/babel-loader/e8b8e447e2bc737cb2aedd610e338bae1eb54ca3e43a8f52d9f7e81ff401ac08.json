{"ast":null,"code":"import { bcs } from \"@mysten/sui/bcs\";\nimport { Transaction } from \"@mysten/sui/transactions\";\nimport { fromBase64, toBase64 } from \"@mysten/sui/utils\";\nasync function signAndExecuteTransaction(wallet, input) {\n  if (wallet.features[\"sui:signAndExecuteTransaction\"]) {\n    return wallet.features[\"sui:signAndExecuteTransaction\"].signAndExecuteTransaction(input);\n  }\n  if (!wallet.features[\"sui:signAndExecuteTransactionBlock\"]) {\n    throw new Error(`Provided wallet (${wallet.name}) does not support the signAndExecuteTransaction feature.`);\n  }\n  const {\n    signAndExecuteTransactionBlock\n  } = wallet.features[\"sui:signAndExecuteTransactionBlock\"];\n  const transactionBlock = Transaction.from(await input.transaction.toJSON());\n  const {\n    digest,\n    rawEffects,\n    rawTransaction\n  } = await signAndExecuteTransactionBlock({\n    account: input.account,\n    chain: input.chain,\n    transactionBlock,\n    options: {\n      showRawEffects: true,\n      showRawInput: true\n    }\n  });\n  const [{\n    txSignatures: [signature],\n    intentMessage: {\n      value: bcsTransaction\n    }\n  }] = bcs.SenderSignedData.parse(fromBase64(rawTransaction));\n  const bytes = bcs.TransactionData.serialize(bcsTransaction).toBase64();\n  return {\n    digest,\n    signature,\n    bytes,\n    effects: toBase64(new Uint8Array(rawEffects))\n  };\n}\nasync function signTransaction(wallet, input) {\n  if (wallet.features[\"sui:signTransaction\"]) {\n    return wallet.features[\"sui:signTransaction\"].signTransaction(input);\n  }\n  if (!wallet.features[\"sui:signTransactionBlock\"]) {\n    throw new Error(`Provided wallet (${wallet.name}) does not support the signTransaction feature.`);\n  }\n  const {\n    signTransactionBlock\n  } = wallet.features[\"sui:signTransactionBlock\"];\n  const transaction = Transaction.from(await input.transaction.toJSON());\n  const {\n    transactionBlockBytes,\n    signature\n  } = await signTransactionBlock({\n    transactionBlock: transaction,\n    account: input.account,\n    chain: input.chain\n  });\n  return {\n    bytes: transactionBlockBytes,\n    signature\n  };\n}\nexport { signAndExecuteTransaction, signTransaction };","map":{"version":3,"names":["bcs","Transaction","fromBase64","toBase64","signAndExecuteTransaction","wallet","input","features","Error","name","signAndExecuteTransactionBlock","transactionBlock","from","transaction","toJSON","digest","rawEffects","rawTransaction","account","chain","options","showRawEffects","showRawInput","txSignatures","signature","intentMessage","value","bcsTransaction","SenderSignedData","parse","bytes","TransactionData","serialize","effects","Uint8Array","signTransaction","signTransactionBlock","transactionBlockBytes"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\wallet-standard\\src\\wallet.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport { Transaction } from '@mysten/sui/transactions';\nimport { fromBase64, toBase64 } from '@mysten/sui/utils';\nimport type { WalletWithFeatures } from '@wallet-standard/core';\n\nimport type {\n\tSuiSignAndExecuteTransactionInput,\n\tSuiSignTransactionInput,\n\tSuiWalletFeatures,\n} from './features/index.js';\n\ndeclare module '@wallet-standard/core' {\n\texport interface Wallet {\n\t\t/**\n\t\t * Unique identifier of the Wallet.\n\t\t *\n\t\t * If not provided, the wallet name will be used as the identifier.\n\t\t */\n\t\treadonly id?: string;\n\t}\n\n\texport interface StandardConnectOutput {\n\t\tsupportedIntents?: string[];\n\t}\n}\n\nexport type { Wallet } from '@wallet-standard/core';\n\nexport async function signAndExecuteTransaction(\n\twallet: WalletWithFeatures<Partial<SuiWalletFeatures>>,\n\tinput: SuiSignAndExecuteTransactionInput,\n) {\n\tif (wallet.features['sui:signAndExecuteTransaction']) {\n\t\treturn wallet.features['sui:signAndExecuteTransaction'].signAndExecuteTransaction(input);\n\t}\n\n\tif (!wallet.features['sui:signAndExecuteTransactionBlock']) {\n\t\tthrow new Error(\n\t\t\t`Provided wallet (${wallet.name}) does not support the signAndExecuteTransaction feature.`,\n\t\t);\n\t}\n\n\tconst { signAndExecuteTransactionBlock } = wallet.features['sui:signAndExecuteTransactionBlock'];\n\n\tconst transactionBlock = Transaction.from(await input.transaction.toJSON());\n\tconst { digest, rawEffects, rawTransaction } = await signAndExecuteTransactionBlock({\n\t\taccount: input.account,\n\t\tchain: input.chain,\n\t\ttransactionBlock,\n\t\toptions: {\n\t\t\tshowRawEffects: true,\n\t\t\tshowRawInput: true,\n\t\t},\n\t});\n\n\tconst [\n\t\t{\n\t\t\ttxSignatures: [signature],\n\t\t\tintentMessage: { value: bcsTransaction },\n\t\t},\n\t] = bcs.SenderSignedData.parse(fromBase64(rawTransaction!));\n\n\tconst bytes = bcs.TransactionData.serialize(bcsTransaction).toBase64();\n\n\treturn {\n\t\tdigest,\n\t\tsignature,\n\t\tbytes,\n\t\teffects: toBase64(new Uint8Array(rawEffects!)),\n\t};\n}\n\nexport async function signTransaction(\n\twallet: WalletWithFeatures<Partial<SuiWalletFeatures>>,\n\tinput: SuiSignTransactionInput,\n) {\n\tif (wallet.features['sui:signTransaction']) {\n\t\treturn wallet.features['sui:signTransaction'].signTransaction(input);\n\t}\n\n\tif (!wallet.features['sui:signTransactionBlock']) {\n\t\tthrow new Error(\n\t\t\t`Provided wallet (${wallet.name}) does not support the signTransaction feature.`,\n\t\t);\n\t}\n\n\tconst { signTransactionBlock } = wallet.features['sui:signTransactionBlock'];\n\n\tconst transaction = Transaction.from(await input.transaction.toJSON());\n\tconst { transactionBlockBytes, signature } = await signTransactionBlock({\n\t\ttransactionBlock: transaction,\n\t\taccount: input.account,\n\t\tchain: input.chain,\n\t});\n\n\treturn { bytes: transactionBlockBytes, signature };\n}\n"],"mappings":"AAGA,SAASA,GAAA,QAAW;AACpB,SAASC,WAAA,QAAmB;AAC5B,SAASC,UAAA,EAAYC,QAAA,QAAgB;AA0BrC,eAAsBC,0BACrBC,MAAA,EACAC,KAAA,EACC;EACD,IAAID,MAAA,CAAOE,QAAA,CAAS,+BAA+B,GAAG;IACrD,OAAOF,MAAA,CAAOE,QAAA,CAAS,+BAA+B,EAAEH,yBAAA,CAA0BE,KAAK;EACxF;EAEA,IAAI,CAACD,MAAA,CAAOE,QAAA,CAAS,oCAAoC,GAAG;IAC3D,MAAM,IAAIC,KAAA,CACT,oBAAoBH,MAAA,CAAOI,IAAI,2DAChC;EACD;EAEA,MAAM;IAAEC;EAA+B,IAAIL,MAAA,CAAOE,QAAA,CAAS,oCAAoC;EAE/F,MAAMI,gBAAA,GAAmBV,WAAA,CAAYW,IAAA,CAAK,MAAMN,KAAA,CAAMO,WAAA,CAAYC,MAAA,CAAO,CAAC;EAC1E,MAAM;IAAEC,MAAA;IAAQC,UAAA;IAAYC;EAAe,IAAI,MAAMP,8BAAA,CAA+B;IACnFQ,OAAA,EAASZ,KAAA,CAAMY,OAAA;IACfC,KAAA,EAAOb,KAAA,CAAMa,KAAA;IACbR,gBAAA;IACAS,OAAA,EAAS;MACRC,cAAA,EAAgB;MAChBC,YAAA,EAAc;IACf;EACD,CAAC;EAED,MAAM,CACL;IACCC,YAAA,EAAc,CAACC,SAAS;IACxBC,aAAA,EAAe;MAAEC,KAAA,EAAOC;IAAe;EACxC,EACD,GAAI3B,GAAA,CAAI4B,gBAAA,CAAiBC,KAAA,CAAM3B,UAAA,CAAWe,cAAe,CAAC;EAE1D,MAAMa,KAAA,GAAQ9B,GAAA,CAAI+B,eAAA,CAAgBC,SAAA,CAAUL,cAAc,EAAExB,QAAA,CAAS;EAErE,OAAO;IACNY,MAAA;IACAS,SAAA;IACAM,KAAA;IACAG,OAAA,EAAS9B,QAAA,CAAS,IAAI+B,UAAA,CAAWlB,UAAW,CAAC;EAC9C;AACD;AAEA,eAAsBmB,gBACrB9B,MAAA,EACAC,KAAA,EACC;EACD,IAAID,MAAA,CAAOE,QAAA,CAAS,qBAAqB,GAAG;IAC3C,OAAOF,MAAA,CAAOE,QAAA,CAAS,qBAAqB,EAAE4B,eAAA,CAAgB7B,KAAK;EACpE;EAEA,IAAI,CAACD,MAAA,CAAOE,QAAA,CAAS,0BAA0B,GAAG;IACjD,MAAM,IAAIC,KAAA,CACT,oBAAoBH,MAAA,CAAOI,IAAI,iDAChC;EACD;EAEA,MAAM;IAAE2B;EAAqB,IAAI/B,MAAA,CAAOE,QAAA,CAAS,0BAA0B;EAE3E,MAAMM,WAAA,GAAcZ,WAAA,CAAYW,IAAA,CAAK,MAAMN,KAAA,CAAMO,WAAA,CAAYC,MAAA,CAAO,CAAC;EACrE,MAAM;IAAEuB,qBAAA;IAAuBb;EAAU,IAAI,MAAMY,oBAAA,CAAqB;IACvEzB,gBAAA,EAAkBE,WAAA;IAClBK,OAAA,EAASZ,KAAA,CAAMY,OAAA;IACfC,KAAA,EAAOb,KAAA,CAAMa;EACd,CAAC;EAED,OAAO;IAAEW,KAAA,EAAOO,qBAAA;IAAuBb;EAAU;AAClD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
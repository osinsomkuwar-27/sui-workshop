{"ast":null,"code":"import { toHex } from \"@mysten/bcs\";\nimport { mnemonicToSeedSync as bip39MnemonicToSeedSync } from \"@scure/bip39\";\nfunction isValidHardenedPath(path) {\n  if (!new RegExp(\"^m\\\\/44'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+'\\\\/[0-9]+'+$\").test(path)) {\n    return false;\n  }\n  return true;\n}\nfunction isValidBIP32Path(path) {\n  if (!new RegExp(\"^m\\\\/(54|74)'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+\\\\/[0-9]+$\").test(path)) {\n    return false;\n  }\n  return true;\n}\nfunction mnemonicToSeed(mnemonics) {\n  return bip39MnemonicToSeedSync(mnemonics, \"\");\n}\nfunction mnemonicToSeedHex(mnemonics) {\n  return toHex(mnemonicToSeed(mnemonics));\n}\nexport { isValidBIP32Path, isValidHardenedPath, mnemonicToSeed, mnemonicToSeedHex };","map":{"version":3,"names":["toHex","mnemonicToSeedSync","bip39MnemonicToSeedSync","isValidHardenedPath","path","RegExp","test","isValidBIP32Path","mnemonicToSeed","mnemonics","mnemonicToSeedHex"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\cryptography\\mnemonics.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { toHex } from '@mysten/bcs';\nimport { mnemonicToSeedSync as bip39MnemonicToSeedSync } from '@scure/bip39';\n\n/**\n * Parse and validate a path that is compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\n *\n * @param path path string (e.g. `m/44'/784'/0'/0'/0'`).\n */\nexport function isValidHardenedPath(path: string): boolean {\n\tif (!new RegExp(\"^m\\\\/44'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+'\\\\/[0-9]+'+$\").test(path)) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Parse and validate a path that is compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}\n * for Secp256k1 and m/74'/784'/{account_index}'/{change_index}/{address_index} for Secp256r1.\n *\n * Note that the purpose for Secp256k1 is registered as 54, to differentiate from Ed25519 with purpose 44.\n *\n * @param path path string (e.g. `m/54'/784'/0'/0/0`).\n */\nexport function isValidBIP32Path(path: string): boolean {\n\tif (!new RegExp(\"^m\\\\/(54|74)'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+\\\\/[0-9]+$\").test(path)) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Uses KDF to derive 64 bytes of key data from mnemonic with empty password.\n *\n * @param mnemonics 12 words string split by spaces.\n */\nexport function mnemonicToSeed(mnemonics: string): Uint8Array {\n\treturn bip39MnemonicToSeedSync(mnemonics, '');\n}\n\n/**\n * Derive the seed in hex format from a 12-word mnemonic string.\n *\n * @param mnemonics 12 words string split by spaces.\n */\nexport function mnemonicToSeedHex(mnemonics: string): string {\n\treturn toHex(mnemonicToSeed(mnemonics));\n}\n"],"mappings":"AAEA,SAASA,KAAA,QAAa;AACtB,SAASC,kBAAA,IAAsBC,uBAAA,QAA+B;AAOvD,SAASC,oBAAoBC,IAAA,EAAuB;EAC1D,IAAI,CAAC,IAAIC,MAAA,CAAO,iDAAiD,EAAEC,IAAA,CAAKF,IAAI,GAAG;IAC9E,OAAO;EACR;EACA,OAAO;AACR;AAUO,SAASG,iBAAiBH,IAAA,EAAuB;EACvD,IAAI,CAAC,IAAIC,MAAA,CAAO,mDAAmD,EAAEC,IAAA,CAAKF,IAAI,GAAG;IAChF,OAAO;EACR;EACA,OAAO;AACR;AAOO,SAASI,eAAeC,SAAA,EAA+B;EAC7D,OAAOP,uBAAA,CAAwBO,SAAA,EAAW,EAAE;AAC7C;AAOO,SAASC,kBAAkBD,SAAA,EAA2B;EAC5D,OAAOT,KAAA,CAAMQ,cAAA,CAAeC,SAAS,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
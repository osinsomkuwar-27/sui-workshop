{"ast":null,"code":"class InvalidTokenError extends Error {}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n  return decodeURIComponent(atob(str).replace(/(.)/g, (_m, p) => {\n    let code = p.charCodeAt(0).toString(16).toUpperCase();\n    if (code.length < 2) {\n      code = \"0\" + code;\n    }\n    return \"%\" + code;\n  }));\n}\nfunction base64UrlDecode(str) {\n  let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  switch (output.length % 4) {\n    case 0:\n      break;\n    case 2:\n      output += \"==\";\n      break;\n    case 3:\n      output += \"=\";\n      break;\n    default:\n      throw new Error(\"base64 string is not of the correct length\");\n  }\n  try {\n    return b64DecodeUnicode(output);\n  } catch (err) {\n    return atob(output);\n  }\n}\nfunction jwtDecode(token, options) {\n  if (typeof token !== \"string\") {\n    throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n  }\n  options || (options = {});\n  const pos = options.header === true ? 0 : 1;\n  const part = token.split(\".\")[pos];\n  if (typeof part !== \"string\") {\n    throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n  }\n  let decoded;\n  try {\n    decoded = base64UrlDecode(part);\n  } catch (e) {\n    throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n  }\n  try {\n    return JSON.parse(decoded);\n  } catch (e) {\n    throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n  }\n}\nexport { InvalidTokenError, jwtDecode };","map":{"version":3,"names":["InvalidTokenError","Error","prototype","name","b64DecodeUnicode","str","decodeURIComponent","atob","replace","_m","p","code","charCodeAt","toString","toUpperCase","length","base64UrlDecode","output","err","jwtDecode","token","options","pos","header","part","split","decoded","e","message","JSON","parse"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\zklogin\\jwt-decode.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/** Copied from https://github.com/auth0/jwt-decode/blob/3d372e9875ff673228a9f2d9df74e84690842a9c/lib/index.ts */\n\n/**\nThe MIT License (MIT)\n\nCopyright (c) 2015 Auth0, Inc. <support@auth0.com> (http://auth0.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\n\nexport interface JwtDecodeOptions {\n\theader?: boolean;\n}\n\nexport interface JwtHeader {\n\ttyp?: string;\n\talg?: string;\n\tkid?: string;\n}\n\nexport interface JwtPayload {\n\tiss?: string;\n\tsub?: string;\n\taud?: string[] | string;\n\texp?: number;\n\tnbf?: number;\n\tiat?: number;\n\tjti?: string;\n}\n\nexport class InvalidTokenError extends Error {}\n\nInvalidTokenError.prototype.name = 'InvalidTokenError';\n\nfunction b64DecodeUnicode(str: string) {\n\treturn decodeURIComponent(\n\t\tatob(str).replace(/(.)/g, (_m, p) => {\n\t\t\tlet code = (p as string).charCodeAt(0).toString(16).toUpperCase();\n\t\t\tif (code.length < 2) {\n\t\t\t\tcode = '0' + code;\n\t\t\t}\n\t\t\treturn '%' + code;\n\t\t}),\n\t);\n}\n\nfunction base64UrlDecode(str: string) {\n\tlet output = str.replace(/-/g, '+').replace(/_/g, '/');\n\tswitch (output.length % 4) {\n\t\tcase 0:\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\toutput += '==';\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\toutput += '=';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('base64 string is not of the correct length');\n\t}\n\n\ttry {\n\t\treturn b64DecodeUnicode(output);\n\t} catch (err) {\n\t\treturn atob(output);\n\t}\n}\n\nexport function jwtDecode<T = JwtHeader>(\n\ttoken: string,\n\toptions: JwtDecodeOptions & { header: true },\n): T;\nexport function jwtDecode<T = JwtPayload>(token: string, options?: JwtDecodeOptions): T;\nexport function jwtDecode<T = JwtHeader | JwtPayload>(\n\ttoken: string,\n\toptions?: JwtDecodeOptions,\n): T {\n\tif (typeof token !== 'string') {\n\t\tthrow new InvalidTokenError('Invalid token specified: must be a string');\n\t}\n\n\toptions ||= {};\n\n\tconst pos = options.header === true ? 0 : 1;\n\tconst part = token.split('.')[pos];\n\n\tif (typeof part !== 'string') {\n\t\tthrow new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n\t}\n\n\tlet decoded: string;\n\ttry {\n\t\tdecoded = base64UrlDecode(part);\n\t} catch (e) {\n\t\tthrow new InvalidTokenError(\n\t\t\t`Invalid token specified: invalid base64 for part #${pos + 1} (${(e as Error).message})`,\n\t\t);\n\t}\n\n\ttry {\n\t\treturn JSON.parse(decoded) as T;\n\t} catch (e) {\n\t\tthrow new InvalidTokenError(\n\t\t\t`Invalid token specified: invalid json for part #${pos + 1} (${(e as Error).message})`,\n\t\t);\n\t}\n}\n"],"mappings":"AAiDO,MAAMA,iBAAA,SAA0BC,KAAA,CAAM;AAE7CD,iBAAA,CAAkBE,SAAA,CAAUC,IAAA,GAAO;AAEnC,SAASC,iBAAiBC,GAAA,EAAa;EACtC,OAAOC,kBAAA,CACNC,IAAA,CAAKF,GAAG,EAAEG,OAAA,CAAQ,QAAQ,CAACC,EAAA,EAAIC,CAAA,KAAM;IACpC,IAAIC,IAAA,GAAQD,CAAA,CAAaE,UAAA,CAAW,CAAC,EAAEC,QAAA,CAAS,EAAE,EAAEC,WAAA,CAAY;IAChE,IAAIH,IAAA,CAAKI,MAAA,GAAS,GAAG;MACpBJ,IAAA,GAAO,MAAMA,IAAA;IACd;IACA,OAAO,MAAMA,IAAA;EACd,CAAC,CACF;AACD;AAEA,SAASK,gBAAgBX,GAAA,EAAa;EACrC,IAAIY,MAAA,GAASZ,GAAA,CAAIG,OAAA,CAAQ,MAAM,GAAG,EAAEA,OAAA,CAAQ,MAAM,GAAG;EACrD,QAAQS,MAAA,CAAOF,MAAA,GAAS;IACvB,KAAK;MACJ;IACD,KAAK;MACJE,MAAA,IAAU;MACV;IACD,KAAK;MACJA,MAAA,IAAU;MACV;IACD;MACC,MAAM,IAAIhB,KAAA,CAAM,4CAA4C;EAC9D;EAEA,IAAI;IACH,OAAOG,gBAAA,CAAiBa,MAAM;EAC/B,SAASC,GAAA,EAAK;IACb,OAAOX,IAAA,CAAKU,MAAM;EACnB;AACD;AAOO,SAASE,UACfC,KAAA,EACAC,OAAA,EACI;EACJ,IAAI,OAAOD,KAAA,KAAU,UAAU;IAC9B,MAAM,IAAIpB,iBAAA,CAAkB,2CAA2C;EACxE;EAEAqB,OAAA,KAAAA,OAAA,GAAY,CAAC;EAEb,MAAMC,GAAA,GAAMD,OAAA,CAAQE,MAAA,KAAW,OAAO,IAAI;EAC1C,MAAMC,IAAA,GAAOJ,KAAA,CAAMK,KAAA,CAAM,GAAG,EAAEH,GAAG;EAEjC,IAAI,OAAOE,IAAA,KAAS,UAAU;IAC7B,MAAM,IAAIxB,iBAAA,CAAkB,0CAA0CsB,GAAA,GAAM,CAAC,EAAE;EAChF;EAEA,IAAII,OAAA;EACJ,IAAI;IACHA,OAAA,GAAUV,eAAA,CAAgBQ,IAAI;EAC/B,SAASG,CAAA,EAAG;IACX,MAAM,IAAI3B,iBAAA,CACT,qDAAqDsB,GAAA,GAAM,CAAC,KAAMK,CAAA,CAAYC,OAAO,GACtF;EACD;EAEA,IAAI;IACH,OAAOC,IAAA,CAAKC,KAAA,CAAMJ,OAAO;EAC1B,SAASC,CAAA,EAAG;IACX,MAAM,IAAI3B,iBAAA,CACT,mDAAmDsB,GAAA,GAAM,CAAC,KAAMK,CAAA,CAAYC,OAAO,GACpF;EACD;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
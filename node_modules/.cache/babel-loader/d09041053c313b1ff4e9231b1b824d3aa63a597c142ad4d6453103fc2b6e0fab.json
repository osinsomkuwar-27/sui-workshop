{"ast":null,"code":"import { fromBase58, toBase58 } from \"./b58.js\";\nimport { fromBase64, toBase64 } from \"./b64.js\";\nimport { fromHex, toHex } from \"./hex.js\";\nfunction encodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return toBase58(data);\n    case \"base64\":\n      return toBase64(data);\n    case \"hex\":\n      return toHex(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction decodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return fromBase58(data);\n    case \"base64\":\n      return fromBase64(data);\n    case \"hex\":\n      return fromHex(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction splitGenericParameters(str, genericSeparators = [\"<\", \">\"]) {\n  const [left, right] = genericSeparators;\n  const tok = [];\n  let word = \"\";\n  let nestedAngleBrackets = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === left) {\n      nestedAngleBrackets++;\n    }\n    if (char === right) {\n      nestedAngleBrackets--;\n    }\n    if (nestedAngleBrackets === 0 && char === \",\") {\n      tok.push(word.trim());\n      word = \"\";\n      continue;\n    }\n    word += char;\n  }\n  tok.push(word.trim());\n  return tok;\n}\nexport { decodeStr, encodeStr, splitGenericParameters };","map":{"version":3,"names":["fromBase58","toBase58","fromBase64","toBase64","fromHex","toHex","encodeStr","data","encoding","Error","decodeStr","splitGenericParameters","str","genericSeparators","left","right","tok","word","nestedAngleBrackets","i","length","char","push","trim"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\bcs\\src\\utils.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase58, toBase58 } from './b58.js';\nimport { fromBase64, toBase64 } from './b64.js';\nimport { fromHex, toHex } from './hex.js';\nimport type { Encoding } from './types.js';\n\n/**\n * Encode data with either `hex` or `base64`.\n *\n * @param {Uint8Array} data Data to encode.\n * @param {String} encoding Encoding to use: base64 or hex\n * @return {String} Encoded value.\n */\nexport function encodeStr(data: Uint8Array, encoding: Encoding): string {\n\tswitch (encoding) {\n\t\tcase 'base58':\n\t\t\treturn toBase58(data);\n\t\tcase 'base64':\n\t\t\treturn toBase64(data);\n\t\tcase 'hex':\n\t\t\treturn toHex(data);\n\t\tdefault:\n\t\t\tthrow new Error('Unsupported encoding, supported values are: base64, hex');\n\t}\n}\n\n/**\n * Decode either `base64` or `hex` data.\n *\n * @param {String} data Data to encode.\n * @param {String} encoding Encoding to use: base64 or hex\n * @return {Uint8Array} Encoded value.\n */\nexport function decodeStr(data: string, encoding: Encoding): Uint8Array {\n\tswitch (encoding) {\n\t\tcase 'base58':\n\t\t\treturn fromBase58(data);\n\t\tcase 'base64':\n\t\t\treturn fromBase64(data);\n\t\tcase 'hex':\n\t\t\treturn fromHex(data);\n\t\tdefault:\n\t\t\tthrow new Error('Unsupported encoding, supported values are: base64, hex');\n\t}\n}\n\nexport function splitGenericParameters(\n\tstr: string,\n\tgenericSeparators: [string, string] = ['<', '>'],\n) {\n\tconst [left, right] = genericSeparators;\n\tconst tok = [];\n\tlet word = '';\n\tlet nestedAngleBrackets = 0;\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tconst char = str[i];\n\t\tif (char === left) {\n\t\t\tnestedAngleBrackets++;\n\t\t}\n\t\tif (char === right) {\n\t\t\tnestedAngleBrackets--;\n\t\t}\n\t\tif (nestedAngleBrackets === 0 && char === ',') {\n\t\t\ttok.push(word.trim());\n\t\t\tword = '';\n\t\t\tcontinue;\n\t\t}\n\t\tword += char;\n\t}\n\n\ttok.push(word.trim());\n\n\treturn tok;\n}\n"],"mappings":"AAGA,SAASA,UAAA,EAAYC,QAAA,QAAgB;AACrC,SAASC,UAAA,EAAYC,QAAA,QAAgB;AACrC,SAASC,OAAA,EAASC,KAAA,QAAa;AAUxB,SAASC,UAAUC,IAAA,EAAkBC,QAAA,EAA4B;EACvE,QAAQA,QAAA;IACP,KAAK;MACJ,OAAOP,QAAA,CAASM,IAAI;IACrB,KAAK;MACJ,OAAOJ,QAAA,CAASI,IAAI;IACrB,KAAK;MACJ,OAAOF,KAAA,CAAME,IAAI;IAClB;MACC,MAAM,IAAIE,KAAA,CAAM,yDAAyD;EAC3E;AACD;AASO,SAASC,UAAUH,IAAA,EAAcC,QAAA,EAAgC;EACvE,QAAQA,QAAA;IACP,KAAK;MACJ,OAAOR,UAAA,CAAWO,IAAI;IACvB,KAAK;MACJ,OAAOL,UAAA,CAAWK,IAAI;IACvB,KAAK;MACJ,OAAOH,OAAA,CAAQG,IAAI;IACpB;MACC,MAAM,IAAIE,KAAA,CAAM,yDAAyD;EAC3E;AACD;AAEO,SAASE,uBACfC,GAAA,EACAC,iBAAA,GAAsC,CAAC,KAAK,GAAG,GAC9C;EACD,MAAM,CAACC,IAAA,EAAMC,KAAK,IAAIF,iBAAA;EACtB,MAAMG,GAAA,GAAM,EAAC;EACb,IAAIC,IAAA,GAAO;EACX,IAAIC,mBAAA,GAAsB;EAE1B,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIP,GAAA,CAAIQ,MAAA,EAAQD,CAAA,IAAK;IACpC,MAAME,IAAA,GAAOT,GAAA,CAAIO,CAAC;IAClB,IAAIE,IAAA,KAASP,IAAA,EAAM;MAClBI,mBAAA;IACD;IACA,IAAIG,IAAA,KAASN,KAAA,EAAO;MACnBG,mBAAA;IACD;IACA,IAAIA,mBAAA,KAAwB,KAAKG,IAAA,KAAS,KAAK;MAC9CL,GAAA,CAAIM,IAAA,CAAKL,IAAA,CAAKM,IAAA,CAAK,CAAC;MACpBN,IAAA,GAAO;MACP;IACD;IACAA,IAAA,IAAQI,IAAA;EACT;EAEAL,GAAA,CAAIM,IAAA,CAAKL,IAAA,CAAKM,IAAA,CAAK,CAAC;EAEpB,OAAOP,GAAA;AACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
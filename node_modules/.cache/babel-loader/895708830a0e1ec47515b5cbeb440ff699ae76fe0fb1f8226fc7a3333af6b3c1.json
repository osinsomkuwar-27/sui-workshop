{"ast":null,"code":"import { blake2b } from \"@noble/hashes/blake2b\";\nfunction hashTypedData(typeTag, data) {\n  const typeTagBytes = Array.from(`${typeTag}::`).map(e => e.charCodeAt(0));\n  const dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n  dataWithTag.set(typeTagBytes);\n  dataWithTag.set(data, typeTagBytes.length);\n  return blake2b(dataWithTag, {\n    dkLen: 32\n  });\n}\nexport { hashTypedData };","map":{"version":3,"names":["blake2b","hashTypedData","typeTag","data","typeTagBytes","Array","from","map","e","charCodeAt","dataWithTag","Uint8Array","length","set","dkLen"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\transactions\\hash.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\n\n/**\n * Generates a Blake2b hash of typed data as a base64 string.\n *\n * @param typeTag type tag (e.g. TransactionData, SenderSignedData)\n * @param data data to hash\n */\nexport function hashTypedData(typeTag: string, data: Uint8Array): Uint8Array {\n\tconst typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n\n\tconst dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n\tdataWithTag.set(typeTagBytes);\n\tdataWithTag.set(data, typeTagBytes.length);\n\n\treturn blake2b(dataWithTag, { dkLen: 32 });\n}\n"],"mappings":"AAGA,SAASA,OAAA,QAAe;AAQjB,SAASC,cAAcC,OAAA,EAAiBC,IAAA,EAA8B;EAC5E,MAAMC,YAAA,GAAeC,KAAA,CAAMC,IAAA,CAAK,GAAGJ,OAAO,IAAI,EAAEK,GAAA,CAAKC,CAAA,IAAMA,CAAA,CAAEC,UAAA,CAAW,CAAC,CAAC;EAE1E,MAAMC,WAAA,GAAc,IAAIC,UAAA,CAAWP,YAAA,CAAaQ,MAAA,GAAST,IAAA,CAAKS,MAAM;EACpEF,WAAA,CAAYG,GAAA,CAAIT,YAAY;EAC5BM,WAAA,CAAYG,GAAA,CAAIV,IAAA,EAAMC,YAAA,CAAaQ,MAAM;EAEzC,OAAOZ,OAAA,CAAQU,WAAA,EAAa;IAAEI,KAAA,EAAO;EAAG,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
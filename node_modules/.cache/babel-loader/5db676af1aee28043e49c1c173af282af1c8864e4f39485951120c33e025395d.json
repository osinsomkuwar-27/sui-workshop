{"ast":null,"code":"import { poseidon1, poseidon2, poseidon3, poseidon4, poseidon5, poseidon6, poseidon7, poseidon8, poseidon9, poseidon10, poseidon11, poseidon12, poseidon13, poseidon14, poseidon15, poseidon16 } from \"poseidon-lite\";\nconst poseidonNumToHashFN = [poseidon1, poseidon2, poseidon3, poseidon4, poseidon5, poseidon6, poseidon7, poseidon8, poseidon9, poseidon10, poseidon11, poseidon12, poseidon13, poseidon14, poseidon15, poseidon16];\nconst BN254_FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617n;\nfunction poseidonHash(inputs) {\n  inputs.forEach(x => {\n    const b = BigInt(x);\n    if (b < 0 || b >= BN254_FIELD_SIZE) {\n      throw new Error(`Element ${b} not in the BN254 field`);\n    }\n  });\n  const hashFN = poseidonNumToHashFN[inputs.length - 1];\n  if (hashFN) {\n    return hashFN(inputs);\n  } else if (inputs.length <= 32) {\n    const hash1 = poseidonHash(inputs.slice(0, 16));\n    const hash2 = poseidonHash(inputs.slice(16));\n    return poseidonHash([hash1, hash2]);\n  } else {\n    throw new Error(`Yet to implement: Unable to hash a vector of length ${inputs.length}`);\n  }\n}\nexport { BN254_FIELD_SIZE, poseidonHash };","map":{"version":3,"names":["poseidon1","poseidon2","poseidon3","poseidon4","poseidon5","poseidon6","poseidon7","poseidon8","poseidon9","poseidon10","poseidon11","poseidon12","poseidon13","poseidon14","poseidon15","poseidon16","poseidonNumToHashFN","BN254_FIELD_SIZE","poseidonHash","inputs","forEach","x","b","BigInt","Error","hashFN","length","hash1","slice","hash2"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\zklogin\\poseidon.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tposeidon1,\n\tposeidon2,\n\tposeidon3,\n\tposeidon4,\n\tposeidon5,\n\tposeidon6,\n\tposeidon7,\n\tposeidon8,\n\tposeidon9,\n\tposeidon10,\n\tposeidon11,\n\tposeidon12,\n\tposeidon13,\n\tposeidon14,\n\tposeidon15,\n\tposeidon16,\n} from 'poseidon-lite';\n\nconst poseidonNumToHashFN = [\n\tposeidon1,\n\tposeidon2,\n\tposeidon3,\n\tposeidon4,\n\tposeidon5,\n\tposeidon6,\n\tposeidon7,\n\tposeidon8,\n\tposeidon9,\n\tposeidon10,\n\tposeidon11,\n\tposeidon12,\n\tposeidon13,\n\tposeidon14,\n\tposeidon15,\n\tposeidon16,\n];\n\nexport const BN254_FIELD_SIZE =\n\t21888242871839275222246405745257275088548364400416034343698204186575808495617n;\n\nexport function poseidonHash(inputs: (number | bigint | string)[]): bigint {\n\tinputs.forEach((x) => {\n\t\tconst b = BigInt(x);\n\t\tif (b < 0 || b >= BN254_FIELD_SIZE) {\n\t\t\tthrow new Error(`Element ${b} not in the BN254 field`);\n\t\t}\n\t});\n\n\tconst hashFN = poseidonNumToHashFN[inputs.length - 1];\n\n\tif (hashFN) {\n\t\treturn hashFN(inputs);\n\t} else if (inputs.length <= 32) {\n\t\tconst hash1 = poseidonHash(inputs.slice(0, 16));\n\t\tconst hash2 = poseidonHash(inputs.slice(16));\n\t\treturn poseidonHash([hash1, hash2]);\n\t} else {\n\t\tthrow new Error(`Yet to implement: Unable to hash a vector of length ${inputs.length}`);\n\t}\n}\n"],"mappings":"AAGA,SACCA,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,QACM;AAEP,MAAMC,mBAAA,GAAsB,CAC3BhB,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,EACAC,UAAA,CACD;AAEO,MAAME,gBAAA,GACZ;AAEM,SAASC,aAAaC,MAAA,EAA8C;EAC1EA,MAAA,CAAOC,OAAA,CAASC,CAAA,IAAM;IACrB,MAAMC,CAAA,GAAIC,MAAA,CAAOF,CAAC;IAClB,IAAIC,CAAA,GAAI,KAAKA,CAAA,IAAKL,gBAAA,EAAkB;MACnC,MAAM,IAAIO,KAAA,CAAM,WAAWF,CAAC,yBAAyB;IACtD;EACD,CAAC;EAED,MAAMG,MAAA,GAAST,mBAAA,CAAoBG,MAAA,CAAOO,MAAA,GAAS,CAAC;EAEpD,IAAID,MAAA,EAAQ;IACX,OAAOA,MAAA,CAAON,MAAM;EACrB,WAAWA,MAAA,CAAOO,MAAA,IAAU,IAAI;IAC/B,MAAMC,KAAA,GAAQT,YAAA,CAAaC,MAAA,CAAOS,KAAA,CAAM,GAAG,EAAE,CAAC;IAC9C,MAAMC,KAAA,GAAQX,YAAA,CAAaC,MAAA,CAAOS,KAAA,CAAM,EAAE,CAAC;IAC3C,OAAOV,YAAA,CAAa,CAACS,KAAA,EAAOE,KAAK,CAAC;EACnC,OAAO;IACN,MAAM,IAAIL,KAAA,CAAM,uDAAuDL,MAAA,CAAOO,MAAM,EAAE;EACvF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { getFullnodeUrl, SuiClient } from \"@mysten/sui/client\";\nimport { normalizeSuiAddress } from \"@mysten/sui/utils\";\nimport { ZkSendLink } from \"./claim.js\";\nimport { getContractIds } from \"./zk-bag.js\";\nasync function getSentTransactionsWithLinks({\n  address,\n  cursor,\n  limit = 10,\n  network = \"mainnet\",\n  contract = getContractIds(network),\n  client = new SuiClient({\n    url: getFullnodeUrl(network)\n  }),\n  loadClaimedAssets = false,\n  ...linkOptions\n}) {\n  const packageId = normalizeSuiAddress(contract.packageId);\n  const page = await client.queryTransactionBlocks({\n    filter: {\n      FromAddress: address\n    },\n    order: \"descending\",\n    cursor,\n    limit,\n    options: {\n      showInput: true,\n      showObjectChanges: true,\n      showBalanceChanges: true\n    }\n  });\n  const data = await Promise.all(page.data.map(async res => {\n    const transaction = res.transaction?.data.transaction;\n    if (transaction?.kind !== \"ProgrammableTransaction\") {\n      throw new Error(\"Invalid transaction\");\n    }\n    const newLinks = await Promise.all(transaction.transactions.filter(tx => \"MoveCall\" in tx ? tx.MoveCall.package === packageId && tx.MoveCall.module === \"zk_bag\" && tx.MoveCall.function === \"new\" : false).map(async tx => {\n      if (!(\"MoveCall\" in tx)) {\n        throw new Error(\"Expected MoveCall\");\n      }\n      const addressArg = tx.MoveCall.arguments?.[1];\n      if (!addressArg || typeof addressArg !== \"object\" || !(\"Input\" in addressArg)) {\n        throw new Error(\"Invalid address argument\");\n      }\n      const input = transaction.inputs[addressArg.Input];\n      if (input.type !== \"pure\") {\n        throw new Error(\"Expected Address input to be a Pure value\");\n      }\n      const address2 = normalizeSuiAddress(input.value);\n      const link = new ZkSendLink({\n        network,\n        address: address2,\n        contract,\n        isContractLink: true,\n        client,\n        ...linkOptions\n      });\n      await link.loadAssets({\n        transaction: res,\n        loadClaimedAssets\n      });\n      return link;\n    }));\n    const regeneratedLinks = await Promise.all(transaction.transactions.filter(tx => \"MoveCall\" in tx ? tx.MoveCall.package === packageId && tx.MoveCall.module === \"zk_bag\" && tx.MoveCall.function === \"update_receiver\" : false).map(async tx => {\n      if (!(\"MoveCall\" in tx)) {\n        throw new Error(\"Expected MoveCall\");\n      }\n      const addressArg = tx.MoveCall.arguments?.[2];\n      if (!addressArg || typeof addressArg !== \"object\" || !(\"Input\" in addressArg)) {\n        throw new Error(\"Invalid address argument\");\n      }\n      const input = transaction.inputs[addressArg.Input];\n      if (input.type !== \"pure\") {\n        throw new Error(\"Expected Address input to be a Pure value\");\n      }\n      const address2 = normalizeSuiAddress(input.value);\n      const link = new ZkSendLink({\n        network,\n        address: address2,\n        contract,\n        isContractLink: true,\n        ...linkOptions\n      });\n      await link.loadAssets({\n        loadClaimedAssets\n      });\n      return link;\n    }));\n    return {\n      transaction: res,\n      links: [...newLinks, ...regeneratedLinks]\n    };\n  }));\n  return {\n    data,\n    nextCursor: page.nextCursor,\n    hasNextPage: page.hasNextPage\n  };\n}\nexport { getSentTransactionsWithLinks };","map":{"version":3,"names":["getFullnodeUrl","SuiClient","normalizeSuiAddress","ZkSendLink","getContractIds","getSentTransactionsWithLinks","address","cursor","limit","network","contract","client","url","loadClaimedAssets","linkOptions","packageId","page","queryTransactionBlocks","filter","FromAddress","order","options","showInput","showObjectChanges","showBalanceChanges","data","Promise","all","map","res","transaction","kind","Error","newLinks","transactions","tx","MoveCall","package","module","function","addressArg","arguments","input","inputs","Input","type","address2","value","link","isContractLink","loadAssets","regeneratedLinks","links","nextCursor","hasNextPage"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\zksend\\src\\links\\get-sent-transactions.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { normalizeSuiAddress } from '@mysten/sui/utils';\n\nimport { ZkSendLink } from './claim.js';\nimport { getContractIds } from './zk-bag.js';\nimport type { ZkBagContractOptions } from './zk-bag.js';\n\nexport async function getSentTransactionsWithLinks({\n\taddress,\n\tcursor,\n\tlimit = 10,\n\tnetwork = 'mainnet',\n\tcontract = getContractIds(network),\n\tclient = new SuiClient({ url: getFullnodeUrl(network) }),\n\tloadClaimedAssets = false,\n\t...linkOptions\n}: {\n\taddress: string;\n\tcontract?: ZkBagContractOptions;\n\tcursor?: string;\n\tlimit?: number;\n\tnetwork?: 'mainnet' | 'testnet';\n\tloadClaimedAssets?: boolean;\n\n\t// Link options:\n\thost?: string;\n\tpath?: string;\n\tclaimApi?: string;\n\tclient?: SuiClient;\n}) {\n\tconst packageId = normalizeSuiAddress(contract.packageId);\n\n\tconst page = await client.queryTransactionBlocks({\n\t\tfilter: {\n\t\t\tFromAddress: address,\n\t\t},\n\t\torder: 'descending',\n\t\tcursor,\n\t\tlimit,\n\t\toptions: {\n\t\t\tshowInput: true,\n\t\t\tshowObjectChanges: true,\n\t\t\tshowBalanceChanges: true,\n\t\t},\n\t});\n\n\tconst data = await Promise.all(\n\t\tpage.data.map(async (res) => {\n\t\t\tconst transaction = res.transaction?.data.transaction;\n\t\t\tif (transaction?.kind !== 'ProgrammableTransaction') {\n\t\t\t\tthrow new Error('Invalid transaction');\n\t\t\t}\n\n\t\t\tconst newLinks = await Promise.all(\n\t\t\t\ttransaction.transactions\n\t\t\t\t\t.filter((tx) =>\n\t\t\t\t\t\t'MoveCall' in tx\n\t\t\t\t\t\t\t? tx.MoveCall.package === packageId &&\n\t\t\t\t\t\t\t\ttx.MoveCall.module === 'zk_bag' &&\n\t\t\t\t\t\t\t\ttx.MoveCall.function === 'new'\n\t\t\t\t\t\t\t: false,\n\t\t\t\t\t)\n\t\t\t\t\t.map(async (tx) => {\n\t\t\t\t\t\tif (!('MoveCall' in tx)) {\n\t\t\t\t\t\t\tthrow new Error('Expected MoveCall');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst addressArg = tx.MoveCall.arguments?.[1];\n\n\t\t\t\t\t\tif (!addressArg || typeof addressArg !== 'object' || !('Input' in addressArg)) {\n\t\t\t\t\t\t\tthrow new Error('Invalid address argument');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst input = transaction.inputs[addressArg.Input];\n\n\t\t\t\t\t\tif (input.type !== 'pure') {\n\t\t\t\t\t\t\tthrow new Error('Expected Address input to be a Pure value');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst address = normalizeSuiAddress(input.value as string);\n\n\t\t\t\t\t\tconst link = new ZkSendLink({\n\t\t\t\t\t\t\tnetwork,\n\t\t\t\t\t\t\taddress,\n\t\t\t\t\t\t\tcontract,\n\t\t\t\t\t\t\tisContractLink: true,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\t...linkOptions,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait link.loadAssets({\n\t\t\t\t\t\t\ttransaction: res,\n\t\t\t\t\t\t\tloadClaimedAssets,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn link;\n\t\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst regeneratedLinks = await Promise.all(\n\t\t\t\ttransaction.transactions\n\t\t\t\t\t.filter((tx) =>\n\t\t\t\t\t\t'MoveCall' in tx\n\t\t\t\t\t\t\t? tx.MoveCall.package === packageId &&\n\t\t\t\t\t\t\t\ttx.MoveCall.module === 'zk_bag' &&\n\t\t\t\t\t\t\t\ttx.MoveCall.function === 'update_receiver'\n\t\t\t\t\t\t\t: false,\n\t\t\t\t\t)\n\t\t\t\t\t.map(async (tx) => {\n\t\t\t\t\t\tif (!('MoveCall' in tx)) {\n\t\t\t\t\t\t\tthrow new Error('Expected MoveCall');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst addressArg = tx.MoveCall.arguments?.[2];\n\n\t\t\t\t\t\tif (!addressArg || typeof addressArg !== 'object' || !('Input' in addressArg)) {\n\t\t\t\t\t\t\tthrow new Error('Invalid address argument');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst input = transaction.inputs[addressArg.Input];\n\n\t\t\t\t\t\tif (input.type !== 'pure') {\n\t\t\t\t\t\t\tthrow new Error('Expected Address input to be a Pure value');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst address = normalizeSuiAddress(input.value as string);\n\n\t\t\t\t\t\tconst link = new ZkSendLink({\n\t\t\t\t\t\t\tnetwork,\n\t\t\t\t\t\t\taddress,\n\t\t\t\t\t\t\tcontract,\n\t\t\t\t\t\t\tisContractLink: true,\n\t\t\t\t\t\t\t...linkOptions,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait link.loadAssets({ loadClaimedAssets });\n\n\t\t\t\t\t\treturn link;\n\t\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\ttransaction: res,\n\t\t\t\tlinks: [...newLinks, ...regeneratedLinks],\n\t\t\t};\n\t\t}),\n\t);\n\n\treturn {\n\t\tdata,\n\t\tnextCursor: page.nextCursor,\n\t\thasNextPage: page.hasNextPage,\n\t};\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
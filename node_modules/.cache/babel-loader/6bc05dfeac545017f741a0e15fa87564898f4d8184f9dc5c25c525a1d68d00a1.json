{"ast":null,"code":"var __typeError = msg => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _url, _queries, _headers, _fetch;\nimport { print } from \"graphql\";\nclass SuiGraphQLRequestError extends Error {}\nclass SuiGraphQLClient {\n  constructor({\n    url,\n    fetch: fetchFn = fetch,\n    headers = {},\n    queries = {}\n  }) {\n    __privateAdd(this, _url);\n    __privateAdd(this, _queries);\n    __privateAdd(this, _headers);\n    __privateAdd(this, _fetch);\n    __privateSet(this, _url, url);\n    __privateSet(this, _queries, queries);\n    __privateSet(this, _headers, headers);\n    __privateSet(this, _fetch, (...args) => fetchFn(...args));\n  }\n  async query(options) {\n    const res = await __privateGet(this, _fetch).call(this, __privateGet(this, _url), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...__privateGet(this, _headers)\n      },\n      body: JSON.stringify({\n        query: typeof options.query === \"string\" ? String(options.query) : print(options.query),\n        variables: options.variables,\n        extensions: options.extensions,\n        operationName: options.operationName\n      })\n    });\n    if (!res.ok) {\n      throw new SuiGraphQLRequestError(`GraphQL request failed: ${res.statusText} (${res.status})`);\n    }\n    return await res.json();\n  }\n  async execute(query, options) {\n    return this.query({\n      ...options,\n      query: __privateGet(this, _queries)[query]\n    });\n  }\n}\n_url = new WeakMap();\n_queries = new WeakMap();\n_headers = new WeakMap();\n_fetch = new WeakMap();\nexport { SuiGraphQLClient, SuiGraphQLRequestError };","map":{"version":3,"names":["_url","_queries","_headers","_fetch","print","SuiGraphQLRequestError","Error","SuiGraphQLClient","constructor","url","fetch","fetchFn","headers","queries","__privateAdd","__privateSet","args","query","options","res","__privateGet","call","method","body","JSON","stringify","String","variables","extensions","operationName","ok","statusText","status","json","execute","WeakMap"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\graphql\\client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport type { TadaDocumentNode } from 'gql.tada';\nimport type { DocumentNode } from 'graphql';\nimport { print } from 'graphql';\n\nexport type GraphQLDocument<\n\tResult = Record<string, unknown>,\n\tVariables = Record<string, unknown>,\n> =\n\t| string\n\t| DocumentNode\n\t| TypedDocumentNode<Result, Variables>\n\t| TadaDocumentNode<Result, Variables>;\n\nexport type GraphQLQueryOptions<\n\tResult = Record<string, unknown>,\n\tVariables = Record<string, unknown>,\n> = {\n\tquery: GraphQLDocument<Result, Variables>;\n\toperationName?: string;\n\textensions?: Record<string, unknown>;\n} & (Variables extends { [key: string]: never }\n\t? { variables?: Variables }\n\t: {\n\t\t\tvariables: Variables;\n\t\t});\n\nexport type GraphQLQueryResult<Result = Record<string, unknown>> = {\n\tdata?: Result;\n\terrors?: GraphQLResponseErrors;\n\textensions?: Record<string, unknown>;\n};\n\nexport type GraphQLResponseErrors = Array<{\n\tmessage: string;\n\tlocations?: { line: number; column: number }[];\n\tpath?: (string | number)[];\n}>;\n\nexport interface SuiGraphQLClientOptions<Queries extends Record<string, GraphQLDocument>> {\n\turl: string;\n\tfetch?: typeof fetch;\n\theaders?: Record<string, string>;\n\tqueries?: Queries;\n}\n\nexport class SuiGraphQLRequestError extends Error {}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class SuiGraphQLClient<Queries extends Record<string, GraphQLDocument> = {}> {\n\t#url: string;\n\t#queries: Queries;\n\t#headers: Record<string, string>;\n\t#fetch: typeof fetch;\n\n\tconstructor({\n\t\turl,\n\t\tfetch: fetchFn = fetch,\n\t\theaders = {},\n\t\tqueries = {} as Queries,\n\t}: SuiGraphQLClientOptions<Queries>) {\n\t\tthis.#url = url;\n\t\tthis.#queries = queries;\n\t\tthis.#headers = headers;\n\t\tthis.#fetch = (...args) => fetchFn(...args);\n\t}\n\n\tasync query<Result = Record<string, unknown>, Variables = Record<string, unknown>>(\n\t\toptions: GraphQLQueryOptions<Result, Variables>,\n\t): Promise<GraphQLQueryResult<Result>> {\n\t\tconst res = await this.#fetch(this.#url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...this.#headers,\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tquery: typeof options.query === 'string' ? String(options.query) : print(options.query),\n\t\t\t\tvariables: options.variables,\n\t\t\t\textensions: options.extensions,\n\t\t\t\toperationName: options.operationName,\n\t\t\t}),\n\t\t});\n\n\t\tif (!res.ok) {\n\t\t\tthrow new SuiGraphQLRequestError(`GraphQL request failed: ${res.statusText} (${res.status})`);\n\t\t}\n\n\t\treturn await res.json();\n\t}\n\n\tasync execute<\n\t\tconst Query extends Extract<keyof Queries, string>,\n\t\tResult = Queries[Query] extends GraphQLDocument<infer R, unknown> ? R : Record<string, unknown>,\n\t\tVariables = Queries[Query] extends GraphQLDocument<unknown, infer V>\n\t\t\t? V\n\t\t\t: Record<string, unknown>,\n\t>(\n\t\tquery: Query,\n\t\toptions: Omit<GraphQLQueryOptions<Result, Variables>, 'query'>,\n\t): Promise<GraphQLQueryResult<Result>> {\n\t\treturn this.query({\n\t\t\t...(options as { variables: Record<string, unknown> }),\n\t\t\tquery: this.#queries[query]!,\n\t\t}) as Promise<GraphQLQueryResult<Result>>;\n\t}\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,IAAA,EAAAC,QAAA,EAAAC,QAAA,EAAAC,MAAA;AAMA,SAASC,KAAA,QAAa;AA2Cf,MAAMC,sBAAA,SAA+BC,KAAA,CAAM;AAG3C,MAAMC,gBAAA,CAAuE;EAMnFC,YAAY;IACXC,GAAA;IACAC,KAAA,EAAOC,OAAA,GAAUD,KAAA;IACjBE,OAAA,GAAU,CAAC;IACXC,OAAA,GAAU,CAAC;EACZ,GAAqC;IAVrCC,YAAA,OAAAd,IAAA;IACAc,YAAA,OAAAb,QAAA;IACAa,YAAA,OAAAZ,QAAA;IACAY,YAAA,OAAAX,MAAA;IAQCY,YAAA,OAAKf,IAAA,EAAOS,GAAA;IACZM,YAAA,OAAKd,QAAA,EAAWY,OAAA;IAChBE,YAAA,OAAKb,QAAA,EAAWU,OAAA;IAChBG,YAAA,OAAKZ,MAAA,EAAS,IAAIa,IAAA,KAASL,OAAA,CAAQ,GAAGK,IAAI;EAC3C;EAEA,MAAMC,MACLC,OAAA,EACsC;IACtC,MAAMC,GAAA,GAAM,MAAMC,YAAA,OAAKjB,MAAA,EAALkB,IAAA,OAAYD,YAAA,OAAKpB,IAAA,GAAM;MACxCsB,MAAA,EAAQ;MACRV,OAAA,EAAS;QACR,gBAAgB;QAChB,GAAGQ,YAAA,OAAKlB,QAAA;MACT;MACAqB,IAAA,EAAMC,IAAA,CAAKC,SAAA,CAAU;QACpBR,KAAA,EAAO,OAAOC,OAAA,CAAQD,KAAA,KAAU,WAAWS,MAAA,CAAOR,OAAA,CAAQD,KAAK,IAAIb,KAAA,CAAMc,OAAA,CAAQD,KAAK;QACtFU,SAAA,EAAWT,OAAA,CAAQS,SAAA;QACnBC,UAAA,EAAYV,OAAA,CAAQU,UAAA;QACpBC,aAAA,EAAeX,OAAA,CAAQW;MACxB,CAAC;IACF;IAEA,IAAI,CAACV,GAAA,CAAIW,EAAA,EAAI;MACZ,MAAM,IAAIzB,sBAAA,CAAuB,2BAA2Bc,GAAA,CAAIY,UAAU,KAAKZ,GAAA,CAAIa,MAAM,GAAG;IAC7F;IAEA,OAAO,MAAMb,GAAA,CAAIc,IAAA,CAAK;EACvB;EAEA,MAAMC,QAOLjB,KAAA,EACAC,OAAA,EACsC;IACtC,OAAO,KAAKD,KAAA,CAAM;MACjB,GAAIC,OAAA;MACJD,KAAA,EAAOG,YAAA,OAAKnB,QAAA,EAASgB,KAAK;IAC3B,CAAC;EACF;AACD;AAxDCjB,IAAA,OAAAmC,OAAA;AACAlC,QAAA,OAAAkC,OAAA;AACAjC,QAAA,OAAAiC,OAAA;AACAhC,MAAA,OAAAgC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
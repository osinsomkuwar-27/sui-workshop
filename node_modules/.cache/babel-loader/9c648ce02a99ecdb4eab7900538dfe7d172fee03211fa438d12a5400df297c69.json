{"ast":null,"code":"import { normalizeStructTag, normalizeSuiAddress, parseStructTag } from \"@mysten/sui/utils\";\nfunction isClaimTransaction(tx, options) {\n  let transfers = 0;\n  for (const command of tx.getData().commands) {\n    switch (command.$kind) {\n      case \"TransferObjects\":\n        if (!command.TransferObjects.objects.every(o => o.$kind === \"Result\" || o.$kind === \"NestedResult\")) {\n          return false;\n        }\n        transfers++;\n        break;\n      case \"MoveCall\":\n        if (command.MoveCall.package !== options.packageId) {\n          return false;\n        }\n        if (command.MoveCall.module !== \"zk_bag\") {\n          return false;\n        }\n        const fn = command.MoveCall.function;\n        if (fn !== \"init_claim\" && fn !== \"reclaim\" && fn !== \"claim\" && fn !== \"finalize\") {\n          return false;\n        }\n        break;\n      default:\n        return false;\n    }\n  }\n  return transfers === 1;\n}\nfunction getAssetsFromTransaction({\n  transaction,\n  address,\n  isSent\n}) {\n  const normalizedAddress = normalizeSuiAddress(address);\n  const balances = [];\n  const nfts = [];\n  const coins = [];\n  transaction.balanceChanges?.forEach(change => {\n    const validAmountChange = isSent ? BigInt(change.amount) < 0n : BigInt(change.amount) > 0n;\n    if (validAmountChange && isOwner(change.owner, normalizedAddress)) {\n      balances.push({\n        coinType: normalizeStructTag(change.coinType),\n        amount: BigInt(change.amount)\n      });\n    }\n  });\n  transaction.objectChanges?.forEach(change => {\n    if (!isObjectOwner(change, normalizedAddress, isSent)) {\n      return;\n    }\n    if (\"objectType\" in change) {\n      const type = parseStructTag(change.objectType);\n      if (type.address === normalizeSuiAddress(\"0x2\") && type.module === \"coin\" && type.name === \"Coin\") {\n        if (change.type === \"created\" || change.type === \"transferred\" || change.type === \"mutated\") {\n          coins.push({\n            ...change,\n            type: change.objectType\n          });\n        }\n        return;\n      }\n    }\n    if (isObjectOwner(change, normalizedAddress, isSent) && (change.type === \"created\" || change.type === \"transferred\" || change.type === \"mutated\")) {\n      nfts.push({\n        objectId: change.objectId,\n        type: change.objectType,\n        version: change.version,\n        digest: change.digest\n      });\n    }\n  });\n  return {\n    balances,\n    nfts,\n    coins\n  };\n}\nfunction getObjectOwnerFromObjectChange(objectChange, isSent) {\n  if (isSent) {\n    return \"owner\" in objectChange ? objectChange.owner : null;\n  }\n  return \"recipient\" in objectChange ? objectChange.recipient : null;\n}\nfunction isObjectOwner(objectChange, address, isSent) {\n  const owner = getObjectOwnerFromObjectChange(objectChange, isSent);\n  if (isSent) {\n    return owner && typeof owner === \"object\" && \"AddressOwner\" in owner;\n  }\n  return ownedAfterChange(objectChange, address);\n}\nfunction ownedAfterChange(objectChange, address) {\n  if (objectChange.type === \"transferred\" && isOwner(objectChange.recipient, address)) {\n    return true;\n  }\n  if ((objectChange.type === \"created\" || objectChange.type === \"mutated\") && isOwner(objectChange.owner, address)) {\n    return true;\n  }\n  return false;\n}\nfunction isOwner(owner, address) {\n  return owner && typeof owner === \"object\" && \"AddressOwner\" in owner && normalizeSuiAddress(owner.AddressOwner) === address;\n}\nexport { getAssetsFromTransaction, isClaimTransaction, isOwner, ownedAfterChange };","map":{"version":3,"names":["normalizeStructTag","normalizeSuiAddress","parseStructTag","isClaimTransaction","tx","options","transfers","command","getData","commands","$kind","TransferObjects","objects","every","o","MoveCall","package","packageId","module","fn","function","getAssetsFromTransaction","transaction","address","isSent","normalizedAddress","balances","nfts","coins","balanceChanges","forEach","change","validAmountChange","BigInt","amount","isOwner","owner","push","coinType","objectChanges","isObjectOwner","type","objectType","name","objectId","version","digest","getObjectOwnerFromObjectChange","objectChange","recipient","ownedAfterChange","AddressOwner"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\zksend\\src\\links\\utils.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { ObjectOwner, SuiObjectChange, SuiTransactionBlockResponse } from '@mysten/sui/client';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport { normalizeStructTag, normalizeSuiAddress, parseStructTag } from '@mysten/sui/utils';\n\n// eslint-disable-next-line import/no-cycle\n\nexport interface LinkAssets {\n\tbalances: {\n\t\tcoinType: string;\n\t\tamount: bigint;\n\t}[];\n\n\tnfts: {\n\t\tobjectId: string;\n\t\ttype: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t}[];\n\n\tcoins: {\n\t\tobjectId: string;\n\t\ttype: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t}[];\n}\n\nexport function isClaimTransaction(\n\ttx: Transaction,\n\toptions: {\n\t\tpackageId: string;\n\t},\n) {\n\tlet transfers = 0;\n\n\tfor (const command of tx.getData().commands) {\n\t\tswitch (command.$kind) {\n\t\t\tcase 'TransferObjects':\n\t\t\t\t// Ensure that we are only transferring results of a claim\n\t\t\t\tif (\n\t\t\t\t\t!command.TransferObjects.objects.every(\n\t\t\t\t\t\t(o) => o.$kind === 'Result' || o.$kind === 'NestedResult',\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\ttransfers++;\n\t\t\t\tbreak;\n\t\t\tcase 'MoveCall':\n\t\t\t\tif (command.MoveCall.package !== options.packageId) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (command.MoveCall.module !== 'zk_bag') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst fn = command.MoveCall.function;\n\t\t\t\tif (fn !== 'init_claim' && fn !== 'reclaim' && fn !== 'claim' && fn !== 'finalize') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn transfers === 1;\n}\n\nexport function getAssetsFromTransaction({\n\ttransaction,\n\taddress,\n\tisSent,\n}: {\n\ttransaction: SuiTransactionBlockResponse;\n\taddress: string;\n\tisSent: boolean;\n}): LinkAssets {\n\tconst normalizedAddress = normalizeSuiAddress(address);\n\tconst balances: {\n\t\tcoinType: string;\n\t\tamount: bigint;\n\t}[] = [];\n\n\tconst nfts: {\n\t\tobjectId: string;\n\t\ttype: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t}[] = [];\n\n\tconst coins: {\n\t\tobjectId: string;\n\t\ttype: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t}[] = [];\n\n\ttransaction.balanceChanges?.forEach((change) => {\n\t\tconst validAmountChange = isSent ? BigInt(change.amount) < 0n : BigInt(change.amount) > 0n;\n\t\tif (validAmountChange && isOwner(change.owner, normalizedAddress)) {\n\t\t\tbalances.push({\n\t\t\t\tcoinType: normalizeStructTag(change.coinType),\n\t\t\t\tamount: BigInt(change.amount),\n\t\t\t});\n\t\t}\n\t});\n\n\ttransaction.objectChanges?.forEach((change) => {\n\t\tif (!isObjectOwner(change, normalizedAddress, isSent)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ('objectType' in change) {\n\t\t\tconst type = parseStructTag(change.objectType);\n\n\t\t\tif (\n\t\t\t\ttype.address === normalizeSuiAddress('0x2') &&\n\t\t\t\ttype.module === 'coin' &&\n\t\t\t\ttype.name === 'Coin'\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\tchange.type === 'created' ||\n\t\t\t\t\tchange.type === 'transferred' ||\n\t\t\t\t\tchange.type === 'mutated'\n\t\t\t\t) {\n\t\t\t\t\tcoins.push({\n\t\t\t\t\t\t...change,\n\t\t\t\t\t\ttype: change.objectType,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tisObjectOwner(change, normalizedAddress, isSent) &&\n\t\t\t(change.type === 'created' || change.type === 'transferred' || change.type === 'mutated')\n\t\t) {\n\t\t\tnfts.push({\n\t\t\t\tobjectId: change.objectId,\n\t\t\t\ttype: change.objectType,\n\t\t\t\tversion: change.version,\n\t\t\t\tdigest: change.digest,\n\t\t\t});\n\t\t}\n\t});\n\n\treturn {\n\t\tbalances,\n\t\tnfts,\n\t\tcoins,\n\t};\n}\n\nfunction getObjectOwnerFromObjectChange(objectChange: SuiObjectChange, isSent: boolean) {\n\tif (isSent) {\n\t\treturn 'owner' in objectChange ? objectChange.owner : null;\n\t}\n\n\treturn 'recipient' in objectChange ? objectChange.recipient : null;\n}\n\nfunction isObjectOwner(objectChange: SuiObjectChange, address: string, isSent: boolean) {\n\tconst owner = getObjectOwnerFromObjectChange(objectChange, isSent);\n\n\tif (isSent) {\n\t\treturn owner && typeof owner === 'object' && 'AddressOwner' in owner;\n\t}\n\n\treturn ownedAfterChange(objectChange, address);\n}\n\nexport function ownedAfterChange(\n\tobjectChange: SuiObjectChange,\n\taddress: string,\n): objectChange is Extract<SuiObjectChange, { type: 'created' | 'transferred' | 'mutated' }> {\n\tif (objectChange.type === 'transferred' && isOwner(objectChange.recipient, address)) {\n\t\treturn true;\n\t}\n\n\tif (\n\t\t(objectChange.type === 'created' || objectChange.type === 'mutated') &&\n\t\tisOwner(objectChange.owner, address)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport function isOwner(owner: ObjectOwner, address: string): owner is { AddressOwner: string } {\n\treturn (\n\t\towner &&\n\t\ttypeof owner === 'object' &&\n\t\t'AddressOwner' in owner &&\n\t\tnormalizeSuiAddress(owner.AddressOwner) === address\n\t);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { isValidSuiNSName } from \"./suins.js\";\nconst NAME_PATTERN = /^([a-z0-9]+(?:-[a-z0-9]+)*)$/;\nconst VERSION_REGEX = /^\\d+$/;\nconst MAX_APP_SIZE = 64;\nconst NAME_SEPARATOR = \"/\";\nconst isValidNamedPackage = name => {\n  const parts = name.split(NAME_SEPARATOR);\n  if (parts.length < 2 || parts.length > 3) return false;\n  const [org, app, version] = parts;\n  if (version !== void 0 && !VERSION_REGEX.test(version)) return false;\n  if (!isValidSuiNSName(org)) return false;\n  return NAME_PATTERN.test(app) && app.length < MAX_APP_SIZE;\n};\nconst isValidNamedType = type => {\n  const splitType = type.split(/::|<|>|,/);\n  for (const t of splitType) {\n    if (t.includes(NAME_SEPARATOR) && !isValidNamedPackage(t)) return false;\n  }\n  return true;\n};\nexport { isValidNamedPackage, isValidNamedType };","map":{"version":3,"names":["isValidSuiNSName","NAME_PATTERN","VERSION_REGEX","MAX_APP_SIZE","NAME_SEPARATOR","isValidNamedPackage","name","parts","split","length","org","app","version","test","isValidNamedType","type","splitType","t","includes"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\sui\\src\\utils\\move-registry.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isValidSuiNSName } from './suins.js';\n\n/** The pattern to find an optionally versioned name */\nconst NAME_PATTERN = /^([a-z0-9]+(?:-[a-z0-9]+)*)$/;\n/** The pattern for a valid version number */\nconst VERSION_REGEX = /^\\d+$/;\n/** The maximum size for an app */\nconst MAX_APP_SIZE = 64;\n/** The separator for the name */\nconst NAME_SEPARATOR = '/';\n\nexport const isValidNamedPackage = (name: string): boolean => {\n\tconst parts = name.split(NAME_SEPARATOR);\n\t// The name has to have 2 parts (without-version), or 3 parts (with version).\n\tif (parts.length < 2 || parts.length > 3) return false;\n\n\tconst [org, app, version] = parts; // split by {org} {app} {optional version}\n\n\t// If the version exists, it must be a number.\n\tif (version !== undefined && !VERSION_REGEX.test(version)) return false;\n\t// Check if the org is a valid SuiNS name.\n\tif (!isValidSuiNSName(org)) return false;\n\n\t// Check if the app is a valid name.\n\treturn NAME_PATTERN.test(app) && app.length < MAX_APP_SIZE;\n};\n\n/**\n * Checks if a type contains valid named packages.\n * This DOES NOT check if the type is a valid Move type.\n */\nexport const isValidNamedType = (type: string): boolean => {\n\t// split our type by all possible type delimeters.\n\tconst splitType = type.split(/::|<|>|,/);\n\tfor (const t of splitType) {\n\t\tif (t.includes(NAME_SEPARATOR) && !isValidNamedPackage(t)) return false;\n\t}\n\t// TODO: Add `isValidStructTag` check once it's introduced.\n\treturn true;\n};\n"],"mappings":"AAGA,SAASA,gBAAA,QAAwB;AAGjC,MAAMC,YAAA,GAAe;AAErB,MAAMC,aAAA,GAAgB;AAEtB,MAAMC,YAAA,GAAe;AAErB,MAAMC,cAAA,GAAiB;AAEhB,MAAMC,mBAAA,GAAuBC,IAAA,IAA0B;EAC7D,MAAMC,KAAA,GAAQD,IAAA,CAAKE,KAAA,CAAMJ,cAAc;EAEvC,IAAIG,KAAA,CAAME,MAAA,GAAS,KAAKF,KAAA,CAAME,MAAA,GAAS,GAAG,OAAO;EAEjD,MAAM,CAACC,GAAA,EAAKC,GAAA,EAAKC,OAAO,IAAIL,KAAA;EAG5B,IAAIK,OAAA,KAAY,UAAa,CAACV,aAAA,CAAcW,IAAA,CAAKD,OAAO,GAAG,OAAO;EAElE,IAAI,CAACZ,gBAAA,CAAiBU,GAAG,GAAG,OAAO;EAGnC,OAAOT,YAAA,CAAaY,IAAA,CAAKF,GAAG,KAAKA,GAAA,CAAIF,MAAA,GAASN,YAAA;AAC/C;AAMO,MAAMW,gBAAA,GAAoBC,IAAA,IAA0B;EAE1D,MAAMC,SAAA,GAAYD,IAAA,CAAKP,KAAA,CAAM,UAAU;EACvC,WAAWS,CAAA,IAAKD,SAAA,EAAW;IAC1B,IAAIC,CAAA,CAAEC,QAAA,CAASd,cAAc,KAAK,CAACC,mBAAA,CAAoBY,CAAC,GAAG,OAAO;EACnE;EAEA,OAAO;AACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { literal, object, optional, pipe, string, url, uuid, variant } from \"valibot\";\nconst StashedRequestData = variant(\"type\", [object({\n  type: literal(\"connect\")\n}), object({\n  type: literal(\"sign-transaction-block\"),\n  data: string(\"`data` is required\"),\n  address: string(\"`address` is required\")\n}), object({\n  type: literal(\"sign-personal-message\"),\n  bytes: string(\"`bytes` is required\"),\n  address: string(\"`address` is required\")\n})]);\nconst StashedRequest = object({\n  id: pipe(string(\"`id` is required\"), uuid()),\n  origin: pipe(string(), url(\"`origin` must be a valid URL\")),\n  name: optional(string()),\n  payload: StashedRequestData\n});\nconst StashedResponseData = variant(\"type\", [object({\n  type: literal(\"connect\"),\n  address: string()\n}), object({\n  type: literal(\"sign-transaction-block\"),\n  bytes: string(),\n  signature: string()\n}), object({\n  type: literal(\"sign-personal-message\"),\n  bytes: string(),\n  signature: string()\n})]);\nconst StashedResponsePayload = variant(\"type\", [object({\n  type: literal(\"reject\")\n}), object({\n  type: literal(\"resolve\"),\n  data: StashedResponseData\n})]);\nconst StashedResponse = object({\n  id: pipe(string(), uuid()),\n  source: literal(\"zksend-channel\"),\n  payload: StashedResponsePayload\n});\nexport { StashedRequest, StashedRequestData, StashedResponse, StashedResponseData, StashedResponsePayload };","map":{"version":3,"names":["literal","object","optional","pipe","string","url","uuid","variant","StashedRequestData","type","data","address","bytes","StashedRequest","id","origin","name","payload","StashedResponseData","signature","StashedResponsePayload","StashedResponse","source"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\r\\sui-workshop\\node_modules\\@mysten\\zksend\\src\\wallet\\channel\\events.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { InferOutput } from 'valibot';\nimport { literal, object, optional, pipe, string, url, uuid, variant } from 'valibot';\n\nexport const StashedRequestData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tdata: string('`data` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string('`bytes` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n]);\nexport type StashedRequestData = InferOutput<typeof StashedRequestData>;\n\nexport const StashedRequest = object({\n\tid: pipe(string('`id` is required'), uuid()),\n\torigin: pipe(string(), url('`origin` must be a valid URL')),\n\tname: optional(string()),\n\tpayload: StashedRequestData,\n});\n\nexport type StashedRequest = InferOutput<typeof StashedRequest>;\n\nexport const StashedResponseData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t\taddress: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n]);\nexport type StashedResponseData = InferOutput<typeof StashedResponseData>;\n\nexport const StashedResponsePayload = variant('type', [\n\tobject({\n\t\ttype: literal('reject'),\n\t}),\n\tobject({\n\t\ttype: literal('resolve'),\n\t\tdata: StashedResponseData,\n\t}),\n]);\nexport type StashedResponsePayload = InferOutput<typeof StashedResponsePayload>;\n\nexport const StashedResponse = object({\n\tid: pipe(string(), uuid()),\n\tsource: literal('zksend-channel'),\n\tpayload: StashedResponsePayload,\n});\nexport type StashedResponse = InferOutput<typeof StashedResponse>;\n\nexport type StashedRequestTypes = Record<string, any> & {\n\t[P in StashedRequestData as P['type']]: P;\n};\n\nexport type StashedResponseTypes = {\n\t[P in StashedResponseData as P['type']]: P;\n};\n"],"mappings":"AAIA,SAASA,OAAA,EAASC,MAAA,EAAQC,QAAA,EAAUC,IAAA,EAAMC,MAAA,EAAQC,GAAA,EAAKC,IAAA,EAAMC,OAAA,QAAe;AAErE,MAAMC,kBAAA,GAAqBD,OAAA,CAAQ,QAAQ,CACjDN,MAAA,CAAO;EACNQ,IAAA,EAAMT,OAAA,CAAQ,SAAS;AACxB,CAAC,GACDC,MAAA,CAAO;EACNQ,IAAA,EAAMT,OAAA,CAAQ,wBAAwB;EACtCU,IAAA,EAAMN,MAAA,CAAO,oBAAoB;EACjCO,OAAA,EAASP,MAAA,CAAO,uBAAuB;AACxC,CAAC,GACDH,MAAA,CAAO;EACNQ,IAAA,EAAMT,OAAA,CAAQ,uBAAuB;EACrCY,KAAA,EAAOR,MAAA,CAAO,qBAAqB;EACnCO,OAAA,EAASP,MAAA,CAAO,uBAAuB;AACxC,CAAC,EACD;AAGM,MAAMS,cAAA,GAAiBZ,MAAA,CAAO;EACpCa,EAAA,EAAIX,IAAA,CAAKC,MAAA,CAAO,kBAAkB,GAAGE,IAAA,CAAK,CAAC;EAC3CS,MAAA,EAAQZ,IAAA,CAAKC,MAAA,CAAO,GAAGC,GAAA,CAAI,8BAA8B,CAAC;EAC1DW,IAAA,EAAMd,QAAA,CAASE,MAAA,CAAO,CAAC;EACvBa,OAAA,EAAST;AACV,CAAC;AAIM,MAAMU,mBAAA,GAAsBX,OAAA,CAAQ,QAAQ,CAClDN,MAAA,CAAO;EACNQ,IAAA,EAAMT,OAAA,CAAQ,SAAS;EACvBW,OAAA,EAASP,MAAA,CAAO;AACjB,CAAC,GACDH,MAAA,CAAO;EACNQ,IAAA,EAAMT,OAAA,CAAQ,wBAAwB;EACtCY,KAAA,EAAOR,MAAA,CAAO;EACde,SAAA,EAAWf,MAAA,CAAO;AACnB,CAAC,GACDH,MAAA,CAAO;EACNQ,IAAA,EAAMT,OAAA,CAAQ,uBAAuB;EACrCY,KAAA,EAAOR,MAAA,CAAO;EACde,SAAA,EAAWf,MAAA,CAAO;AACnB,CAAC,EACD;AAGM,MAAMgB,sBAAA,GAAyBb,OAAA,CAAQ,QAAQ,CACrDN,MAAA,CAAO;EACNQ,IAAA,EAAMT,OAAA,CAAQ,QAAQ;AACvB,CAAC,GACDC,MAAA,CAAO;EACNQ,IAAA,EAAMT,OAAA,CAAQ,SAAS;EACvBU,IAAA,EAAMQ;AACP,CAAC,EACD;AAGM,MAAMG,eAAA,GAAkBpB,MAAA,CAAO;EACrCa,EAAA,EAAIX,IAAA,CAAKC,MAAA,CAAO,GAAGE,IAAA,CAAK,CAAC;EACzBgB,MAAA,EAAQtB,OAAA,CAAQ,gBAAgB;EAChCiB,OAAA,EAASG;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}